;;;
;;;	KXR bodyset part models
;;;
;;;	2018.6.6 created JSK M.I
;;;	2018.6.17 KXR L2 parts
;;;	2018.6.19 KXR L4 parts start
;;;	2018.9.27 kxr-bodyset-create, objects+
;;;	2020.11.20 add :move-named-coords
;;;
(require :kxrbody)
(require :m5models)

(set-new-defun)

(defun kxr-bodyset-create (blist &optional (joint-coord (make-cascoords)) holes &aux l)
  (dolist (b (cdr blist)) (send (car blist) :assoc b))
  #|
  (setq blist (mapcar #'(lambda (b)
			  (instance kxr-body :init :replace-obj b :fine b
				    :name (get b :name) :color (get b :color)))
		      blist))
  |#
  (setq l (instance bodyset :init (make-cascoords) :bodies blist))
  (dolist (m (send l :descendants)) (send l :assoc m))
  (when (derivedp joint-coord cascaded-coords)
    (send l :put :joint-coord joint-coord)
    (send joint-coord :put :color #f(1 1 0))
    (send joint-coord :put :size 40)
    (send joint-coord :put :width 4)
    (send l :assoc joint-coord))
  (kxr-assoc-holes l holes)
  l)

(defun kxr-angle-bracket-arms-bodyset (&key (arm-len 38) sensor)
  (let* (b0 b1 s
	    (b2 (kxr-arm-aux arm-len :name "upper-arm" :upper t))
	    (b3 (kxr-arm-aux arm-len :name "bottom-arm" :upper nil))
	    blist c l)
    (cond
      (sensor
       (setq b0 (kxr-sensor-angle-bracket))
       (setq s (kxr-sensor-joint-base sensor))
       (send s :bottom-to-z)
       (send s :rotate -pi/2 :z)
       (send s :move-coords (get b0 :sensor-coord) (make-cascoords :pos #f(0 0 0)))
       (send b0 :assoc s)
       (setq blist (list b0 s))
       )
      (t 
       (setq b0 (kxr-angle-bracket))
       (setq b1 (kxr-angle-bracket))
       (send b1 :locate #f(15 0 0))
       (send b0 :assoc b1)
       (setq blist (list b0 b1))
       ))
    (send b2 :rotate pi/2 :-x)
    (send b2 :locate #f(13 18 0) :world)
    (send b3 :rotate pi :z)
    (send b3 :rotate pi/2 :-x :world)
    (send b3 :locate #f(-13 18 0) :world)
    (setq l (kxr-bodyset-create (append blist (list b2 b3))))
    (setf (get l :joint-coord)
	  (make-cascoords :coords (midcoords 0.5 (get b2 :joint-coord) (get b3 :joint-coord))))
    (when sensor (setf (get l :sensor-coord) (get b0 :sensor-coord))
	  (send l :assoc (get l :sensor-coord)))
    (send l :assoc (get l :joint-coord))
    l))

(defun kxr-joint-base-arms-bodyset (&key (arm-len 38))
  (let* ((b0 (kxr-joint-base))
	 (b1 (kxr-arm-aux arm-len :name "bottom-arm" :upper nil))
	 (b2 (kxr-arm-aux arm-len :name "bottom-arm" :upper nil))
	 c l)
    (send b1 :rotate pi :x)
    (send b1 :locate #f(10.5 0 0) :world)
    (send b0 :assoc b1)
    (send b2 :rotate pi :y)
    (send b2 :locate #f(-10.5 0 0) :world)
    (send b0 :assoc b2)
    (send b0 :rotate pi/2 :z :world)
    (send b0 :locate #f(0 0 -3) :world)
    (setq l (kxr-bodyset-create (list b0 b1 b2)))
    (setf (get l :joint-coord)
	  (make-cascoords :coords (midcoords 0.5 (get b1 :joint-coord) (get b2 :joint-coord))))
    (send l :assoc (get l :joint-coord))
    l))

(defun kxr-angle-arm-bodyset (&key (rotate t) (arm-len 38) sensor)
  (let ((b0 (kxr-servo-s3301))
	blist b1 (c (make-cascoords)))
    (send b0 :rotate pi/2 :-x :world)
    (setq b1 (kxr-angle-bracket-arms-bodyset :arm-len arm-len :sensor sensor))
    (send b1 :rotate pi/2 :-x :world)
    (send b1 :rotate pi/2 :-z :world)
    (send c :locate (float-vector 0 0 (+ -18 (- 3 arm-len))) :world)
    (send b1 :assoc c)
    (send b1 :locate (float-vector (+ 21 2.5) 0 0) :world)
    (send b0 :assoc b1)
    (setq blist (send b1 :bodies))
    (if rotate (send b0 :rotate (atan 23.5 (+ 15 arm-len)) :y :world))
    (setq l (kxr-bodyset-create (cons b0 blist) c))
    (when sensor
      (setf (get l :sensor-coord) (get b1 :sensor-coord))
      (send l :assoc (get l :sensor-coord)))
    l))

(defun kxr-double-servo-flat-frames-bodyset ()
  (let ((b0 (kxr-servo-s3301))
	(b1 (kxr-flat-frame))
	(b2 (kxr-flat-frame))
	(b3 (kxr-servo-s3301))
	(c (make-cascoords)))
    (send b1 :move-named-coords "rdup1" b0 "uph4")
    (send b2 :move-named-coords "ldup1" b0 "downh4" pi :z)
    (send b3 :move-named-coords "uph4"  b1 "luup1" pi :z)
    (send b0 :rotate pi/2 :-x :world)
    (send c :locate (send b3 :worldpos))
    (kxr-bodyset-create (list b0 b1 b2 b3) c)))

(defun kxr-double-servo-flat-frames-short-bodyset ()
  (let ((b0 (kxr-servo-s3301))
	(b1 (kxr-flat-frame))
	(b2 (kxr-flat-frame))
	(b3 (kxr-servo-s3301))
	(c (make-cascoords)))
    (send b1 :move-named-coords "rdup0" b0 "uph4")
    (send b2 :move-named-coords "ldup0" b0 "downh4" pi :z)
    (send b3 :move-named-coords "uph1"  b1 "luup2" pi :z)
    (send b0 :rotate pi/2 :-x :world)
    (send c :locate (send b3 :worldpos))
    (kxr-bodyset-create (list b0 b1 b2 b3) c)))

(defun kxr-double-servo-joint-base-bodyset (&optional l/r)
  (let ((b0 (kxr-joint-frame-base-a-bodyset))
	(s1 (kxr-servo-s3301))
	(s2 (kxr-servo-s3301))
	blist l (c (make-cascoords)))
    (send b0 :rotate pi :x :world)
    (send b0 :locate (float-vector 0 0 (+ 10.5 9)) :world)
    (setq blist (send b0 :bodies))
    (send s1 :rotate -pi/2 :z :world)
    (send s1 :rotate pi/2 :y :world)
    (send s1 :translate (float-vector 0 (+ 10.5 21) 0) :world)
    (send s2 :rotate pi/2 :z :world)
    (send s2 :rotate pi/2 :y :world)
    (send s2 :translate (float-vector 0 (-(+ 10.5 21)) 0) :world)
    (send b0 :assoc s1)
    (send b0 :assoc s2)
    (cond
      ((kxr-right-limb? l/r) (send b0 :rotate -pi/2 :z :world))
      (t (send b0 :rotate pi/2 :z :world)))
    (send b0 :translate (float-vector 0 0 (- (+ 10.5 9 3))) :world)
    (setq l (kxr-bodyset-create (append blist (list s1 s2)) c))
    (cond
      ((kxr-right-limb? l/r)
       (setf (get l :front) (get s1 :upper-coord))
       (setf (get l :back) (get s2 :upper-coord)))
      (t 
       (setf (get l :back) (get s1 :upper-coord))
       (setf (get l :front) (get s2 :upper-coord))))
    l))

(defun kxr-arm-base-bodyset (&optional (len 20) &key sensor add-joint-base upside-down overlap horn flip)
  (if (null len) (setq len 20))
  (let* ((u (kxr-upper-arm len))
	 (l (kxr-bottom-arm len))
	 h bod j jb blist
	 (c (make-cascoords)))
    (cond
      (overlap
       (setq bod (kxr-sensor-joint-base sensor :flip (or flip (member :flip sensor))))
       (send u :move-named-coords "downh1" bod "sideuh3")
       (send l :move-named-coords "downh1" bod "sideuh1" pi :z))
      (sensor
       (setq jb (kxr-joint-base))
       (setq bod (kxr-sensor-joint-base sensor :flip (or flip (member :flip sensor))))
       (send bod :bottom-to-z)
       (send jb :bottom-on bod)
       (send bod :assoc jb)
       (send u :move-named-coords "downh1" jb "sideh3")
       (send l :move-named-coords "downh1" jb "sideh1" pi :z)
       (push jb blist))
      (t  (setq bod (kxr-joint-base))
	  (send u :move-named-coords "downh1" bod "sideh3")
	  (send l :move-named-coords "downh1" bod "sideh1" pi :z)
	  (send bod :translate #f(0 0 3) :world)
	  ))
    (when add-joint-base
      (setq j (kxr-joint-base))
      (send j :bottom-to-z)
      (send bod :bottom-on j)
      (push j blist))
    (send c :locate (send (midcoords 0.5 (get u :joint-coord) (get l :joint-coord)) :worldpos))
    (send bod :assoc c)
    (setq blist (append (list bod u l) blist))
    (when horn
      (setq h (kxr-horn))
      (send h :rotate pi :x :world)
      (send h :assoc bod)
      (send h :translate #f(0 0 3) :world)
      (push h blist))
    (kxr-bodyset-create blist c)))

(defun kxr-arm-chain-base-bodyset (&optional (low 20) (high 26))
  (let* ((u (kxr-upper-arm low))
	 (l (kxr-bottom-arm low))
	 (bod (kxr-joint-base))
	 (a1 (kxr-bottom-arm high))
	 (a2 (kxr-upper-arm high))
	 (c (make-cascoords)))
    (send c :locate (float-vector 0 0 (- 3 high)))
    (send bod :assoc c)
    (send u :move-named-coords "downh1" bod "sideh3")
    (send l :move-named-coords "downh1" bod "sideh1" pi :z)
    (send a1 :move-named-coords "downh1" bod "sideh2" pi/2 :-z)
    (send a2 :move-named-coords "downh1" bod "sideh4" pi/2 :z)
    (send bod :rotate pi/2 :z :world)
    (send bod :rotate pi/2 :x :world)
    (send bod :locate (float-vector 0 (- low 3) 0) :world)
    (kxr-bodyset-create (list bod u l a1 a2) c)))

(defun kxr-l6-foot-bodyset (&key sensor)
  (let* ((len 38)
	 (b (kxr-arm-base-bodyset len :sensor sensor))
	 (a (kxr-bottom-arm len))
	 (c (make-cascoords)))

    (send b :rotate pi/2 :z :world)
    (send b :rotate pi/2 :-y :world)
    (send c :locate (float-vector 1 0 (+ (- 8 3) len)) :world)
    (send a :assoc c)
    (send a :rotate pi :z :world)
    (send a :rotate pi/2 :y :world)
    (if sensor
	(send a :locate (float-vector (+ 12 -3) 0 13) :world)
      (send a :locate (float-vector -3 0 13) :world))
    (send b :assoc a)
    (send b :locate (float-vector len 0 0) :world)
    (kxr-bodyset-create (append (send b :bodies) (list a)) c)))

(defun kxr-cross-servo-bodyset nil (kxr-cross-servo-bodyset-aux :frame-b t))

(defun kxr-cross-servo-for-torso-bodyset nil
  (let ((a (kxr-cross-servo-bodyset-aux :frame-b t :backpack t)))
    (send a :rotate pi :x)
    a))

(defun kxr-cross-servo-bodyset-aux (&key frame-b supporter backpack canti apply-list sensor servo-flip)
  (let* ((s0 (kxr-servo-s3301))
	 (s1 (kxr-servo-s3301))
	 (b0 (kxr-cross-servo-frame-a))
	 (u (get s0 :upper-coord))
	 l b1 b2 b3 b4 blist blist2 (c (make-cascoords)))
    (when canti (send s0 :assoc u))
    (send s0 :rotate pi/2 :y)
    (send s0 :rotate pi/2 :-x)
    (if canti
	(send b0 :move-named-coords "inh1" s0 "downh1" pi/2 :-z)
      (send b0 :move-named-coords "inh1" s0 "uph2" pi/2 :z))
    (send s1 :move-named-coords "uph0" b0 "outh5" pi :z)

    (if (eq canti :-y)  (send s0 :rotate pi :z :world))

    (setq blist (list b0 s1 s0))
    (when frame-b
      (setq b1 (kxr-cross-servo-frame-b))
      (cond
       (canti
	(send b1 :move-named-coords "inh2" s0 "downh2" pi/2 :z)
	(send b1 :rotate pi :z :world)
	)
       (t (send b1 :move-named-coords "inh1" s0 "uph1" pi/2 :z)
	  ))
      (when servo-flip
	(send s0 :dissoc b0)
	(send s0 :dissoc b1)
	(send s0 :rotate pi :z :world)
	(send s0 :assoc b0)
	(send s0 :assoc b1)
	)
      (push b1 blist))
    (case
	supporter
      (:b
       (setq b2 (kxr-arm-supporter-b))
       (send c :locate #f(3 0 0))
       (send b2 :assoc c)
       (send b2 :move-named-coords "downh1" s1 "downh2" pi :z)
       (push b2 blist))
      (:a
       (setq b2 (kxr-bottom-spacer2))
       (send c :locate #f(6 0 0))
       (send b2 :assoc c)
       (send b2 :move-named-coords "bottomh1" s1 "downh0" pi :z)
       (push b2 blist))
      (:ab
       (setq b2 (kxr-bottom-spacer))
       (send c :locate #f(3 0 0))
       (send b2 :assoc c)
       (send b2 :move-named-coords "bottomh0" s1 "downh0")
       (push b2 blist)))
    (when backpack
      (setq b2 (kxr-bottom-spacer))
      (send b2 :move-named-coords "bottomh0" s1 "downh0")
      (setq b3 (kxr-body-plate))
      (send b3 :move-named-coords "r3up2" b2 "uph1" pi :z)      
      (setq b4 (kxr-back-pack))
      (send b4 :move-named-coords "bottomuh0" b3 "baseh0" pi :z)
      (push b4 blist)
      (push b3 blist)
      (push b2 blist))
    ;;
    (when sensor
      (setq sensor (kxr-sensor-joint-base sensor))
      (send sensor :move-named-coords "downh4" s1 "downh1")
      (send s1 :dissoc sensor)
      (push sensor blist)
      )
    (setq blist2 (reverse blist))
    (dolist (b (cdr blist2)) (send (car blist2) :assoc b))
    (dolist (al apply-list) (send* (car blist2) al))
    (setq l (kxr-bodyset-create blist2 c))
    (send l :put :upper-coord u)
    (send l :assoc (get l :upper-coord))
    l))

(defun kxr-wcross-servo-bodyset (&key (l/r :larm) sensor)
  (let* ((s0 (kxr-servo-s3301))
	 (s1 (kxr-servo-s3301))
	 (b0 (kxr-cross-servo-frame-a))
	 (b1 (kxr-wcross-servo-frame-a))
	 (b2 (kxr-wcross-servo-frame-b))
	 (u (get s1 :upper-coord))
	 l blist (c (make-cascoords)))
    (send s0 :rotate pi/2 :y)
    (send b0 :rotate pi :z)
    (send s0 :locate #f(-26 0 0) :world)
    (send b0 :assoc s0)
    (send s1 :rotate pi :x :world)
    (send b1 :locate #f(-3 0 6) :world)
    (send s1 :assoc b1)
    (send b2 :rotate pi :z :world)
    (send b2 :locate #f(21 0 0) :world)
    (send s1 :assoc b2)
    (send s1 :translate #f(12 0 -10.5) :world)
    (send s1 :assoc b0)
    (send b0 :assoc s0)
    (setq blist (list s1 b0 s0 b1 b2))
    (when sensor
      (setq sensor (kxr-sensor-joint-base sensor))
      (send sensor :move-named-coords "downh4" s1 "downh1")
      (send s1 :dissoc sensor)
      (push sensor blist)
      )
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (send (car blist) :locate #f(0 0 -10.5) :world)
    (setq l (kxr-bodyset-create blist c))
    (send l :put :upper-coord u)
    (send l :put :joint-coord u)
    (send l :assoc (get l :upper-coord))
    (send l :assoc (get l :joint-coord))
    l))

(defun kxr-wheel-servo-spacer-bodyset (&key base-a flip sensor servo-flip mag)
  (let* (b0
	 (b1 (if base-a (kxr-joint-frame-base-a-bodyset :sensor sensor)
		 (kxr-joint-frame-base-b-bodyset)))
	 (s0 (kxr-servo-s3301))
	 (c (make-cascoords)))
    (if servo-flip (send s0 :rotate pi :x :world))
    (send s0 :assoc c)
    (send s0 :rotate pi/2 :y :world)
    (cond
      (base-a
       (send s0 :locate #f(0 0 30) :world)
       (send b1 :assoc s0)
       (send b1 :rotate pi/2 :-z :world)
       (send b1 :rotate pi/2 :-y :world)
       (send b1 :locate #f(-9.5 0 -21) :world))
      (t
       (send s0 :rotate pi/2 :x :world)
       (send s0 :locate #f(0 -21 19.5) :world)
       (send b1 :assoc s0)
       (send b1 :rotate pi/2 :-z :world)
       (send b1 :rotate pi/2 :-y :world)
       (send b1 :locate #f(-9.5 0 21) :world)
       ))
    (cond
      (mag
       (setq b0 (kxr-joint-mag+7))
       (send b0 :rotate -pi/2 :y :world)
       (if base-a
	   (send b1 :translate #f(0 0 21) :world)
	   (send b1 :translate #f(0 0 -21) :world))
       (send b0 :assoc b1)
       )
      (t
       (setq b0 (kxr-bottom-spacer))
       (send b0 :rotate pi :z :world)
       (if base-a (send b0 :rotate pi :x :world))
       ))
    (setq bs (cons s0 (send b1 :bodies)))
    (dolist (b bs) (send b0 :assoc b))
    (if flip (send b0 :rotate pi :x :world))
    (kxr-bodyset-create (cons b0 bs) c)
    ))

(defun kxr-wheel-servo-bodyset (&key base-a flag servo-stand flip)
  (let (b0) 
    (cond
      (base-a
       (setq b0 (kxr-joint-base-a-servo-bodyset :side (null servo-stand) :flag flag)))
      (t (setq b0 (kxr-joint-base-c-servo-bodyset :flag flag :servo-stand servo-stand :flip flip))))
    (send b0 :rotate pi :x :world)
    (send b0 :translate #f(0 0 -3) :world)
    b0)
  )

(defun kxr-servo-joint-base-b-bodyset nil
  (let* ((bod (kxr-joint-frame-base-b-bodyset))
	 (s (kxr-servo-s3301)) (c (get bod :joint-coord)))
    (send s :rotate pi/2 :y)
    (send bod :assoc c)
    (send bod :rotate pi :z :world)
    (send bod :locate (float-vector 0 -10.5 (+ -9 -21)) :world)
    (send s :assoc bod)
    (send s :rotate pi/2 :z :world)
    (kxr-bodyset-create (cons s (send bod :bodies)) c)))

(defun kxr-servo-joint-base-b-side-bodyset (&optional (l/r :rarm))
  (let* ((bod (kxr-joint-frame-base-b-bodyset))
	 l
	 (s (kxr-servo-s3301))
	 (c (get s :joint-coord))
	 (u (get s :upper-coord)))
    (send s :assoc c)
    (if (kxr-right-limb? l/r) (send s :rotate pi/2 :-x) (send s :rotate pi/2 :x))
    (send s :locate (float-vector 0 0 (+ 10.5 9)) :world)
    (send bod :rotate pi/2 :z :world)
    (send bod :assoc s)
    (send bod :locate #f(0 0 3) :world)
    (if (kxr-right-limb? l/r) (send bod :rotate pi/2 :x :world)
	(send bod :rotate pi/2 :-x :world))
    (setq l (kxr-bodyset-create (append (send bod :bodies) (list s)) c))
    (send l :put :upper-coord u)
    (send l :assoc (get l :upper-coord))
    l))

#|
(defun test nil
  (setq ff (send b1 :faces))
  (setq fb (car ff))
  (setq bv (send fb :vertices))
  (setq v0 (car bv))
  (send *irtviewer* :viewer :viewsurface :line-width 4)
  (send *irtviewer* :viewer :viewsurface :color #f(1 0 0))
  (dolist (v (cdr bv)) (send *irtviewer* :viewer :draw-line v0 v) (setq v0 v))
  (send *irtviewer* :viewer :flush)
  )

(defun attach-test nil
  (setq b1 (kxr-servo-s3301))
  (setq b2 (kxr-joint-base))
  (setq b3 (kxr-joint-base))  
  (show-2d-arrange (list b1 b2 b3) :coords nil :base nil :des nil)
  (unix::sleep 1)
  ;;(do-until-key (x::window-main-one))
  (send b2 :attach '("downh1" "downh2") b1 '("uph4" "uph3"))
  (send *irtviewer* :draw-objects)
  (unix::sleep 1)
  (send b3 :attach '("downh1" "downh2") b1 '("downh3" "downh4"))
  (send *irtviewer* :draw-objects)
  (unix::sleep 1)
  ;;(do-until-key (x::window-main-one))
  (send b1 :locate #f(100 0 0))
  (send b1 :rotate pi/2 :y)
  (send *irtviewer* :draw-objects)
  (unix::sleep 1)  
  ;;(do-until-key (x::window-main-one))
  (send b2 :attach '("downh1" "downh2") b1 '("uph4" "uph3"))
  (send *irtviewer* :draw-objects)
  (unix::sleep 1)
  (send b3 :attach '("downh1" "downh2") b1 '("downh3" "downh4"))
  (send *irtviewer* :draw-objects)
  )
|#

(defun kxr-joint-frame-base-a-bodyset (&key sensor sensor-z-rotation upside-down (frame t))
  (let* ((b (kxr-sensor-joint-base sensor :flip (member :flip sensor)))
	 f1 f2
	 (c (make-cascoords))
	 h blist l)
    (unless upside-down (send b :rotate pi :x))
    (send b :bottom-to-z)
    (send b :assoc c)
    (send b :translate #f(0 0 -3) :world)
    (when frame
      (setq f1 (kxr-joint-frame-a))
      (setq f2 (kxr-joint-frame-a))
      (cond
	(upside-down
	 (send f1 :move-named-coords "uph3" b "sideh1" pi/2 :z)
	 (send f2 :move-named-coords "uph3" b "sideh3" pi/2 :-z))
	(t
	 (send f1 :move-named-coords "uph3" b "sidedh1" -pi/2 :z)
	 (send f2 :move-named-coords "uph3" b "sidedh3" pi/2 :z))
	)
      (when sensor-z-rotation
	(send b :dissoc f1) (send b :dissoc f2)
	(send b :rotate sensor-z-rotation :z :world))
      (setq blist (list f1 f2)))
    (kxr-bodyset-create (cons b blist) c)))

(defun kxr-joint-frame-base-b-bodyset (&key sensor sensor-z-rotation (frame t) z-rotation)
  (let* ((b (kxr-sensor-joint-base sensor :flip (member :flip sensor)))
	 f1 f2
	 (c (make-cascoords))
	 l)
    (send b :bottom-to-z)
    (send b :assoc c)
    (send b :translate #f(0 0 -3))
    (when frame
      (setq f1 (kxr-joint-frame-b-a))
      (setq f2 (kxr-joint-frame-b-b))
      (send f1 :move-named-coords "uph3" b "sideh3" pi/2 :-z)
      (send f2 :move-named-coords "uph3" b "sideh1" pi/2 :z)
      (when sensor-z-rotation
	(send b :dissoc f1) (send b :dissoc f2)
	(send b :rotate sensor-z-rotation :z :world)
	(send b :worldcoords))
      (when z-rotation
	(send b :dissoc f1) (send b :dissoc f2)
	(send b :rotate z-rotation :z :world)
	(send b :worldcoords))
      (setq blist (list f1 f2)))
    (kxr-bodyset-create (cons b blist) c)))

(defun kxr-gripper-servo-bodyset (&key (l/r :larm) (base-b t) inner sensor straight servo-flip horn magjoint)
  (let* ((b0 (kxr-sensor-joint-base magjoint :flip (member :flip sensor)))
	 (b (kxr-sensor-joint-base sensor :flip (member :flip sensor)))
	 (f1 (cond ((eq base-b :y+) (kxr-joint-frame-b-a))
		   ((eq base-b :y-) (kxr-joint-frame-b-b))
		   (base-b (kxr-joint-frame-b-a))
		   (t (kxr-joint-frame-a))))
	 (f2 (cond ((eq base-b :y+) (kxr-joint-frame-b-b))
		   ((eq base-b :y-) (kxr-joint-frame-b-a))
		   (base-b (kxr-joint-frame-b-b))
		   (t (kxr-joint-frame-a))))
	 (h (kxr-horn))
	 (s  (kxr-servo-s3301))
	 (c (make-cascoords))
	 blist l)
    (send s :assoc c)
    (send s  :move-named-coords "uph1" f1 "uph1")
    (cond
      (straight
       (cond
	 ((kxr-left-limb? l/r)
	  (send f1 :move-named-coords "uph3" b "sidedh3" pi/2 :z)
	  (send f2 :move-named-coords "uph3" b "sidedh1" pi/2 :-z)
	  (send s :translate #f(0 0 -6) :world)
	  (send s :rotate pi :y :world)
	  (send s :rotate (atan2 10.5 21.0) :-x :world)
	  )
	 (t (send f1 :move-named-coords "uph3" b "sidedh1" pi/2 :-z)
	    (send f2 :move-named-coords "uph3" b "sidedh3" pi/2 :z)
	    (send s :translate #f(0 0 -6) :world)
	    (send s :rotate pi :y :world)
	    (send s :rotate (atan2 10.5 21.0) :x :world))))
      (inner
       (cond
	 ((kxr-right-limb? l/r)
	  (send f1 :move-named-coords "uph3" b "sidedh3" pi/2 :z)
	  (send f2 :move-named-coords "uph3" b "sidedh1" pi/2 :-z))
	 (t (send f1 :move-named-coords "uph3" b "sidedh1" pi/2 :-z)
	    (send f2 :move-named-coords "uph3" b "sidedh3" pi/2 :z)))
       (send s :rotate pi :y :world)
       )
      (t
       (cond
	 ((kxr-right-limb? l/r)
	  (send f1 :move-named-coords "uph3" b "sidedh1" pi/2 :-z)
	  (send f2 :move-named-coords "uph3" b "sidedh3" pi/2 :z))
	 (t
	  (send f1 :move-named-coords "uph3" b "sidedh3" pi/2 :z)
	  (send f2 :move-named-coords "uph3" b "sidedh1" pi/2 :-z)))
       (send s :rotate pi :y :world)
       ))
    (send b :locate #f(0 0 -3) :world)
    (setq blist (list f1 f2 s))
    (when horn
      (push h blist)
      (send b :assoc h)
      (send b :translate #f(0 0 -3) :world)
      )
    (push b blist)
    (when magjoint
      (send b0 :assoc b)
      (send b0 :translate (v- (send (get b0 :joint-coord) :worldpos)) :world)
      (push b0 blist))
    (setq l (kxr-bodyset-create blist c))
    (setf (get l :joint-coord) c)
    (send l :assoc c)
    l))

(defun kxr-arm-passive-wheel-bodyset nil
  (let* ((b (kxr-arm-base-bodyset 38))
	 (w (kxr-wheel)))
    (send w :rotate pi/2 :-y)
    (send w :locate #f(0 0 38) :world)
    (kxr-bodyset-create (append (send b :bodies) (list w)))))

(defun kxr-passive-wheel-bodyset nil
  (let* ((b (kxr-dummy-half-servo))
	 (w (kxr-wheel)))
    (send w :locate #f(0 0 22) :world)
    (send b :assoc w)
    (kxr-bodyset-create (list b w))))

(defun kxr-passive-wheel-base-bodyset nil
  (let ((b (kxr-bodyset-create (list (kxr-dummy-half-servo))))
	(c (make-cascoords)))
    (send c :locate (float-vector 0 0 16))
    (setf (get b :joint-coord) c)
    (send b :assoc c)
    b))
(defun kxr-finger-bodyset (&key sensor gripper-axis with-wheel sensor-z-rotation
				attachment)
  (let* ((a (kxr-finger-a))
	 (b (kxr-finger-b)) (c (make-cascoords)) w blist s
	 (p (kxr-finger-palm-bodyset :attachment attachment
				     :sensor sensor :sensor-z-rotation sensor-z-rotation)))
    (send a :locate #f(15.5 0 0))
    (send b :locate #f(-15.5 0 0))
    (send p :locate #f(0 30 10))
    (when with-wheel
      (setq w (kxr-passive-wheel-base-bodyset))
      (setq blist (send w :bodies))
      (send w :rotate pi/2 :-z :world)
      (send w :locate #f(0 45 13) :world)
      )
    (setq s (kxr-bodyset-create (append (send p :bodies) (list a b) blist)))
    (if with-wheel (setq c (get w :joint-coord))
	(if sensor
	    (send c :locate (float-vector 0 45 2))
	    (send c :locate (float-vector 0 45 7))))
    (setf (get s :joint-coord) c)
    (send s :assoc c)
    (send s :rotate (- pi/2) :x)
    (if (memq gripper-axis '(:p :-p :y :-y))
	(send s :rotate (- pi/2) :z :world))
    s)
  )

(defun kxr-servo-half-arm-supporter-a-bodyset (&key bottom roll bridge neck-front)
  (let* ((b (kxr-servo-s3301))
	 jf0 jf1
	 (b1b (kxr-joint-base))
	 (b1f (kxr-joint-base))
	 (f1 (kxr-arm-supporter-a))
	 (jc (get b :upper-coord))
	 blist bs b0 l (bc (make-cascoords)))
    ;;(send f1 :assoc jc)
    (when bottom
      (setq b0 (kxr-bottom-spacer2))
      (setq l (kxr-arm-base-bodyset 38))
      (when roll
	(setq l (kxr-arm-base-bodyset 26))
	(send l :rotate pi/2 :z :world)
	(send l :translate #f(0 -12 -10.5))
	)
      (setq bc (get l :joint-coord))
      (send l :rotate pi/2 :z :world)
      (send l :rotate pi/2 :y :world)
      (send l :translate #f(6 0 0) :world)
      (send b0 :assoc l)
      (send b0 :rotate pi :x :world)
      (send b0 :rotate pi/2 :y :world)
      (send b0 :locate #f(0 0 -13) :world)
      (send b :assoc b0))
    (send b :rotate pi/2 :-x)
    (send b :locate #f(-7.25 0 0) :world)
    (send f1 :rotate pi/2 :z)
    (send f1 :rotate pi/2 :-y :world)
    (send f1 :locate #f(-7.25 13.5 0) :world)
    (when bridge
      (setq jf0 (kxr-joint-frame-a))
      (send jf0 :move-coords (send b1f :find-named-coords "sideh4") (send jf0 :find-named-coords "uph3"))
      (send jf0 :rotate pi :z)
      (send b1f :assoc jf0)

      (setq jf1 (kxr-joint-frame-a))
      (send jf1 :move-coords (send b1b :find-named-coords "sideh4") (send jf1 :find-named-coords "uph3"))
      (send jf1 :rotate pi :z)
      (send b1b :assoc jf1)
      (setq bs (list jf0 jf1))
      )
    (send b1b :rotate pi/2 :-y :world)
    (send b1b :locate #f(-19.5 0 0) :world)
    (send b1f :rotate pi/2 :y :world)
    (send b1f :locate #f(19.5 0 0) :world)
    (send b :assoc f1)
    (send b :assoc b1b)
    (send b :assoc b1f)
    (send b :rotate pi/2 :x :world)
    (if bottom
	(setq blist (append (list b b0 f1 b1b b1f) bs (send l :bodies)))
	(setq blist (append (list b f1 b1b b1f) bs)))
    (setq l (kxr-bodyset-create blist))
    (send l :assoc jc)
    (send l :assoc bc)
    (when neck-front
      (send l :rotate pi :z :world)
      (setq l (kxr-bodyset-create (send l :bodies)))
      )
    (send l :assoc jc)
    (send l :assoc bc)
    (setf (get l :joint-coord) jc)
    (setf (get l :base-coord) bc)
    l))

(defun kxr-chest-center-bodyset (&optional roll)
  (let* ((b (kxr-servo-s3301))
	 (b1b (kxr-joint-base))
	 (b1f (kxr-joint-base))
	 (f1 (kxr-arm-supporter-a))
	 (jc (get b :upper-coord))
	 b0 l bc)
    (setq b0 (kxr-bottom-spacer2))
    (setq l (kxr-arm-base-bodyset 38))
    (when roll
      (setq l (kxr-arm-base-bodyset 26))
      (send l :rotate pi/2 :z :world)
      (send l :translate #f(0 -12 -10.5))
      )
    (setq bc (get l :joint-coord))
    (send l :rotate pi/2 :z :world)
    (send l :rotate pi/2 :y :world)
    (send l :translate #f(6 0 0) :world)
    (send b0 :assoc l)
    (send b0 :rotate pi :x :world)
    (send b0 :rotate pi/2 :y :world)
    (send b0 :locate #f(0 0 -13) :world)
    (send b :assoc b0)
    (send b :rotate pi/2 :-x)
    (send b :locate #f(-7.25 0 0) :world)
    (send f1 :rotate pi/2 :z)
    (send f1 :rotate pi/2 :-y :world)
    (send f1 :locate #f(-7.25 13.5 0) :world)
    (send b1b :rotate pi/2 :-y :world)
    (send b1b :locate #f(-19.5 0 0) :world)
    (send b1f :rotate pi/2 :y :world)
    (send b1f :locate #f(19.5 0 0) :world)
    (send b :assoc f1)
    (send b :assoc b1b)
    (send b :assoc b1f)
    (send b :rotate pi/2 :x :world)
    (setq l (kxr-bodyset-create (append (list b b0 f1 b1b b1f) (send l :bodies))))
    (setf (get l :joint-coord) jc)
    (setf (get l :base-coord) bc)
    l))

(defun kxr-servo-double-joint-frame-bodyset (&optional frame-a)
  (let* ((b (kxr-servo-s3301))
	 (f1 (if frame-a (kxr-joint-frame-base-a-bodyset)
		 (kxr-joint-frame-base-b-bodyset)))
	 (f2 (if frame-a (kxr-joint-frame-base-a-bodyset)
		 (kxr-joint-frame-base-b-bodyset)))
	 l)
    (cond
      (frame-a
       (send f1 :rotate -pi/2 :y :world)
       (send f1 :rotate pi/2 :z :world)
       (send f1 :locate #f(10.5 19.5 0) :world)
       (send f2 :rotate -pi/2 :y :world)
       (send f2 :rotate -pi/2 :z :world)
       (send f2 :locate #f(10.5 -19.5 0) :world))
      (t
       (send f1 :rotate -pi/2 :z :world)
       (send f1 :rotate pi/2 :x :world)
       (send f1 :locate #f(21 19.5 0) :world)
       (send f2 :rotate -pi/2 :z :world)
       (send f2 :rotate -pi/2 :x :world)
       (send f2 :locate #f(21 -19.5 0) :world))
      )
    (send b :assoc f1)
    (send b :assoc f2)
    (send b :rotate pi/2 :y :world)
    (send b :rotate pi/2 :z :world)
    (send b :locate #f(0 0 10.5) :world)
    (setq l (kxr-bodyset-create (cons b (append (send f1 :bodies) (send f2 :bodies)))))
    (setf (get l :joint-coord) (get b :upper-coord))
    (send l :assoc (get l :joint-coord))
    l))

(defun kxr-servo-double-arm-supporter-a-bodyset (&key front (servo t))
  (let* ((b (kxr-servo-s3301))
	 (b1b (kxr-joint-base))
	 (b1f (kxr-joint-base))
	 (f1 (kxr-arm-supporter-a))
	 (f2 (kxr-arm-supporter-a))
	 l)
    (send b :rotate pi/2 :-x)
    (send b :locate #f(-7.25 0 0) :world)
    (send f1 :rotate pi/2 :z)
    (send f1 :rotate pi/2 :-y :world)
    (send f1 :locate #f(-7.25 13.5 0) :world)
    (send b1b :rotate pi/2 :-y :world)
    (send b1b :locate #f(-19.5 0 0) :world)
    (send f2 :rotate pi/2 :-z)
    (send f2 :rotate pi/2 :-y :world)
    (send f2 :locate #f(-7.25 -13.5 0) :world)
    (send b1f :rotate pi/2 :y :world)
    (send b1f :locate #f(19.5 0 0) :world)
    (send b :assoc f1)
    (send b :assoc b1b)
    (send b :assoc f2)
    (send b :assoc b1f)
    (if front (send b :rotate pi :y :world))
    (if servo
	(setq l (kxr-bodyset-create (list b f1 f2 b1b b1f)))
	(setq l (kxr-bodyset-create (list f1 b1b b1f))))
    (setf (get l :joint-coord) (get b :upper-coord))
    (send l :assoc (get l :joint-coord))
    l))

(defun kxr-battery-leg-plate-bodyset (&key mag-joint mag-plate)
  (let* ((b0 (if mag-plate (kxr-battery-mag-plate) (kxr-battery-leg-plate)))
	 l blist m (c (get b0 :joint-coord)))
    (send b0 :rotate pi :x :world)
    (when mag-joint
      (setq m (kxr-sensor-joint-base mag-joint))
      (send m :locate #f(23.5 0 8) :world)
      (send b0 :assoc m)
      (push m blist)
      (setq m (kxr-sensor-joint-base mag-joint))
      (send m :locate #f(-23.5 0 8) :world)
      (send b0 :assoc m)
      (push m blist)
      )
    (push b0 blist)
    (setq l (kxr-bodyset-create blist c))
    (send l :assoc c)
    l))

(defun kxr-battery-torso-bodyset (&key wide half back-pack-rotate ring neck lidar mag-joint
				       (half-ring half) (battery-box t) neck-front
				       (top-plate t) (leg-plate (not top-plate))
				       (backpack (kxr-back-pack)) magmodule)
  (let* ((b0 (kxr-battery-box))
	 (b1f (kxr-body-plate))
	 (b1b (kxr-body-plate))
	 b1 b2 ld b7
	 (b3 (kxr-body-plate))
	 (b4 (kxr-body-plate))
	 (b5 (kxr-lock-ring))
	 (b6 (kxr-lock-ring-cap))
	 (s1 (kxr-body-plate-spacer))
	 (s2 (kxr-body-plate-spacer))
	 (c (get b3 :joint-coord))
	 to bp hb h l bc blist)
    (setf (get b1f :origin) (make-cascoords))
    (send (get b1f :origin) :translate #f(0 0 3) :world)
    (send b1f :assoc (get b1f :origin))
    (setf (get b4 :origin) (make-cascoords))
    (send (get b4 :origin) :translate #f(0 0 3) :world)
    (send b4 :assoc (get b4 :origin))
    (when lidar
      (setq ld (kxr-lidar))
      (setq b7 (kxr-bottom-spacer))
      (send b7 :rotate -pi/2 :y :world)
      (send b7 :rotate pi :z :world)
      (send ld :locate #f(21 0 6) :world)
      (send b7 :assoc ld)
      (if wide
	  (send b7 :locate #f(33 0 -22.5) :world)
	(send b7 :locate #f(33 0 -16) :world))
      (push ld blist)
      (push b7 blist)
      )
    (when
	backpack
      (if (derivedp backpack body) (setq b2 backpack)
	(setq b2 (kxr-back-pack)))
      (setq bc (get b2 :joint-coord))
      (setq bp bc)
      (send bp :translate #f(15 0 0) :world)
      (when neck
	(setq hb (kxr-servo-bottom-supporter-bodyset :align t))
	(send hb :rotate pi :x :world)
	(send hb :locate (send (get b2 :joint-coord) :worldpos) :world)
	(send b2 :assoc hb)
	(setq bc (get hb :joint-coord))
	(send b2 :assoc bc)
	(setq blist (append (send hb :bodies) blist))))

    (send b0 :rotate pi/2 :z)
    (when
	wide
      (send b0 :rotate pi/2 :y :world)
      (send b0 :worldcoords))
    (when leg-plate
      (cond
       (magmodule
	(setq b1 (kxr-twinmagbase))
	(send b1 :translate #f(0 0 9.5) :world)
	(setq b1 (kxr-bodyset-create (list b1))))
       (t (setq b1 (kxr-battery-leg-plate-bodyset :mag-joint mag-joint))))
      (if wide
	  (send b1 :locate #f(0 0 22.5) :world)
	(send b1 :locate #f(0 0 16) :world))
      (send b1 :rotate pi/2 :z :world)
      (send b0 :assoc b1)
      (setq blist (append (send b1 :bodies) blist))
      )
    (setq h (send b0 :z-height #f(0 0 0)))
    (send b1f :locate (float-vector 0 0 h) :world)
    (send b0 :assoc b1f)
    (send b1b :rotate pi :x :world)
    (send b1b :locate (float-vector 0 0 (- h)) :world)
    (send b0 :assoc b1b)
    (if (and back-pack-rotate backpack) (send b2 :rotate pi/2 :z))
    (cond
      (backpack
       (send b2 :locate (float-vector 0 0 (+ 3 h)) :world)
       (send b0 :assoc b2)
       (setq blist (append (list b0 b1f b1b b2) blist)))
      (top-plate (setq blist (append (list b0 b1f b1b) blist)))
      (t (setq blist (append (list b0 b1b) blist))))
    (when (and (null backpack) neck) ;; center half body
      (cond
       (top-plate
	(setq to (kxr-l2-body-bodyset :backpack nil :torso t :neck-front neck-front))
	(send to :locate (send (get b1f :origin) :worldpos) :world)
	(when back-pack-rotate
	  (send to :rotate pi/2 :z :world))
	(setq blist (append blist (send to :bodies))))
       (t
	(setq to (kxr-l2-body-bodyset :backpack nil :torso t :neck-front neck-front))	
	(send to :translate #f(0 0 -16) :world)	
	(setq blist (append (send to :bodies) (cdr blist)))
	)))
    (when
	ring
      (send b5 :rotate pi :y)
      (send b5 :locate (float-vector 0 0 (- -2 h)) :world)
      (send b0 :assoc b5)
      (send b6 :rotate pi :y)
      (send b6 :locate (float-vector 0 0 (- -8 h)) :world)
      (send b0 :assoc b6)
      (setq blist (append blist (list b5 b6)))
      )
    (cond
     (half
      (when half-ring
	(send s1 :locate (float-vector 0 0 h) :world)
	(send s2 :rotate pi :x :world)
	(send s2 :locate (float-vector 0 0 (- h)) :world)
	(send b0 :assoc s1) (send b0 :assoc s2)
	(setq blist (append blist (list s1 s2)))))
     (top-plate
      (send b3 :rotate pi :z :world)
      (send b3 :locate (float-vector 0 0 h) :world)
      (send b0 :assoc b3)
      (send b4 :rotate pi :z :world)
      (send b4 :rotate pi :x :world)
      (send b4 :locate (float-vector 0 0 (- h)) :world)
      (send b0 :assoc b4)
      (setq blist (append blist (list b3 b4))))
     (t
      (send b3 :rotate pi :z :world)
      (send b3 :locate (float-vector 0 0 h) :world)
      (send b0 :assoc b3)
      (send b4 :rotate pi :z :world)
      (send b4 :rotate pi :x :world)
      (send b4 :locate (float-vector 0 0 (- h)) :world)
      (send b0 :assoc b4)
      (setq blist (append blist (list b4))))
     )
;;    (dolist (b (cdr blist)) (send (car blist) :assoc b))
;;    (send (car blist) :translate (float-vector 0 0 h) :world)

    (setq l (kxr-bodyset-create blist))
    (when backpack
      (setf (get l :back-panel) bp)
      (setf (get l :back-pack-top) bc))
    (setf (get l :neck) (get b3 :joint-coord))
    (when to
      (setf (get l :torso) (get to :neck)))
    (setf (get l :joint-coord) (get b1f :origin))
    (setf (get l :front-neck) (get b3 :joint-coord))
    (setf (get l :back-neck) (get b1f :joint-coord))
    (dolist (p (list :torso :joint-coord :back-panel :back-pack-top
		     :neck :front-neck :back-neck))
      (when (get l p) (send l :assoc (get l p))))
    l))

(defun kxr-double-jointbase-bodyset ()
  (let* ((j1 (kxr-joint-base))
	 (j2 (kxr-joint-base)))
    (send j2 :move-coords (send j1 :find-named-coords "uph1") (send j2 :find-named-coords "downh1"))
    (send j2 :rotate pi :x :world)
    (send j1 :assoc j2)
    (send j1 :locate #f(0 0 3) :world)
    (kxr-bodyset-create (list j1 j2))))

(defun kxr-mamoru-crotch-plate-bodyset ()
  (let* ((bp (kxr-body-plate))
	 (a1 (kxr-arm-supporter-a))
	 (a2 (kxr-arm-supporter-a))
	 (j1 (kxr-joint-base))
	 (j2 (kxr-joint-base))
	 (s0 (kxr-joint-base-a-servo-bodyset :side t))
	 (b1 (kxr-servo-bottom-supporter-bodyset :align t))
	 (b2 (kxr-servo-bottom-supporter-bodyset :align t))
	 (c0 (midcoords 0.5 (send bp :find-named-coords "l3up1") (send bp :find-named-coords "r3up1")))
	 (c1 (midcoords 0.5 (send bp :find-named-coords "r4up1") (send bp :find-named-coords "r5up2")))
	 (c2 (midcoords 0.5 (send bp :find-named-coords "l4up1") (send bp :find-named-coords "l5up2")))
	 l)
    (send s0 :move-coords c0 (send s0 :worldcoords))
    (send s0 :translate #f(0 0 -6) :world)

    (send a1 :move-named-coords "centerh2" j1 "sideh2" pi/2 :z)
    (send j1 :move-coords c1 (send j1 :worldcoords))
    (send j1 :translate  #f(0 0 -6) :world)
    (send b1 :move-coords c1 (send b1 :worldcoords))
    (send b1 :rotate pi/2 :-z :world)

    (send a2 :move-named-coords "centerh2" j2 "sideh4" pi/2 :-z)
    (send j2 :move-coords c2 (send j2 :worldcoords))
    (send j2 :translate  #f(0 0 -6) :world)
    (send b2 :move-coords c2 (send b2 :worldcoords))
    (send b2 :rotate pi/2 :z :world)
    (setq l (kxr-bodyset-create (append (list bp a1 a2 j1 j2) (send b1 :bodies) (send b2 :bodies) (send s0 :bodies))))
    (setf (get l :joint-coord0) (get s0 :joint-coord))
    (setf (get l :joint-coord1) (get b1 :joint-coord))
    (setf (get l :joint-coord2) (get b2 :joint-coord))
    (dolist (n (list :joint-coord0 :joint-coord1 :joint-coord2))
      (send l :assoc (get l n)))
    l))

(defun kxr-mamoru-crotch-plate-bodyset-new ()
  (let* ((bp (kxr-body-plate))
	 (a1 (kxr-arm-supporter-a))
	 (a2 (kxr-arm-supporter-a))
	 (j1 (kxr-joint-base))
	 (j2 (kxr-joint-base))
         ;(j3 (kxr-arm-base-bodyset))
	 (s0 (kxr-joint-base-c-servo-bodyset :flag t))
         (s1 (kxr-servo-s3301))
         ;(s2 (kxr-joint-base-a-servo-bodyset))
	 (b1 (kxr-servo-bottom-supporter-bodyset :align t))
	 (b2 (kxr-servo-bottom-supporter-bodyset :align t))
	 (c0 (midcoords 0.5 (send bp :find-named-coords "l3up1") (send bp :find-named-coords "r3up1")))
	 (c1 (midcoords 0.5 (send bp :find-named-coords "r4up1") (send bp :find-named-coords "r5up2")))
	 (c2 (midcoords 0.5 (send bp :find-named-coords "l4up1") (send bp :find-named-coords "l5up2")))
	 l)
    (send s0 :move-coords c0 (send s0 :worldcoords))
    (send s0 :translate #f(0 0 -6) :world)
    (send s0 :rotate pi/2 :z :world)

    (send a1 :move-named-coords "centerh2" j1 "sideh3")
    (send j1 :move-coords c1 (send j1 :worldcoords))
    (send j1 :translate  #f(0 0 -6) :world)
    (send s1 :move-coords c1 (send s1 :worldcoords))
    (send s1 :rotate pi/2 :y :world)
    (send s1 :translate  #f(0 0 -33) :world)
    ;(send s2 :move-coords c1 (send s2 :worldcoords))
    ;(send s2 :rotate pi/2 :y :world)
    ;(send s2 :translate  #f(-20 0 -33) :world)
    ;(send j3 :move-coords s2 (send j3 :worldcoords))
    ;(send j3 :rotate pi/2 :x :world)
    ;(send j3 :rotate pi :y :world)
    ;(send j3 :translate  #f(-50 0 0) :world)
    (send b1 :move-coords c1 (send b1 :worldcoords))
    (send b1 :rotate pi/2 :-z :world)

    (send a2 :move-named-coords "centerh2" j2 "sideh4" pi/2 :-z)
    (send j2 :move-coords c2 (send j2 :worldcoords))
    (send j2 :translate  #f(0 0 -6) :world)
    (send b2 :move-coords c2 (send b2 :worldcoords))
    (send b2 :rotate pi/2 :z :world)
    (setq l (kxr-bodyset-create (append (list bp a1 a2 j1 j2)
                                        ;(send j3 :bodies)
                                        (send b1 :bodies)
                                        (send b2 :bodies)
                                        (send s0 :bodies)
                                        (send s1 :bodies)
                                        ;(send s2 :bodies)
                                        )))
    (setf (get l :joint-coord0) (get s0 :joint-coord))
    (setf (get l :joint-coord1) (get b1 :joint-coord))
    (setf (get l :joint-coord2) (get b2 :joint-coord))
    (setf (get l :joint-coord3) (get s1 :upper-coord))
    ;(setf (get l :joint-coord4) (get s2 :joint-coord))
    (dolist (n (list :joint-coord0 :joint-coord1 :joint-coord2 :joint-coord3))
      (send l :assoc (get l n)))
    l))

(defun kxr-mamoru-crotch-plate-bodyset-new2 ()
  (let* ((bp (kxr-body-plate))
	 (a1 (kxr-arm-supporter-a))
	 (a2 (kxr-arm-supporter-a))
	 (j1 (kxr-joint-base))
	 (j2 (kxr-joint-base))
         ;(j3 (kxr-arm-base-bodyset))
	 (s0 (kxr-joint-base-c-servo-bodyset :flag t))
         (s1 (kxr-servo-s3301))
         ;(s2 (kxr-joint-base-a-servo-bodyset))
	 (b1 (kxr-servo-bottom-supporter-bodyset :align t))
	 (b2 (kxr-servo-bottom-supporter-bodyset :align t))
	 (c0 (midcoords 0.5 (send bp :find-named-coords "l3up1") (send bp :find-named-coords "r3up1")))
	 (c1 (midcoords 0.5 (send bp :find-named-coords "r4up1") (send bp :find-named-coords "r5up2")))
	 (c2 (midcoords 0.5 (send bp :find-named-coords "l4up1") (send bp :find-named-coords "l5up2")))
	 l)
    (send s0 :move-coords c0 (send s0 :worldcoords))
    (send s0 :translate #f(0 0 -6) :world)
    (send s0 :rotate pi/2 :-z :world)

    (send a1 :move-named-coords "centerh2" j1 "sideh2" pi/2 :z)
    (send j1 :move-coords c1 (send j1 :worldcoords))
    (send j1 :translate  #f(0 0 -6) :world)
    (send b1 :move-coords c1 (send b1 :worldcoords))
    (send b1 :rotate pi/2 :-z :world)

    (send a2 :move-named-coords "centerh2" j2 "sideh3")
    (send j2 :move-coords c2 (send j2 :worldcoords))
    (send j2 :translate  #f(0 0 -6) :world)
    (send s1 :move-coords c2 (send s1 :worldcoords))
    (send s1 :rotate pi/2 :y :world)
    (send s1 :translate  #f(0 0 -33) :world)
    ;(send s2 :move-coords c2 (send s2 :worldcoords))
    ;(send s2 :rotate pi/2 :y :world)
    ;(send s2 :translate  #f(-20 0 -33) :world)
    ;(send j3 :move-coords s2 (send j3 :worldcoords))
    ;(send j3 :rotate pi/2 :x :world)
    ;(send j3 :rotate pi :y :world)
    ;(send j3 :translate  #f(-50 0 0) :world)

    (send b2 :move-coords c2 (send b2 :worldcoords))
    (send b2 :rotate pi/2 :z :world)
    (setq l (kxr-bodyset-create (append (list bp a1 a2 j1 j2)
                                        ;(send j3 :bodies)
                                        (send b1 :bodies)
                                        (send b2 :bodies)
                                        (send s0 :bodies)
                                        (send s1 :bodies)
                                        ;(send s2 :bodies)
                                        )))
    (setf (get l :joint-coord0) (get s0 :joint-coord))
    (setf (get l :joint-coord1) (get b1 :joint-coord))
    (setf (get l :joint-coord2) (get b2 :joint-coord))
    (setf (get l :joint-coord3) (get s1 :upper-coord))
    ;(setf (get l :joint-coord4) (get s2 :joint-coord))
    (dolist (n (list :joint-coord0 :joint-coord1 :joint-coord2 :joint-coord3))
      (send l :assoc (get l n)))
    l))

(defun kxr-mamoru-crotch-plate-bodyset-new-2022 ()
  (let* ((bp (kxr-body-plate))
     (a1 (kxr-arm-supporter-a))
     (a2 (kxr-arm-supporter-a))
     (j1 (kxr-joint-base))
     (j2 (kxr-joint-base))
     (s0 (kxr-joint-base-c-servo-bodyset :flag t))
         (s1 (kxr-servo-s3301))
     (b1 (kxr-servo-bottom-supporter-bodyset :align t))
     (b2 (kxr-servo-bottom-supporter-bodyset :align t))
     (c0 (midcoords 0.5 (send bp :find-named-coords "l3up1") (send bp :find-named-coords "r3up1")))
     (c1 (midcoords 0.5 (send bp :find-named-coords "r4up1") (send bp :find-named-coords "r5up2")))
     (c2 (midcoords 0.5 (send bp :find-named-coords "l4up1") (send bp :find-named-coords "l5up2")))
     l)
    (send s0 :move-coords c0 (send s0 :worldcoords))
    (send s0 :translate #f(0 0 -6) :world)
    (send s0 :rotate pi/2 :z :world)

    (send a1 :move-named-coords "centerh2" j1 "sideh3")
    (send j1 :move-coords c1 (send j1 :worldcoords))
    (send j1 :translate  #f(0 0 -6) :world)
    (send s1 :move-coords c1 (send s1 :worldcoords))
    (send s1 :rotate pi/2 :y :world)
    (send s1 :translate  #f(0 0 -33) :world)
    (send b1 :move-coords c1 (send b1 :worldcoords))
    (send b1 :rotate pi :-z :world)

    (send a2 :move-named-coords "centerh2" j2 "sideh4" pi/2 :-z)
    (send j2 :move-coords c2 (send j2 :worldcoords))
    (send j2 :translate  #f(0 0 -6) :world)
    (send b2 :move-coords c2 (send b2 :worldcoords))
    (send b2 :rotate pi :z :world)
    (setq l (kxr-bodyset-create (append (list bp a1 a2 j1 j2)
                                        (send b1 :bodies)
                                        (send b2 :bodies)
                                        (send s0 :bodies)
                                        (send s1 :bodies)
                                        )))
    (setf (get l :joint-coord0) (get s0 :joint-coord))
    (setf (get l :joint-coord1) (get b1 :joint-coord))
    (setf (get l :joint-coord2) (get b2 :joint-coord))
    (setf (get l :joint-coord3) (get s1 :upper-coord))
    (dolist (n (list :joint-coord0 :joint-coord1 :joint-coord2 :joint-coord3))
      (send l :assoc (get l n)))
    l))

(defun kxr-mamoru-crotch-plate-bodyset-new2-2022 ()
  (let* ((bp (kxr-body-plate))
     (a1 (kxr-arm-supporter-a))
     (a2 (kxr-arm-supporter-a))
     (j1 (kxr-joint-base))
     (j2 (kxr-joint-base))
     (s0 (kxr-joint-base-c-servo-bodyset :flag t))
         (s1 (kxr-servo-s3301))
     (b1 (kxr-servo-bottom-supporter-bodyset :align t))
     (b2 (kxr-servo-bottom-supporter-bodyset :align t))
     (c0 (midcoords 0.5 (send bp :find-named-coords "l3up1") (send bp :find-named-coords "r3up1")))
     (c1 (midcoords 0.5 (send bp :find-named-coords "r4up1") (send bp :find-named-coords "r5up2")))
     (c2 (midcoords 0.5 (send bp :find-named-coords "l4up1") (send bp :find-named-coords "l5up2")))
     l)
    (send s0 :move-coords c0 (send s0 :worldcoords))
    (send s0 :translate #f(0 0 -6) :world)
    (send s0 :rotate pi/2 :-z :world)

    (send a1 :move-named-coords "centerh2" j1 "sideh2" pi/2 :z)
    (send j1 :move-coords c1 (send j1 :worldcoords))
    (send j1 :translate  #f(0 0 -6) :world)
    (send b1 :move-coords c1 (send b1 :worldcoords))
    (send b1 :rotate pi :-z :world)

    (send a2 :move-named-coords "centerh2" j2 "sideh3")
    (send j2 :move-coords c2 (send j2 :worldcoords))
    (send j2 :translate  #f(0 0 -6) :world)
    (send s1 :move-coords c2 (send s1 :worldcoords))
    (send s1 :rotate pi/2 :y :world)
    (send s1 :translate  #f(0 0 -33) :world)

    (send b2 :move-coords c2 (send b2 :worldcoords))
    (send b2 :rotate pi :z :world)
    (setq l (kxr-bodyset-create (append (list bp a1 a2 j1 j2)
                                        (send b1 :bodies)
                                        (send b2 :bodies)
                                        (send s0 :bodies)
                                        (send s1 :bodies)
                                        )))
    (setf (get l :joint-coord0) (get s0 :joint-coord))
    (setf (get l :joint-coord1) (get b1 :joint-coord))
    (setf (get l :joint-coord2) (get b2 :joint-coord))
    (setf (get l :joint-coord3) (get s1 :upper-coord))
    (dolist (n (list :joint-coord0 :joint-coord1 :joint-coord2 :joint-coord3))
      (send l :assoc (get l n)))
    l))

(defun kxr-mamoru-torso-bodyset ()
  (let* ((b0 (kxr-battery-box))
	 (n (kxr-servo-half-arm-supporter-a-bodyset :bridge t))
	 (jf0 (kxr-joint-frame-a))
	 (jf1 (kxr-joint-frame-a))
	 (m5 (M5stackfire-bodyset))
	 (b1 (kxr-body-plate))
	 (b2 (kxr-mamoru-crotch-plate-bodyset))
	 (bp (kxr-back-pack))
	 (b3 (kxr-body-plate))
	 (b4 (kxr-mamoru-crotch-plate-bodyset))
	 (b5 (kxr-lock-ring))
	 (b6 (kxr-lock-ring))
	 (s1 (kxr-body-plate-spacer))
	 (s2 (kxr-body-plate-spacer))
	 (j1 (kxr-joint-base))
	 (j12 (kxr-joint-base))
	 (j13 (kxr-joint-base))
	 (j14 (kxr-joint-base))
	 (j2 (kxr-joint-base))
	 (j22 (kxr-joint-base))
	 (j23 (kxr-joint-base))
	 (j24 (kxr-joint-base))
	 (c (get b3 :joint-coord))
	 bpc hb h bs l (bc (get bp :joint-coord)))
    (setq bpc bc)
    (send bpc :translate #f(15 0 0) :world)
    (send b0 :rotate pi/2 :z)
    (send b0 :rotate pi/2 :y :world)
    (send b0 :rotate pi/2 :z :world)
    (send b0 :worldcoords)
    (setq h (send b0 :z-height #f(0 0 0)))
    (send j13 :move-named-coords "uph1" b1 "r4up2")
    (send j13 :translate #f(0 0 -3) :world)
    (send j14 :move-named-coords "uph1" b1 "l5up3")
    (send j14 :translate #f(0 0 -3) :world)
    
    (send j12 :move-named-coords "downh1" j1 "uph1")
    (send j12 :rotate pi :x :world)
    (send j1 :move-named-coords "downh1" b1 "l3up1")
    (send b1 :locate (float-vector 0 0 h) :world)
    (send b0 :assoc b1)

    (send j23 :move-named-coords "uph1" b3 "r4up2")
    (send j23 :translate #f(0 0 -3) :world)
    (send j24 :move-named-coords "uph1" b3 "l5up3")
    (send j24 :translate #f(0 0 -3) :world)

    (send j22 :move-named-coords "downh1" j2 "uph1")
    (send j22 :rotate pi :x :world)
    (send j2 :move-named-coords "downh1" b3 "l3up2")

    (send b2 :rotate pi :x :world)
    (send b2 :rotate pi/2 :z :world)
    (send b2 :locate (float-vector 0 0 (- h)) :world)
    (send b0 :assoc b2)
    (send bp :rotate pi/2 :y :world)
    (send bp :rotate pi :z :world)
    (send bp :locate (float-vector -51 0 -34) :world)
    (send b0 :assoc bp)

    (send n :locate #f(5 0 52) :world)
    (send b0 :assoc n)
    (send m5 :locate #f(66 0 -12) :world)
    (setq bs (append (send m5 :bodies) (send n :bodies)))
    (setq bs (append (list b0 b1 j1 j12 j13 j14 j2 j22 j23 j24 bp)
		     (send b2 :bodies) bs))
    (send b5 :rotate pi :y)
    (send b5 :locate (float-vector 0 0 (- -2 h)) :world)
    (send b0 :assoc b5)
    (send b6 :locate (float-vector 0 0 (+ 2 h)) :world)
    (send b0 :assoc b6)
    (setq bs (append bs (list b5 b6)))
    (send b3 :rotate pi :z :world)
    (send b3 :locate (float-vector 0 0 h) :world)
    (send b0 :assoc b3)

    (send b4 :rotate pi/2 :z :world)
    (send b4 :rotate pi :x :world)
    (send b4 :locate (float-vector 0 0 (- h)) :world)
    (send b0 :assoc b4)
    (setq bs (append bs (list b3) (send b4 :bodies)))
    (setq l (kxr-bodyset-create bs))
    (setf (get l :back-panel) bpc)
    (setf (get l :back-pack-top) bc)
    (setf (get l :neck) (get n :joint-coord))
    (setf (get l :lmarm) (get b4 :joint-coord0))
    (setf (get l :rmarm) (get b2 :joint-coord0))
    (setf (get l :larm) (get b4 :joint-coord2))
    (setf (get l :rarm) (get b2 :joint-coord1))
    (setf (get l :lleg) (get b4 :joint-coord1))
    (setf (get l :rleg) (get b2 :joint-coord2))
    (dolist (p (list :back-panel :back-pack-top :neck :larm :rarm :lleg :rleg :lmarm :rmarm))
      (when (get l p)
	(send l :assoc (get l p))))
    l))

(defun kxr-mamoru-torso-bodyset-new ()
  (let* ((b0 (kxr-battery-box))
	 (n (kxr-servo-half-arm-supporter-a-bodyset :bridge t))
	 (jf0 (kxr-joint-frame-a))
	 (jf1 (kxr-joint-frame-a))
	 (m5 (M5stackfire-bodyset))
	 (b1 (kxr-body-plate))
	 (b2 (kxr-mamoru-crotch-plate-bodyset-new))
	 (bp (kxr-back-pack))
	 (b3 (kxr-body-plate))
	 (b4 (kxr-mamoru-crotch-plate-bodyset-new2))
	 (b5 (kxr-lock-ring))
	 (b6 (kxr-lock-ring))
	 (s1 (kxr-body-plate-spacer))
	 (s2 (kxr-body-plate-spacer))
	 (j1 (kxr-joint-base))
	 (j12 (kxr-joint-base))
	 (j13 (kxr-joint-base))
	 (j14 (kxr-joint-base))
	 (j2 (kxr-joint-base))
	 (j22 (kxr-joint-base))
	 (j23 (kxr-joint-base))
	 (j24 (kxr-joint-base))
	 (c (get b3 :joint-coord))
	 bpc hb h bs l (bc (get bp :joint-coord)))
    (setq bpc bc)
    (send bpc :translate #f(15 0 0) :world)
    (send b0 :rotate pi/2 :z)
    (send b0 :rotate pi/2 :y :world)
    (send b0 :rotate pi/2 :z :world)
    (send b0 :worldcoords)
    (setq h (send b0 :z-height #f(0 0 0)))
    (send j13 :move-named-coords "uph1" b1 "r4up2")
    (send j13 :translate #f(0 0 -3) :world)
    (send j14 :move-named-coords "uph1" b1 "l5up3")
    (send j14 :translate #f(0 0 -3) :world)
    
    (send j12 :move-named-coords "downh1" j1 "uph1")
    (send j12 :rotate pi :x :world)
    (send j1 :move-named-coords "downh1" b1 "l3up1")
    (send b1 :locate (float-vector 0 0 h) :world)
    (send b0 :assoc b1)

    (send j23 :move-named-coords "uph1" b3 "r4up2")
    (send j23 :translate #f(0 0 -3) :world)
    (send j24 :move-named-coords "uph1" b3 "l5up3")
    (send j24 :translate #f(0 0 -3) :world)

    (send j22 :move-named-coords "downh1" j2 "uph1")
    (send j22 :rotate pi :x :world)
    (send j2 :move-named-coords "downh1" b3 "l3up2")

    (send b2 :rotate pi :x :world)
    (send b2 :rotate pi/2 :z :world)
    (send b2 :locate (float-vector 0 0 (- h)) :world)
    (send b0 :assoc b2)
    (send bp :rotate pi/2 :y :world)
    (send bp :rotate pi :z :world)
    (send bp :locate (float-vector -51 0 -34) :world)
    (send b0 :assoc bp)

    (send n :locate #f(5 0 52) :world)
    (send b0 :assoc n)
    (send m5 :locate #f(66 0 -12) :world)
    (setq bs (append (send m5 :bodies) (send n :bodies)))
    (setq bs (append (list b0 b1 j1 j12 j13 j14 j2 j22 j23 j24 bp)
		     (send b2 :bodies) bs))
    (send b5 :rotate pi :y)
    (send b5 :locate (float-vector 0 0 (- -2 h)) :world)
    (send b0 :assoc b5)
    (send b6 :locate (float-vector 0 0 (+ 2 h)) :world)
    (send b0 :assoc b6)
    (setq bs (append bs (list b5 b6)))
    (send b3 :rotate pi :z :world)
    (send b3 :locate (float-vector 0 0 h) :world)
    (send b0 :assoc b3)

    (send b4 :rotate pi/2 :z :world)
    (send b4 :rotate pi :x :world)
    (send b4 :locate (float-vector 0 0 (- h)) :world)
    (send b0 :assoc b4)
    (setq bs (append bs (list b3) (send b4 :bodies)))
    (setq l (kxr-bodyset-create bs))
    (setf (get l :back-panel) bpc)
    (setf (get l :back-pack-top) bc)
    (setf (get l :neck) (get n :joint-coord))
    (setf (get l :lmarm) (get b4 :joint-coord3))
    (setf (get l :rmarm) (get b2 :joint-coord3))
    (setf (get l :larm) (get b4 :joint-coord2))
    (setf (get l :rarm) (get b2 :joint-coord1))
    (setf (get l :lleg) (get b4 :joint-coord1))
    (setf (get l :rleg) (get b2 :joint-coord2))
    (dolist (p (list :back-panel :back-pack-top :neck :larm :rarm :lleg :rleg :lmarm :rmarm))
      (send l :assoc (get l p)))
    l))

(defun kxr-mamoru-torso-bodyset-new-2022 (&key m5stack)
  (let* ((b0 (kxr-battery-box))
     (n (kxr-servo-half-arm-supporter-a-bodyset :bridge t))
     (jf0 (kxr-joint-frame-a))
     (jf1 (kxr-joint-frame-a))
     (m5 (if m5stack (M5stackfire-bodyset)))
     (b1 (kxr-body-plate))
     (b2 (kxr-mamoru-crotch-plate-bodyset-new-2022))
     (bp (kxr-back-pack))
     (b3 (kxr-body-plate))
     (b4 (kxr-mamoru-crotch-plate-bodyset-new2-2022))
     (b5 (kxr-lock-ring))
     (b6 (kxr-lock-ring))
     (s1 (kxr-body-plate-spacer))
     (s2 (kxr-body-plate-spacer))
     (j1 (kxr-joint-base))
     (j12 (kxr-joint-base))
     (j13 (kxr-joint-base))
     (j14 (kxr-joint-base))
     (j2 (kxr-joint-base))
     (j22 (kxr-joint-base))
     (j23 (kxr-joint-base))
     (j24 (kxr-joint-base))
     (c (get b3 :joint-coord))
     bpc hb h bs l (bc (get bp :joint-coord)))
    (setq bpc bc)
    (send bpc :translate #f(15 0 0) :world)
    (send b0 :rotate pi/2 :z)
    (send b0 :rotate pi/2 :y :world)
    (send b0 :rotate pi/2 :z :world)
    (send b0 :worldcoords)
    (setq h (send b0 :z-height #f(0 0 0)))
    (send j13 :move-named-coords "uph1" b1 "r4up2")
    (send j13 :translate #f(0 0 -3) :world)
    (send j14 :move-named-coords "uph1" b1 "l5up3")
    (send j14 :translate #f(0 0 -3) :world)
    
    (send j12 :move-named-coords "downh1" j1 "uph1")
    (send j12 :rotate pi :x :world)
    (send j1 :move-named-coords "downh1" b1 "l3up1")
    (send b1 :locate (float-vector 0 0 h) :world)
    (send b0 :assoc b1)

    (send j23 :move-named-coords "uph1" b3 "r4up2")
    (send j23 :translate #f(0 0 -3) :world)
    (send j24 :move-named-coords "uph1" b3 "l5up3")
    (send j24 :translate #f(0 0 -3) :world)

    (send j22 :move-named-coords "downh1" j2 "uph1")
    (send j22 :rotate pi :x :world)
    (send j2 :move-named-coords "downh1" b3 "l3up2")

    (send b2 :rotate pi :x :world)
    (send b2 :rotate pi/2 :z :world)
    (send b2 :locate (float-vector 0 0 (- h)) :world)
    (send b0 :assoc b2)
    (send bp :rotate pi/2 :y :world)
    (send bp :rotate pi :z :world)
    (send bp :locate (float-vector -51 0 -34) :world)
    (send b0 :assoc bp)

    (send n :locate #f(5 0 52) :world)
    (send b0 :assoc n)
    (when m5stack
      (send m5 :locate #f(66 0 -12) :world)
      (setq bs (append (send m5 :bodies) (send n :bodies))))
    (setq bs (append (list b0 b1 j1 j12 j13 j14 j2 j22 j23 j24 bp)
		     (send b2 :bodies) bs))
    (send b5 :rotate pi :y)
    (send b5 :locate (float-vector 0 0 (- -2 h)) :world)
    (send b0 :assoc b5)
    (send b6 :locate (float-vector 0 0 (+ 2 h)) :world)
    (send b0 :assoc b6)
    (setq bs (append bs (list b5 b6)))
    (send b3 :rotate pi :z :world)
    (send b3 :locate (float-vector 0 0 h) :world)
    (send b0 :assoc b3)

    (send b4 :rotate pi/2 :z :world)
    (send b4 :rotate pi :x :world)
    (send b4 :locate (float-vector 0 0 (- h)) :world)
    (send b0 :assoc b4)
    (setq bs (append bs (list b3) (send b4 :bodies)))
    (setq l (kxr-bodyset-create bs))
    (setf (get l :back-panel) bpc)
    (setf (get l :back-pack-top) bc)
    (setf (get l :neck) (get n :joint-coord))
    (setf (get l :lmarm) (get b4 :joint-coord3))
    (setf (get l :rmarm) (get b2 :joint-coord3))
    (setf (get l :larm) (get b4 :joint-coord2))
    (setf (get l :rarm) (get b2 :joint-coord1))
    (setf (get l :lleg) (get b4 :joint-coord1))
    (setf (get l :rleg) (get b2 :joint-coord2))
    (dolist (p (list :back-panel :back-pack-top :neck :larm :rarm :lleg :rleg :lmarm :rmarm))
      (send l :assoc (get l p)))
    l))


(defun kxr-l2-body-bodyset (&key (backpack (kxr-back-pack)) mag-joint mag-plate no-upper-body
				 torso
				 shoulder-front neck-front shoulder-center (shoulder-servo (not torso)))
  (let* ((b0 (if no-upper-body nil
	       (if torso
		   (kxr-battery-torso-bodyset :wide t :half t :ring nil :half-ring nil
					      :backpack nil :leg-plate nil)
		 (kxr-battery-torso-bodyset :wide t :half t :ring t
					    :backpack backpack))))
	 (b1 (kxr-battery-leg-plate-bodyset :mag-plate mag-plate))
	 (b3h (kxr-servo-half-arm-supporter-a-bodyset :neck-front neck-front))
	 (b3l (if shoulder-center
		  (kxr-servo-double-joint-frame-bodyset t)
		  (kxr-servo-double-arm-supporter-a-bodyset :front shoulder-front :servo shoulder-servo)))
	 (b3r (if shoulder-center
		  (kxr-servo-double-joint-frame-bodyset t)
		  (kxr-servo-double-arm-supporter-a-bodyset :front shoulder-front :servo shoulder-servo)))
	 (hc (get b3h :joint-coord))
	 blist l al ar (c (make-cascoords)))
    (unless
	no-upper-body
      (send b0 :rotate pi :z :world)
      (send b0 :rotate pi/2 :-y :world)
      (if shoulder-front
	  (send b3l :locate #f(14.5 31.5 43.5) :world)
	(send b3l :locate #f(0 31.5 43.5) :world))
      (send b0 :assoc b3l)
      
      (if shoulder-center
	  (send b3r :rotate pi :z :world)
	(send b3r :rotate pi :x :world))
      ;;    (send ra :locate #f(-7.25 -17.5 0) :world)
      ;;(send b3r :assoc ra)
      (if shoulder-front
	  (send b3r :locate #f(14.5 -31.5 43.5) :world)
	(send b3r :locate #f(0 -31.5 43.5) :world))
      (send b0 :assoc b3r)
      ;;
      (send b3h :locate #f(0 0 43.5) :world)
      (send b0 :assoc b3h)
      ;;
      (when (null shoulder-servo)
	(unless torso
	  (setq al (kxr-arm-base-bodyset 28))
	  (send al :rotate -pi/2 :x :world)
	  (send al :rotate  pi/2 :y :world)
	  (send al :locate (send (get b3l :joint-coord) :worldpos) :world)
	  (send al :translate (float-vector (if shoulder-front -10.5 10.5) -7.5 0) :world)
	  (send b3l :assoc al)
	  (setf (get b3l :joint-coord) (send (get al :joint-coord) :worldcoords))
	  ;;(send b3l :assoc (get b3l :joint-coord))
	  (setq ar (kxr-arm-base-bodyset 28))
	  (send ar :rotate pi/2 :x :world)
	  (send ar :rotate pi/2 :y :world)
	  (send ar :locate (send (get b3r :joint-coord) :worldpos) :world)
	  (send ar :translate (float-vector (if shoulder-front -10.5 10.5) 7.5 0) :world)
	  (send b3r :assoc ar)
	  (setf (get b3r :joint-coord) (send (get ar :joint-coord) :worldcoords))
	  ;;(send b3r :assoc (get b3r :joint-coord))
	  (setq blist (append (send al :bodies) (send ar :bodies))))
	)
      )
    (send b1 :rotate pi :x :world)
    (send b1 :rotate pi/2 :z :world)
    (cond
     (no-upper-body
      (setq blist (send b1 :bodies))
      (send (car blist) :assoc c)
      )
     (t
      (setq blist (append (send b0 :bodies) (send b1 :bodies)
			  (send b3l :bodies) (send b3r :bodies)
			  (send b3h :bodies) blist))
      (unless torso
	(send b1 :locate (float-vector 0 0 -16) :world)
	(send b0 :assoc b1)
	(setq blist (append blist (send b1 :bodies))))
      (dolist (b (list b3l b3h b3r))
	(if (derivedp (get b :joint-coord) cascaded-coords)
	    (send (car blist) :assoc (get b :joint-coord))))
      )
     )
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (send (car blist) :bottom-to-z :bodies blist)
    (setq l (kxr-bodyset-create blist))
    (setf (get l :neck) (make-cascoords :coords (send hc :worldcoords)))
    (setf (get l :larm) (make-cascoords :coords (send (get b3l :joint-coord) :worldcoords)))
    (setf (get l :rarm) (make-cascoords :coords (send (get b3r :joint-coord) :worldcoords)))
    (cond
     (no-upper-body
      (setf (get l :joint-coord) c)
      )
     (t
      (setf (get l :back-pack-top) (get b0 :back-pack-top))
      (setf (get l :back-panel) (get b0 :back-panel))))
    (setf (get l :lleg) (make-cascoords :pos (float-vector 0 23.5 0)))
    (setf (get l :rleg) (make-cascoords :pos (float-vector 0 -23.5 0)))
    (dolist (k (list :back-pack-top :back-panel :rleg :lleg :larm :rarm :neck :joint-coord))
      (when (get l k)
	(send l :assoc (get l k))))
    l))

(defun kxr-l2-chest-bodyset (&key noback roll front-cut)
  (let* ((bp (kxr-back-pack))
	 (b3h (kxr-servo-half-arm-supporter-a-bodyset :bottom t :roll roll))
	 (b3l (kxr-servo-double-arm-supporter-a-bodyset))
	 (b3r (kxr-servo-double-arm-supporter-a-bodyset))
	 (pf (if front-cut (kxr-body-cut-plate) (kxr-body-plate)))
	 (pb (kxr-body-plate))
	 (hc (get b3h :joint-coord))
	 (la (make-cascoords))
	 (ra (make-cascoords))
	 blist l)
    
    (send bp :rotate pi/2 :y :world)
    (send bp :rotate pi :z :world)
    (send bp :locate #f(-25.5 0 -42) :world)
    (when noback
      ;;(send bp :translate #f(0 0 31.5) :world)
      (setq pf (if front-cut (kxr-body-cut-plate) (kxr-body-plate)))
      ;;(send pf :locate #f(-42 0 0) :world)      
      (setq pb (kxr-body-cut-plate))
      ;;(send pb :locate #f(-42 0 0) :world)      
      )

    (send pf :rotate pi/2 :y :world)
    (send pb :rotate pi/2 :-y :world)
    (send pb :rotate pi :x :world)
    (if front-cut
	(if noback
	    (send pf :translate #f(22.5 0 -42) :world)
	    (send pf :translate #f(22.5 0 0) :world))
	(if noback
	    (send pf :translate #f(22.5 0 -84) :world)
	    (send pf :translate #f(22.5 0 -42) :world)))
    (send pb :locate #f(-22.5 0 -42) :world)
    (when noback
      (send pf :translate #f(0 0 42) :world)
      (send pb :translate #f(0 0 42) :world)
      )

    (send la :locate #f(-7.25 17 0) :world)
    (send b3l :assoc la)
    (send b3l :locate #f(0 31.5 0) :world)

    (send b3r :rotate pi :x :world)
    (send ra :locate #f(-7.25 -17 0) :world)
    (send b3r :assoc ra)
    (send b3r :locate #f(0 -31.5 0) :world)
    ;;
    (if noback
	(setq blist 
	      (append (list pf pb) (send b3l :bodies) (send b3r :bodies)
		      (send b3h :bodies)))
	(setq blist 
	      (append (list pf pb bp) (send b3l :bodies) (send b3r :bodies)
		      (send b3h :bodies))))
    ;;(dolist (b (cdr blist)) (send (car blist) :assoc b))
    ;;(send (car blist) :worldcoords)
    (setq l (kxr-bodyset-create blist))
    (send l :worldcoords)
    (setf (get l :neck) (copy-object hc))
    (setf (get l :larm) (copy-object la))
    (setf (get l :rarm) (copy-object ra))
    (setf (get l :joint-coord) (copy-object (get b3h :joint-coord)))
    (setf (get l :base-coord) (copy-object (get b3h :base-coord)))
    (dolist (a (list :neck :larm :rarm :joint-coord :base-coord))
      (send l :assoc (get l a)))
    (send l :locate (v- (send (get l :base-coord) :worldpos)) :world)
    l))

(defun kxr-l2-chest-r-bodyset (&optional noback)
  (let* ((bp (kxr-back-pack))
	 (b3h (kxr-chest-center-bodyset t))
	 (b3l (kxr-servo-double-arm-supporter-a-bodyset))
	 (b3r (kxr-servo-double-arm-supporter-a-bodyset))
	 (pf (kxr-body-plate))
	 (pb (kxr-body-plate))
	 (hc (get b3h :joint-coord))
	 (la (make-cascoords))
	 (ra (make-cascoords))
	 blist l)
    
    (send bp :rotate pi/2 :y :world)
    (send bp :rotate pi :z :world)
    (send bp :locate #f(-25.5 0 -42) :world)
    (when noback
      ;;(send bp :translate #f(0 0 31.5) :world)
      (setq pf (kxr-body-cut-plate))
      ;;(send pf :locate #f(-42 0 0) :world)      
      (setq pb (kxr-body-cut-plate))
      ;;(send pb :locate #f(-42 0 0) :world)      
      )

    (send pf :rotate pi/2 :y :world)
    (send pb :rotate pi/2 :-y :world)
    (send pb :rotate pi :x :world)
    (send pf :locate #f(22.5 0 -42) :world)
    (send pb :locate #f(-22.5 0 -42) :world)
    (when noback
      (send pf :translate #f(0 0 42) :world)
      (send pb :translate #f(0 0 42) :world)
      )

    (send la :locate #f(-7.25 17 0) :world)
    (send b3l :assoc la)
    (send b3l :locate #f(0 31.5 0) :world)

    (send b3r :rotate pi :x :world)
    (send ra :locate #f(-7.25 -17 0) :world)
    (send b3r :assoc ra)
    (send b3r :locate #f(0 -31.5 0) :world)
    ;;
    (if noback
	(setq blist 
	      (append (list pf pb) (send b3l :bodies) (send b3r :bodies)
		      (send b3h :bodies)))
	(setq blist 
	      (append (list pf pb bp) (send b3l :bodies) (send b3r :bodies)
		      (send b3h :bodies))))
    ;;(dolist (b (cdr blist)) (send (car blist) :assoc b))
    ;;(send (car blist) :worldcoords)
    (setq l (kxr-bodyset-create blist))
    (send l :worldcoords)
    (setf (get l :neck) (copy-object hc))
    (setf (get l :larm) (copy-object la))
    (setf (get l :rarm) (copy-object ra))
    (setf (get l :joint-coord) (copy-object (get b3h :joint-coord)))
    (setf (get l :base-coord) (copy-object (get b3h :base-coord)))
    (dolist (a (list :neck :larm :rarm :joint-coord :base-coord))
      (send l :assoc (get l a)))
    (send l :locate (v- (send (get l :base-coord) :worldpos)) :world)
    l))

(defun kxr-l2-waist-bodyset nil
  (let* ((b3h (kxr-servo-half-arm-supporter-a-bodyset))
	 (b3l (kxr-servo-double-arm-supporter-a-bodyset))
	 (b3r (kxr-servo-double-arm-supporter-a-bodyset))
	 ;;(pf (kxr-body-cut-plate))
	 ;;(pb (kxr-body-cut-plate))
	 (pf (kxr-body-plate))
	 (pb (kxr-body-plate))
	 (hc (get b3h :joint-coord))
	 (la (make-cascoords))
	 (ra (make-cascoords))
	 (ll (make-cascoords))
	 (rl (make-cascoords))
	 l)
    (send pf :rotate pi/2 :y :world)
    (send pf :rotate pi :x :world)
    ;;(send pf :locate #f(21 0 0) :world)
    (send pf :locate #f(22.5 0 43.5) :world)
    (send pb :rotate pi/2 :-y :world)
    ;;(send pb :locate #f(-21 0 0) :world)
    (send pb :locate #f(-22.5 0 43.5) :world)
    
    (send b3l :rotate pi/2 :-x :world)
    ;;(send b3l :rotate pi :z :world)
    (send la :locate #f(-7.25 0 -17.5) :world)
    (send b3l :assoc la)
    (send b3l :locate #f(0 33.0 0) :world)


    (send b3r :rotate pi/2 :-x :world)
    ;;(send b3r :rotate pi :z :world)
    (send ra :locate #f(-7.25 0 -17.5) :world)
    (send b3r :assoc ra)
    (send b3r :locate #f(0 -33.0 0) :world)
    ;;
    ;;(send b3h :rotate pi :z :world)
    ;;(send hc :locate #f(7.25 0 17.5) :world)
    (send b3h :assoc hc)

    (setq l (kxr-bodyset-create
	     (append (list pf pb) (send b3l :bodies) (send b3r :bodies)
		     (send b3h :bodies))))
    (setf (get l :torso) hc (get l :lleg) la (get l :rleg) ra)
    (setf (get l :joint-coord) hc)
    l))

(defun kxr-l2-cut-waist-bodyset (&key center-front side-front front-cut)
  (let* ((b3h (kxr-servo-half-arm-supporter-a-bodyset))
	 (b3l (kxr-servo-double-arm-supporter-a-bodyset))
	 (b3r (kxr-servo-double-arm-supporter-a-bodyset))
	 (pf (if front-cut (kxr-body-cut-plate) (kxr-body-plate)))
	 (pb (kxr-body-cut-plate))
	 (hc (get b3h :joint-coord))
	 (la (make-cascoords))
	 (ra (make-cascoords))
	 (ca (make-cascoords))
	 l)
    (send pf :rotate pi/2 :y :world)
    (send pf :rotate pi :x :world)
    (if front-cut
	(send pf :locate #f(22.5 0 0) :world)
	(send pf :locate #f(22.5 0 42) :world))	
    (send pb :rotate pi/2 :-y :world)
    (send pb :locate #f(-22.5 0 0) :world)
    ;;(send pb :locate #f(-21 0 42) :world)
    
    (send b3l :rotate pi/2 :-x :world)
    ;;(send b3l :rotate pi :z :world)
    (send la :locate #f(-7.25 0 -17.5) :world)
    (send b3l :assoc la)
    (send b3l :locate #f(0 33.0 0) :world)
    (if side-front (send b3l :rotate pi :z :world))

    (send b3r :rotate pi/2 :-x :world)
    ;;(send b3r :rotate pi :z :world)
    (send ra :locate #f(-7.25 0 -17.5) :world)
    (send b3r :assoc ra)
    (send b3r :locate #f(0 -33.0 0) :world)
    (if side-front (send b3r :rotate pi :z :world))
    ;;
    (send ca :locate (midpoint 0.5 (send ra :worldpos) (send la :worldpos)))
    (send b3h :assoc ca)
    ;;
    ;;(send b3h :rotate pi :z :world)
    ;;(send hc :locate #f(7.25 0 17.5) :world)
    (send b3h :assoc hc)
    (if center-front (send b3h :rotate pi :z))

    (setq l (kxr-bodyset-create
	     (append (list pf pb) (send b3l :bodies) (send b3r :bodies)
		     (send b3h :bodies))))
    (setf (get l :torso) hc (get l :lleg) la (get l :rleg) ra)
    (setf (get l :joint-coord) hc (get l :bottom) ca)
    (dolist (a '(:torso :lleg :rleg :joint-coord))
      (if (get l a) (send l :assoc (get l a))))
    l))


(defun kxr-l2w2-body-bodyset (&key center-front shoulder-front crotch-front shoulder-center
				side-front front-cut (back-pack t))
  (let* ((b3h (kxr-servo-double-arm-supporter-a-bodyset))
	 (b3l (kxr-servo-double-arm-supporter-a-bodyset :front crotch-front))
	 (b3r (kxr-servo-double-arm-supporter-a-bodyset :front crotch-front))
	 (la (get b3l :joint-coord))
	 (ra (get b3r :joint-coord))
	 (bwl (if shoulder-center
		  (kxr-servo-double-joint-frame-bodyset t)
		  (kxr-servo-half-arm-supporter-a-bodyset :neck-front (null shoulder-front))))
	 (bwr (if shoulder-center
		  (kxr-servo-double-joint-frame-bodyset t)
		  (kxr-servo-half-arm-supporter-a-bodyset :neck-front (null shoulder-front))))
	 (wla (get bwl :joint-coord))
	 (wra (get bwr :joint-coord))
	 (pf (kxr-body-plate))
	 (pb (kxr-body-plate))
	 (pac (get pb :joint-coord))
	 (hc (get b3h :joint-coord))
	 (ca (make-cascoords))
	 (bak (kxr-back-pack))
	 blist l)
    (send pf :rotate pi/2 :y :world)
    (send pf :locate #f(22.5 0 -10.5) :world)
    ;;
    (when back-pack
      ;;(send bak :move-named-coords "joint-coord" pb "joint-coord")
      (send bak :move-coords (get pb :joint-coord) bak)
      (send bak :translate #f(35 0 0))
      (send pb :assoc bak)
      (push bak blist)
      )
    (send pb :rotate pi/2 :-y :world)
    (send pb :rotate pi :x :world)
    (send pb :locate #f(-22.5 0 -10.5) :world)
    
    (send b3l :rotate pi/2 :-x :world)
    (cond
      (crotch-front
       (send b3l :rotate pi :x :world)
       (send b3l :locate #f(14.5 33.0 0) :world))
      (t (send b3l :locate #f(0 33.0 0) :world)))
    (if side-front (send b3l :rotate pi :z :world))
    
    (send b3r :rotate pi/2 :-x :world)
    (cond
      (crotch-front
       (send b3r :rotate pi :x :world)
       (send b3r :locate #f(14.5 -33.0 0) :world))
      (t (send b3r :locate #f(0 -33.0 0) :world)))
    (if side-front (send b3r :rotate pi :z :world))
    ;;
    (cond
      (shoulder-center
       (send bwl :locate #f(0 33.0 31.5) :world)
       (send bwr :rotate pi :z :world)
       (send bwr :locate #f(0 -33.0 31.5) :world)
       )
      (t
       (send bwl :rotate pi/2 :x :world)
       (send bwl :locate #f(0 33.0 31.5) :world)
       (send bwl :rotate pi :z :world)
       
       (send bwr :rotate pi/2 :-x :world)
       (send bwr :locate #f(0 -33.0 31.5) :world)
       (send bwr :rotate pi :z :world)
       ))
    ;;
    (send b3h :rotate pi/2 :x :world)
    (send b3h :locate (float-vector 0 0 (+ 10.5 21)) :world)
    (send ca :locate (midpoint 0.5 (send ra :worldpos) (send la :worldpos)))
    (send b3h :assoc ca)
    ;;(send b3h :rotate pi :z :world)
    ;;(send hc :locate #f(7.25 0 17.5) :world)
    (send b3h :assoc hc)
    (if center-front (send b3h :rotate pi :z))
    (setq blist (append (list pf pb) blist
			(send bwl :bodies) (send bwr :bodies)
			(send b3l :bodies) (send b3r :bodies)
			(send b3h :bodies)))
    (setq l (kxr-bodyset-create blist))
    (setf (get l :neck) hc)
    (setf (get l :torso) hc (get l :lleg) la (get l :rleg) ra)
    (setf (get l :lwheel) wla (get l :rwheel) wra)
    (setf (get l :larm) wla (get l :rarm) wra)
    (setf (get l :joint-coord) hc (get l :bottom) ca)
    (setf (get l :back-pack) pac)
    l))

(defun kxr-l4d-crotch-p-bodyset ()
  (let* ((ss (kxr-servo-supporter-bodyset))
	 (b0 (kxr-joint-frame-base-b-bodyset))
	 (b1 (kxr-joint-frame-base-b-bodyset))
	 (c (get ss :joint-coord)))
    (send ss :rotate pi/2 :x :world)
    (send ss :rotate pi :y :world)
    (send ss :locate #f(0 -13 0) :world)
    (send b0 :rotate pi/2 :-z :world)
    (send b0 :locate #f(21 0 -19.5) :world)
    (send b1 :rotate pi/2 :-z :world)
    (send b1 :rotate pi :-x :world)
    (send b1 :locate #f(21 0 19.5) :world)
    (kxr-bodyset-create
     (append (send ss :bodies) (send b0 :bodies) (send b1 :bodies)) c)))

(defun kxr-servo-y-p-bodyset (&optional (l/r :rarm))
  (let* ((ss (kxr-servo-supporter-bodyset))
	 (b0 (kxr-joint-frame-base-b-bodyset))
	 (b1 (kxr-joint-frame-base-b-bodyset))
	 l (c (get ss :joint-coord))
	 (u (get ss :upper-coord)))
    (cond
      ((kxr-right-limb? l/r) (send ss :rotate pi/2 :-x)
       (send ss :locate #f(0 13 0) :world))
      (t (send ss :rotate pi/2 :x)
	 (send ss :locate #f(0 -13 0) :world)))
    (send b0 :rotate pi/2 :-z :world)
    (send b0 :locate #f(0 0 -19.5) :world)
    (send b1 :rotate pi/2 :-z :world)
    (send b1 :rotate pi :-x :world)
    (send b1 :locate #f(0 0 19.5) :world)
    (setq l (kxr-bodyset-create
	     (append (send ss :bodies) (send b0 :bodies) (send b1 :bodies)) c))
    (send l :put :upper-coord u)
    (send l :assoc (get l :upper-coord))
    l))

(defun kxr-l4d-bodyset (&key stand flat-shoulder tail shoulder-low shoulder-front
			  flat-crotch crotch-front crotch-p crotch-low)
  (let* ((b0 (kxr-battery-torso-bodyset :wide t :half nil :ring t))
	 (bclf (if flat-crotch
		   (kxr-servo-double-arm-supporter-a-bodyset)
		   (kxr-l4d-crotch-p-bodyset)))
	 (bclb (if flat-shoulder
		   (kxr-servo-double-arm-supporter-a-bodyset)
		   (kxr-l4d-crotch-p-bodyset)))
	 (bcrb (if flat-shoulder
		   (kxr-servo-double-arm-supporter-a-bodyset)
		   (kxr-l4d-crotch-p-bodyset)))
	 (bcrf (if flat-crotch
		   (kxr-servo-double-arm-supporter-a-bodyset)
		   (kxr-l4d-crotch-p-bodyset)))
	 tl blist l x)
    (cond
      (flat-shoulder
       (cond
	(shoulder-front
	 (send bclb :rotate -pi/2 :y)
	 (send bcrb :rotate pi/2 :y))
	(t
	 (send bclb :rotate pi/2 :y)
	 (send bcrb :rotate -pi/2 :y)))
       (send bclb :locate #f(-43.5 33 0) :world)
       (send bcrb :rotate pi :x :world)
       (send bcrb :locate #f(-43.5 -33 0) :world)
       )
      (t (setq bclb (kxr-l4d-crotch-p-bodyset))
	 (setq bcrb (kxr-l4d-crotch-p-bodyset))
	 (send bclb :locate #f(-64.5 33 0) :world)
	 (send bcrb :rotate pi :x :world)
	 (send bcrb :locate #f(-64.5 -33 0) :world)))

    (when shoulder-low
      (send bclb :translate #f(10.5 0 0) :world)
      (send bcrb :translate #f(10.5 0 0) :world))

    (cond
      (flat-crotch
       (send bclf :rotate pi/2 :-z :world)
       (if crotch-front
	   (send bclf :rotate pi/2 :-x :world)
	   (send bclf :rotate pi/2 :x :world))
       (send bclf :locate #f(43.5 33 0) :world)
       (send bcrf :rotate pi/2 :-z :world)
       (if crotch-front
	   (send bcrf :rotate pi/2 :-x :world)
	   (send bcrf :rotate pi/2 :x :world))
       (send bcrf :locate #f(43.5 -33 0) :world))
      (crotch-p
       (send bclf :rotate -pi/2 :z :world)
       (setq x (- 64.5 21 10.5))
       (if crotch-low (setq x (+ x 10.5)))
       (send bclf :locate (float-vector x (+ 33 21) 0) :world)
       (send bcrf :rotate pi :x :world)
       (send bcrf :rotate pi/2 :z :world)
       (send bcrf :locate (float-vector x (- -33 21) 0) :world))
      (t
       (send bclf :rotate pi :z :world)
       (send bclf :rotate pi :x :world)
       (send bclf :locate #f(64.5 33 0) :world)
       (send bcrf :rotate pi :z :world)
       (send bcrf :locate #f(64.5 -33 0) :world)))
    ;;
    (setq blist
	  (append (send b0 :bodies)
		  (send bclb :bodies)
		  (send bclf :bodies)
		  (send bcrf :bodies)
		  (send bcrb :bodies)))
    (when tail
      ;;(setq tl (kxr-servo-bottom-supporter-bodyset :align t :flip-axis :x :rotate-y -pi/2))
      (setq tl (kxr-servo-bottom-supporter-bodyset :align t :flip-axis :x :rotate-z pi))
      (send tl :locate (send (get b0 :neck) :worldpos) :world) 
      (setq blist (append blist (send tl :bodies)))
      )
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (setq l (kxr-bodyset-create blist))
    (cond
      (stand
       ;;(send (car blist) :rotate pi :z :world)
       ;;       (send (car blist) :rotate pi :z :world)
       (setf (get l :larm) (get bcrb :joint-coord))
       (setf (get l :lmarm) (get bcrb :joint-coord))
       (setf (get l :rarm) (get bclb :joint-coord))
       (setf (get l :rmarm) (get bclb :joint-coord))
       (setf (get l :lleg) (get bcrf :joint-coord))
       (setf (get l :rleg) (get bclf :joint-coord))
       )
      (t
       (setf (get l :larm) (get bclf :joint-coord))
       (setf (get l :lmarm) (get bclf :joint-coord))
       (setf (get l :rarm) (get bcrf :joint-coord))
       (setf (get l :rmarm) (get bcrf :joint-coord))
       (setf (get l :lleg) (get bclb :joint-coord))
       (setf (get l :rleg) (get bcrb :joint-coord))))
    (setf (get l :neck) (get b0 :neck))
    (dolist (p '(:neck :larm :lmarm :rarm :rmarm :lleg :rleg)) (send l :assoc (get l p)))
    (when tail
      (setf (get l :tail) (get tl :joint-coord))
      (send l :assoc (get l :tail)))
    l))

(defun kxr-l4r-bodyset ()
  (let* ((b0 (kxr-battery-torso-bodyset :wide t :half nil :ring t))
	 (bclb (kxr-l4d-crotch-p-bodyset))
	 (bclf (kxr-l4d-crotch-p-bodyset))
	 (bcrf (kxr-l4d-crotch-p-bodyset))
	 (bcrb (kxr-l4d-crotch-p-bodyset))
	 l)
    (send bclb :locate #f(-64.5 33 0) :world)
    (send bcrb :rotate pi :x :world)
    (send bcrb :locate #f(-64.5 -33 0) :world)
    (send bclf :rotate pi :z :world)
    (send bclf :rotate pi :x :world)
    (send bclf :locate #f(64.5 33 0) :world)
    (send bcrf :rotate pi :z :world)
    (send bcrf :locate #f(64.5 -33 0) :world)
    (setq l (kxr-bodyset-create
	     (append (send b0 :bodies)
		     (send bclb :bodies)
		     (send bclf :bodies)
		     (send bcrf :bodies)
		     (send bcrb :bodies))))
    (setf (get l :neck) (get b0 :neck))
    (setf (get l :larm) (get bclf :joint-coord))
    (setf (get l :rarm) (get bcrf :joint-coord))
    (setf (get l :lleg) (get bclb :joint-coord))
    (setf (get l :rleg) (get bcrb :joint-coord))
    (dolist (p '(:neck :larm :rarm :lleg :rleg)) (send l :assoc (get l p)))
    l))

(defun kxr-l4tr-crotch-p-bodyset ()
  (let ((s (kxr-servo-s3301))
	(b (kxr-joint-base))
	l (c (make-cascoords)))
    (send s :rotate pi/2 :-z :world)
    (send b :locate #f(0 -31.5 16) :world)
    (send s :assoc b)
    (kxr-bodyset-create (list s b) c)))

(defun kxr-l6-bodyset (&key neck (backpack t) magmodule no-upper-body)
  (let* ((b0 (kxr-l4tr-bodyset :rotate t :neck neck :backpack backpack :magmodule magmodule))
	 (ml (kxr-l4tr-crotch-p-bodyset))
	 (mr (kxr-l4tr-crotch-p-bodyset))
	 (h (if magmodule -77 -3)) c l)
    (send b0 :rotate pi/2 :z)
    (send ml :locate (float-vector 0 (+ 10.5 64.5) h) :world)
    (send mr :rotate pi :z)
    (send mr :locate (float-vector 0 (- (+ 10.5 64.5)) h) :world)
    (setq blist (append (send b0 :bodies) (send ml :bodies) (send mr :bodies)))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (dolist (b (list ml mr))
      (if (derivedp (get b :joint-coord) cascaded-coords)
	  (send (car blist) :assoc (get b :joint-coord))))
    (dolist (b (list :rarm :rleg :larm :lleg :rmarm :lmarm))
      (if (get b0 b)
	  (send (car blist) :assoc (get b0 b))))
    (setq l (kxr-bodyset-create blist))
    (setf (get l :larm) (get b0 :rarm))
    (setf (get l :rarm) (get b0 :rleg))
    (setf (get l :lleg0) (get b0 :rarm))
    (setf (get l :rleg0) (get b0 :rleg))
    (setf (get l :lmarm) (get ml :joint-coord))
    (setf (get l :rmarm) (get mr :joint-coord))
    (setf (get l :lleg1) (get ml :joint-coord))
    (setf (get l :rleg1) (get mr :joint-coord))
    (setf (get l :lleg) (get b0 :larm))
    (setf (get l :rleg) (get b0 :lleg))
    (setf (get l :lleg2) (get b0 :larm))
    (setf (get l :rleg2) (get b0 :lleg))
    ;;
    (setf (get l :neck) (get b0 :back-pack-top))
    (setf (get l :torso) (get b0 :torso))
    (dolist (a '(:neck :torso :larm :rarm :lleg :rleg :lmarm :rmarm
		       :lleg0 :rleg0 :lleg1 :rleg1 :lleg2 :rleg2))
      (if (get l a) (send l :assoc (get l a))))
    l))

(defun kxr-l4tr-bodyset (&key rotate neck (backpack t) magmodule battery-box)
  (let* ((b0 (kxr-battery-torso-bodyset :wide nil :half nil
					:battery-box battery-box
					:backpack (if magmodule nil backpack)
					:back-pack-rotate rotate :ring t :neck neck))
	 (bclb (kxr-l4tr-crotch-p-bodyset))
	 (bclf (kxr-l4tr-crotch-p-bodyset))
	 (bcrf (kxr-l4tr-crotch-p-bodyset))
	 (bcrb (kxr-l4tr-crotch-p-bodyset))
	 (h -3) blist mm bb l (c (get b0 :back-pack-top)))
    (when magmodule
      (setq bb (kxr-battery-box))
      (send bb :rotate pi/2 :x :world)
      (send bb :rotate pi/2 :z :world)
      (if rotate (send bb :rotate pi/2 :z :world))
      (send bb :locate #f(0 0 -32) :world)
      (setq mm (kxr-twinmagbase))
      ;;(send mm :rotate pi/2 :x :world)
      ;;(send mm :rotate pi/2 :z :world)
      ;;(send mm :rotate pi/2 :y :world)
      (send mm :rotate pi/2 :z :world)
      (setf (get mm :joint-coord) (make-cascoords))
      (send mm :assoc (get mm :joint-coord))
      (if rotate (send mm :rotate pi/2 :z :world))
;;      (send mm :locate (float-vector 0 0 74) :world)
      (setq h -74)
      (send b0 :locate (float-vector 0 0 h) :world)
      (setq h (- h 3))
      (setq blist (list bb mm))
      )
    (send bclb :locate (float-vector -43.5 64.5 h) :world)
    (send bclf :locate (float-vector 43.5 64.5 h) :world)
    (send bcrf :rotate pi :z :world)
    (send bcrf :locate (float-vector 43.5 -64.5 h) :world)
    (send bcrb :rotate pi :z :world)
    (send bcrb :locate (float-vector -43.5 -64.5 h) :world)
    (setq l (kxr-bodyset-create
	     (append (send b0 :bodies)
		     (send bclb :bodies)
		     (send bclf :bodies)
		     (send bcrf :bodies)
		     (send bcrb :bodies)
		     blist)))
    (setf (get l :joint-coord) (get mm :joint-coord))
    (setf (get l :larm) (get bclf :joint-coord))
    (setf (get l :rarm) (get bcrf :joint-coord))
    (setf (get l :lleg) (get bclb :joint-coord))
    (setf (get l :rleg) (get bcrb :joint-coord))
    (setf (get l :neck) (get b0 :neck))
    (setf (get l :torso) (get b0 :torso))
    (setf (get l :back-pack-top) c)
    (dolist (a '(:neck :torso :larm :rarm :lleg :rleg :back-pack-top :joint-coord))
      (if (get l a) (send l :assoc (get l a))))
    l))

(defun kxr-l4w-bodyset (&key base-a (servo-stand base-a) battery-stand mag-joint
			     base-wide base-middle lidar magmodule neck neck-front)
  (let* ((b0 (kxr-battery-torso-bodyset
	      :wide battery-stand :half nil :top-plate nil :backpack nil :magmodule magmodule
	      :battery-box (null neck) :leg-plate (null neck) :neck-front neck-front
	      :back-pack-rotate nil :ring t :neck neck :lidar lidar :mag-joint mag-joint))
	 (bclb (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand))
	 (bclf (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand))
	 (bcrf (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand))
	 (bcrb (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand))
	 (h (if battery-stand -28.5 -22))
	 l (c (or (get b0 :back-pack-top) (make-cascoords))))
    (cond
      (base-a
       (cond
	 (servo-stand
	  (send bclb :rotate pi :z :world)
	  (send bclf :rotate pi :z :world))
	 (base-wide
	  (setq bclf (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand :flag t))
	  (send bclb :rotate pi :z :world)
	  (setq bcrb (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand :flag t))
	  (send bcrb :rotate pi :z :world))
	 (t
	  (setq bclb (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand :flag t))
	  (send bclf :rotate pi :z :world)
	  (setq bcrf (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand :flag t))
	  (send bcrf :rotate pi :z :world))
	 ))
      (base-wide
       (setq bclb (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand :flag t))
       (setq bcrf (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand :flag t))
       (send bclb :rotate pi :z :world)
       (send bcrb :rotate pi :z :world)
       )
      (base-middle
       (setq bclb (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand :flag t :flip t))
       (setq bcrf (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand :flag t :flip t))
       (setq bclf (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand :flag nil :flip t))
       (setq bcrb (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand :flag nil :flip t))
       (send bclb :rotate pi :z :world)
       (send bcrb :rotate pi :z :world)
       )
      (t
       (setq bclf (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand :flag t))
       (setq bcrb (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand :flag t))
       (send bclf :rotate pi :z :world)
       (send bcrf :rotate pi :z :world)
       ))
    (send bclb :locate (float-vector -43.5 33 h) :world)
    (send bclf :locate (float-vector 43.5 33 h) :world)
    (send bcrf :locate (float-vector 43.5 -33 h) :world)
    (send bcrb :locate (float-vector -43.5 -33 h) :world)
    (dolist (b (list bclb bclf bcrf bcrb)) (send b0 :assoc b))
    (if battery-stand (send b0 :translate #f(0 0 -8) :world)
	(send b0 :translate #f(0 0 -1) :world))
    (setq l (kxr-bodyset-create
	     (append (send b0 :bodies)
		     (send bclb :bodies)
		     (send bclf :bodies)
		     (send bcrf :bodies)
		     (send bcrb :bodies))))
    (setf (get l :lmarm) (get bclf :upper-coord))
    (setf (get l :rmarm) (get bcrf :upper-coord))
    (setf (get l :lleg) (get bclb :upper-coord))
    (setf (get l :rleg) (get bcrb :upper-coord))
    (setf (get l :neck) (get b0 :neck))
    (setf (get l :joint-coord) (get b0 :joint-coord))
    (setf (get l :torso) (get b0 :torso))
    (setf (get l :back-pack-top) c)
    (dolist (a '(:neck :joint-coord :torso :lmarm :rmarm :lleg :rleg :back-pack-top))
      (if (get l a) (send l :assoc (get l a))))
    l))


(defun kxr-l4dw-bodyset (&key base-a servo-stand battery-stand lidar mag-joint magmodule neck neck-front)
  (let* ((b0 (kxr-battery-torso-bodyset
	      :wide battery-stand :half nil :top-plate nil :backpack nil :magmodule magmodule
	      :battery-box (null neck) :leg-plate (null neck) :neck-front neck-front
	      :back-pack-rotate nil :ring t :neck neck :lidar lidar :mag-joint mag-joint))
	 (bclb (kxr-joint-base-arms-bodyset))
	 (bcrb (kxr-joint-base-arms-bodyset))
	 (bclf (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand))
	 (bcrf (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand))
	 (h (if battery-stand -28.5 -22))
	 l (c (or (get b0 :back-pack-top) (make-cascoords))))
    (cond
      (base-a
       (send bclf :rotate pi :z :world)
       (setq bcrf (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand :flag t))
       (send bcrf :rotate pi :z :world))
      (t
       (setq bcrf (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand :flag t))
       (setq bclf (kxr-wheel-servo-bodyset :base-a base-a :servo-stand servo-stand :flag nil))
       ))
    (send bclb :locate (float-vector -43.5 33 (+ 3 h)) :world)
    (send bclf :locate (float-vector 43.5 33 h) :world)
    (send bcrf :locate (float-vector 43.5 -33 h) :world)
    (send bcrb :locate (float-vector -43.5 -33 (+ 3 h)) :world)
    (dolist (b (list bclb bclf bcrf bcrb)) (send b0 :assoc b))
    (if battery-stand (send b0 :translate #f(0 0 -8) :world)
	(send b0 :translate #f(0 0 -1) :world))
    (setq l (kxr-bodyset-create
	     (append (send b0 :bodies)
		     (send bclb :bodies)
		     (send bclf :bodies)
		     (send bcrf :bodies)
		     (send bcrb :bodies))))
    (setf (get l :lmarm) (get bclf :upper-coord))
    (setf (get l :rmarm) (get bcrf :upper-coord))
    (setf (get l :lleg) (get bclb :joint-coord))
    (setf (get l :rleg) (get bcrb :joint-coord))
    (setf (get l :neck) (get b0 :neck))
    (setf (get l :torso) (get b0 :torso))
    (setf (get l :back-pack-top) c)
    (dolist (a '(:neck :torso :lmarm :rmarm :lleg :rleg :back-pack-top))
      (if (get l a) (send l :assoc (get l a))))
    l))

(defun kxr-l4ow-bodyset (&key (base-a t) battery-stand lidar mag-joint magmodule neck neck-front)
  (let* ((b0 (kxr-battery-torso-bodyset
	      :wide battery-stand :half nil :top-plate nil :backpack nil :magmodule magmodule
	      :battery-box (null neck) :leg-plate (null neck) :neck-front neck-front
	      :back-pack-rotate nil :ring t :neck neck :lidar lidar :mag-joint mag-joint))
	 (bclb (kxr-wheel-servo-bodyset :base-a nil :servo-stand t :flag t))
	 (bclf (kxr-wheel-servo-bodyset :base-a t :servo-stand t :flag t))
	 (bcrf (kxr-wheel-servo-bodyset :base-a t :servo-stand t))
	 (bcrb (kxr-wheel-servo-bodyset :base-a nil :servo-stand t))
	 (h (if battery-stand -28.5 -22))
	 ld b1 l (c (or (get b0 :back-pack-top) (make-cascoords))))
    (send bclb :rotate pi :z :world)
    (send bcrb :rotate pi :z :world)
    (send bclb :locate (float-vector 11 33 h) :world)
    (send bcrb :locate (float-vector 11 -33 h) :world)
    (send bclf :locate (float-vector 43.5 0 h) :world)
    (send bcrf :locate (float-vector -43.5 0 h) :world)
    (send bclf :rotate -pi/2 :z :world)
    (send bcrf :rotate -pi/2 :z :world)
    (dolist (b (list bclb bclf bcrf bcrb)) (send b0 :assoc b))
    (if battery-stand (send b0 :translate #f(0 0 -8) :world)
	(send b0 :translate #f(0 0 -1) :world))
    (setq l (kxr-bodyset-create 
	     (append (send b0 :bodies) (send bclb :bodies) (send bclf :bodies)
		     (send bcrf :bodies) (send bcrb :bodies))))
    (setf (get l :lmarm) (get bclf :upper-coord))
    (setf (get l :rmarm) (get bcrf :upper-coord))
    (setf (get l :lleg) (get bclb :upper-coord))
    (setf (get l :rleg) (get bcrb :upper-coord))
    (setf (get l :neck) (get b0 :neck))
    (setf (get l :torso) (get b0 :torso))
    (setf (get l :back-pack-top) c)
    (dolist (a '(:neck :torso :lmarm :rmarm :lleg :rleg :back-pack-top))
      (if (get l a) (send l :assoc (get l a))))
    l))

(defun kxr-servo-supporter-bodyset nil
  (let* ((b0 (kxr-servo-s3301))
	 (b2 (kxr-arm-supporter-b))
	 l (c (get b0 :upper-coord)))
    (send b0 :rotate pi :x)
    (send b0 :rotate pi :z :world)
    (send b2 :rotate pi/2 :y)
    (send b2 :locate #f(0 0 -13) :world)
    (send b0 :assoc b2)
    (send b0 :locate #f(0 0 -13) :world)
    (setq l (kxr-bodyset-create (list b0 b2) c))
    (send l :put :upper-coord (get b0 :upper-coord))
    (send l :assoc (get l :upper-coord))
    l))

(defun kxr-servo-bottom-supporter-bodyset (&key align flip-axis rotate-z rotate-y
					     (bottom-spacer t))
  (let ((b0 (kxr-servo-supporter-bodyset))
	b1 blist l (c (make-cascoords)))
    (setq c (get b0 :joint-coord))
    (setq blist (send b0 :bodies))
    (cond
      (bottom-spacer
       (setq b1 (kxr-bottom-spacer))
       (send b1 :rotate pi :z)
       (send b1 :rotate pi/2 :y :world)
       (if align
	   (send b1 :locate #f(-21 0 0) :world)
	   (send b1 :rotate pi :z :world))
       (send b1 :assoc c)
       (dolist (b blist) (send b1 :assoc b))
       (if align
	   (send b1 :locate #f(-21 0 -6.5) :world)
	   (send b1 :locate #f(21 0 -6.5) :world))
       (setq l (kxr-bodyset-create (cons b1 blist) c)))
      (t 
       (send b0 :locate #f(10.5 0 0) :world)
       (setq l (kxr-bodyset-create blist c))))
    (if (memq flip-axis '(:x :y :z)) (send l :rotate pi flip-axis))
    (if rotate-z (send l :rotate rotate-z :z :world))
    (if rotate-y (send l :rotate rotate-y :y :world))
    l))

(defun kxr-servo-bottom-spacer-bodyset (&key align flip-axis rotate-z rotate-y)
  (let* ((b0 (kxr-servo-s3301))
	 (b1 (kxr-bottom-spacer))
	 l (c (get b0 :upper-coord))
	 blist)
    (send b0 :rotate pi :x)
    (send b0 :rotate pi :z :world)
    (send b0 :locate #f(0 0 -13) :world)
    (send b1 :rotate pi :z)
    (send b1 :rotate pi/2 :y :world)
    (if align
	(send b1 :locate #f(-21 0 0) :world)
      (send b1 :rotate pi :z :world))
    (send b1 :assoc c)
    (dolist (b blist) (send b1 :assoc b))
    (send b1 :assoc b0)
    (if align
	(send b1 :locate #f(-21 0 -6.5) :world)
      (send b1 :locate #f(21 0 -6.5) :world))
    (setq l (kxr-bodyset-create (list b1 b0) c))
    (send l :put :upper-coord (get b0 :upper-coord))
    (send l :assoc (get l :upper-coord))
    (if (memq flip-axis '(:x :y :z)) (send l :rotate pi flip-axis))
    (if rotate-z (send l :rotate rotate-z :z :world))
    (if rotate-y (send l :rotate rotate-y :y :world))
    l))

(defun kxr-dual-servo-bodyset (&optional (plate-thickness 2))
  (let* ((b0 (kxr-servo-s3301))
	 (b1 (kxr-servo-s3301))
	 (b2 (kxr-joint-base))
	 (pl1 (if (= plate-thickness 2) (kxr-dual-servo-plate2) (kxr-dual-servo-plate5)))
	 (pl2 (if (= plate-thickness 2) (kxr-dual-servo-plate2) (kxr-dual-servo-plate5)))
	 (la (make-cascoords)) (ra (make-cascoords)) l (c (make-cascoords)))
    (send b0 :rotate pi/2 :-x :world)
    (send b0 :rotate pi/2 :y :world)
    (send b0 :locate #f(-13 0 23.5) :world)
    (send b1 :rotate pi/2 :x :world)
    (send b1 :rotate pi/2 :y :world)
    (send b1 :locate #f(13 0 23.5) :world)
    (send c :locate #f(0 0 3) :world)
    (send b2 :assoc c)
    (send b2 :locate #f(0 0 35) :world)
    (send pl1 :locate #f(0 -13 0) :world)
    (send pl2 :rotate pi :z :world)
    (send pl2 :locate #f(0 13 0) :world)
    (send ra :locate (float-vector 0 (- (+ 19 plate-thickness)) 9) :world)
    (send la :locate (float-vector 0 (+ 19 plate-thickness) 9) :world)
    (setq l (kxr-bodyset-create (list b2 b0 b1 pl1 pl2) c))
    (send l :put :lleg la)
    (send l :put :rleg ra)
    (send l :assoc la)
    (send l :assoc ra)
    l))

(defun kxr-dyp-chest-frame-bodyset-aux (b1 bp) ;; b1 :back-pack
  (let ((b0 (kxr-dyp-chest-base-plate))
	(s0 (kxr-dyp-chest-side-plate))
	(s1 (kxr-dyp-chest-side-plate))
	(a0 (kxr-dyp-chest-shoulder-arm))
	(a1 (kxr-dyp-chest-shoulder-arm))
	l (c (make-cascoords)))
    (send b1 :assoc bp)
    (send b1 :locate #f(-45 0 25) :world)
    (send b0 :locate #f(0 0 3) :world)
    (send b0 :assoc b1)
    (send s0 :locate (float-vector 0 30 7))
    (send s1 :locate (float-vector 0 -30 7))
    (send a0 :locate (float-vector 0 27 40))
    (send a1 :rotate pi :z :world)
    (send a1 :locate (float-vector 0 -27 40) :world)
    (setq l (kxr-bodyset-create (list b0 b1 s0 s1 a0 a1) c))
    (setf (get l :back-panel) bp)
    (send l :assoc bp)
    l))

(defun kxr-dyp-chest-frame-bodyset nil
  (kxr-dyp-chest-frame-bodyset-aux (kxr-small-back-pack)
				   (make-cascoords :pos #f(-23 0 0))))

;; for kxrl2makabeorig (diff: without gyro sensor)
(defun kxr-dyp-chest-frame-bodyset-orig nil
  (kxr-dyp-chest-frame-bodyset-aux (kxr-small-back-pack-orig)
				   (make-cascoords :pos #f(-23 0 0))))

;; for kxrl2makaberaspi (diff: backpack size)
(defun kxr-dyp-chest-frame-bodyset2 nil
  (kxr-dyp-chest-frame-bodyset-aux (kxr-raspi-back-pack)
				   (make-cascoords :pos #f(-25 0 0))))

(defun kxr-joint-base-a-servo-bodyset (&key flag side apply-list sensor horn)
  (let* ((bod (kxr-joint-frame-base-a-bodyset :sensor sensor))
	 (s (kxr-servo-s3301))
	 (c (get s :upper-coord))
	 (o (get s :joint-coord))
	 (h (if sensor 6 0))
	 l)
    (send s :assoc c)
    (send s :assoc o)
    (if flag (send s :rotate pi :x :world))
    (send s :rotate pi/2 :y :world)
    (if side (send s :rotate pi/2 :x :world))
    (if side
	(send s :locate (float-vector 0 -10.5 (+ 9 10.5 h)) :world)
	(send s :locate (float-vector 0 0 (+ 9 21 h)) :world))
    (send bod :assoc s)
    (send bod :rotate pi/2 :z)
    (dolist (al apply-list) (send* bod al))
    (setq l (kxr-bodyset-create (append (send bod :bodies) (list s)) c))
    (send l :put :upper-coord c)
    (send l :assoc c)
    (send l :put :joint-coord o)
    (send l :assoc o)
    l))

(defun kxr-joint-base-b-servo-bodyset (&optional flag &key sensor)
  (let* ((bod (kxr-joint-frame-base-b-bodyset :sensor sensor))
	 l (s (kxr-servo-s3301))
	 (c (get s :upper-coord))
	 (h (if sensor 6 0))
	 (o (get s :joint-coord)))
    (send s :assoc c)
    (send s :assoc o)
    (if flag (send s :rotate pi :x :world))
    (send s :rotate pi/2 :-z :world)
    (send s :rotate pi/2 :y :world)

    (send s :locate (float-vector 0 0 (+ 10.5 9 h)) :world)
    (send bod :assoc s)
    (send bod :rotate pi/2 :z)
    (setq l (kxr-bodyset-create (append (send bod :bodies) (list s)) c))
    (send l :put :upper-coord c)
    (send l :assoc c)
    (send l :put :joint-coord o)
    (send l :assoc o)
    l))

(defun kxr-joint-base-c-servo-bodyset (&key flag servo-stand flip)
  (let* ((bod (kxr-joint-frame-base-b-bodyset))
	 l (s (kxr-servo-s3301))
	 (c (get s :upper-coord))
	 (o (get s :joint-coord)))
    (send s :assoc c)
    (send s :assoc o)
    (if flag (send s :rotate pi :x :world))
    (send s :rotate pi/2 :z :world)
    (send s :rotate pi/2 :-y :world)
    (cond
      (flip
       (send s :rotate pi :y :world)
       (send s :rotate pi :z :world)
       (send s :translate (float-vector 0 0 (+ 10.5 9)) :world))
      (t (send s :locate (float-vector 0 (- -10.5 9) (+ 10.5 9)) :world)))
    (when
	servo-stand
      (send s :rotate -pi/2 :x :world)
      (send s :translate #f(0 9 9) :world))
    (send bod :assoc s)
    (send bod :rotate pi/2 :z)
    (setq l (kxr-bodyset-create (append (send bod :bodies) (list s)) c))
    (send l :put :upper-coord c)
    (send l :assoc c)
    (send l :put :joint-coord o)
    (send l :assoc o)
    l))

(defun kxr-servo-frame-base-a-bodyset (&key sensor sensor-z-rotation upside-down)
  (let* ((b0 (kxr-servo-s3301))
	 (b1 (kxr-joint-frame-base-a-bodyset :sensor sensor :sensor-z-rotation sensor-z-rotation
					     :upside-down upside-down))
	 (s  (find-named-body "KJS" (send b1 :bodies) :test 'substringp))
	 (h (if s (send s :z-height) 5.5)) ;; 0 -> 10.5 -> 5.5
	 (c (make-cascoords)))
    (send b0 :rotate pi/2 :y)
    (send b0 :rotate pi/2 :z :world)
    (send b1 :rotate pi/2 :z)
    (send b1 :locate (float-vector 0 0 (- (+ 21 9 (- h 6)))) :world)
    (send b0 :assoc b1)
    (kxr-bodyset-create (cons b0 (send b1 :bodies)) (get b1 :joint-coord))))

(defun kxr-finger-palm-bodyset (&key sensor sensor-z-rotation attachment)
  (let* ((b0 (kxr-sensor-joint-base sensor :flip (member :flip sensor)))
	 (c1 (kxr-finger-palm1))
	 (c2 (kxr-finger-palm2))
	 blist)
    (when attachment
      (if (eq-memq :larm attachment)
	  (setq attachment (rcube-lfinger))
	(setq attachment (rcube-rfinger)))
      (if sensor-z-rotation
	  (send attachment :rotate sensor-z-rotation :-z :world))
      (send attachment :translate #f(0 0 -3) :world)
      (send b0 :assoc attachment)
      (push attachment blist)
      )
    (send b0 :translate (float-vector 0 5 0) :world)
    (when sensor
      (send b0 :rotate pi :x)
      (if (eq-memq :rev-a sensor)
	  (send b0 :translate (float-vector 0 0 (- 11 3)))
	(send b0 :translate (float-vector 0 0 (- 16 3)))))
    (if sensor-z-rotation (send b0 :rotate sensor-z-rotation :z))
    (setq blist (append (list b0 c1 c2) blist))
    (kxr-bodyset-create blist)))

(defun kxr-pgripper-bodyset (&key sensor sensor-z-rotation)
  (let* ((b0 (kxr-sensor-joint-base sensor :flip (member :flip sensor)))
	 (c0 (kxr-pgripper)))
    (when sensor
      (send b0 :rotate pi :x)
      (if (eq-memq :rev-a sensor)
	  (send b0 :translate (float-vector 0 0 (- 11 3)))
	(send b0 :translate (float-vector 0 0 (- 16 3)))))
    (if sensor-z-rotation (send b0 :rotate sensor-z-rotation :z))
    (kxr-bodyset-create (list b0 c0))))

(defun kxr-operation-stand (&key (offset -50) (thickness 20) (bar-length 150)
			      (front 200) (back 150) (depth 150) (height 200))
  (let* ((t/2 (/ thickness 2)) (b/2 (/ back 2))
	 (f/2 (/ front 2)) (d/2 (/ depth 2))
	 (h/2 (/ height 2)) (stage bar-length) (s/2 (/ stage 2))
	 (bbar (make-cube thickness back thickness))
	 (fbar (make-cube thickness front thickness))
	 (dbar (make-cube depth thickness thickness))
	 (hbar (make-cube thickness thickness height))
	 (sbar (make-cube stage thickness thickness))
	 (scoord (make-cascoords :pos (float-vector (- s/2 t/2) 0 t/2)))
	 l)
    (send bbar :locate (float-vector (- 0 t/2 d/2) 0 t/2) :world)
    (send fbar :locate (float-vector (+ t/2 d/2) 0 t/2) :world)
    (send dbar :locate (float-vector 0 0 t/2) :world)
    (send hbar :locate (float-vector (/ s/2 -2) 0 (+ h/2 thickness)) :world)
    (send sbar :assoc scoord)
    (send sbar :locate (float-vector 0 0 (+ height thickness t/2)) :world)
    (setq l (kxr-bodyset-create (list bbar fbar dbar hbar sbar)))
    (setf (get l :joint-coord) scoord)
    (send l :assoc (get l :joint-coord))
    (send l :translate (float-vector offset 0 0) :world)
    l)
  )

(defun kxr-swing-bar (&key (length 700) (seat 200) (thickness 20)
			(string-thickness 5))
  (let* ((t/2 (/ thickness 2))
	 (s/2 (/ seat 2))
	 (l/2 (/ length 2))
	 (sbar (make-cube thickness seat thickness))
	 (lbar (make-cube string-thickness string-thickness length))
	 (rbar (make-cube string-thickness string-thickness length))
	 l)
    (send sbar :locate (float-vector 0 0 (- length)) :world)
    (send lbar :locate (float-vector 0 (- s/2) (- l/2)) :world)
    (send rbar :locate (float-vector 0 (+ s/2) (- l/2)) :world)
    (setq l (kxr-bodyset-create (list sbar lbar rbar)))
    )
  )

(defun kxr-swing-stand (&key (thickness 20) (width 400) (depth 550) (height 1000))
  (let* ((t/2 (/ thickness 2))
	 (w/2 (/ width 2)) (d/2 (/ depth 2))
	 (h/2 (/ height 2))
	 (fbar (make-cube thickness width thickness))
	 (bbar (make-cube thickness width thickness))
	 (lbar (make-cube depth thickness thickness))
	 (rbar (make-cube depth thickness thickness))
	 (hlbar (make-cube thickness thickness height))
	 (hrbar (make-cube thickness thickness height))
	 (hbar (make-cube thickness width thickness))
	 l)
    (send bbar :locate (float-vector (- 0 t/2 d/2) 0 t/2) :world)
    (send fbar :locate (float-vector (+ t/2 d/2) 0 t/2) :world)
    (send rbar :locate (float-vector 0 (- w/2 t/2) t/2) :world)
    (send lbar :locate (float-vector 0 (- t/2 w/2) t/2) :world)
    (send hrbar :locate (float-vector 0 (- w/2 t/2) (+ h/2 thickness)) :world)
    (send hlbar :locate (float-vector 0 (- t/2 w/2) (+ h/2 thickness)) :world)
    (send hbar :locate (float-vector 0 0 (+ height thickness t/2)) :world)
    (setq l (kxr-bodyset-create (list bbar fbar rbar lbar hlbar hrbar hbar)))
    l)
  )
(defun kxr-swing1 nil
  (kxr-swing-bar :length 400 :seat 150 :thickness 20)
  (kxr-swing-stand :width 380 :height 520 :depth 350 :thickness 20))
  
(defun kxr-swing2 nil
  (kxr-swing-bar :length 500 :seat 150 :thickness 20)
  (kxr-swing-stand :width 380 :height 700 :depth 350 :thickness 20))


(reset-new-defun)
(provide :kxrbodyset)
