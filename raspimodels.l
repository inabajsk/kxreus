;;;
;;; 2022.9.2
;;;
(provide :raspimodels)

(defun usb-micro-b (pos)
  (let ((b (make-cube 6 8 3 :pos pos)))
    (send b :set-color #f(0.9 0.9 0.9))
    b)
  )
(defun pisugar-board nil
  (stl2eus "stls/pisugar2Board-light.STL" :scale 1))
(defun raspi-zero-2-w nil
  (let ((bod (make-fillet-cube 30 65 1.5 2))
	(hole (make-cylinder 1.4 10))
	(usb-p (usb-micro-b (float-vector 14 20 2.2)))
	(usb-c (usb-micro-b (float-vector 14 6 2.2)))
	(hdmi (make-cube 8 11 4 :pos (float-vector 12 -21 3)))
	(sdcard (make-cube 12 11 1 :pos (float-vector -2 -26 2)))
	(camera (make-cube 17 4 1 :pos (float-vector 0 30 1.5)))
	(wifi (make-cube 12 12 1.8 :pos (float-vector 0 10 2)))
	(cpu (make-cube 15 15 1.2 :pos (float-vector 0 -7.5 2)))
	(pin40 (make-cube 5 51 8 :pos (float-vector -12 0 5)))
	blist bs)
    (send cpu :set-color #f(0.2 0.2 0.2))
    (send pin40 :set-color #f(0.2 0.2 0.2))    
    (send camera :set-color #f(0.9 0.9 0.9))        
    (send-all (list hdmi sdcard wifi) :set-color #f(0.7 0.7 0.7))
    (dolist (p (list '(11.5 29) '(11.5 -29) '(-11.5 -29) '(-11.5 29)))
      (send hole :locate (float-vector (car p) (cadr p) -5) :world)
      (setq bod (body- bod hole)))
    (setq blist (list usb-p usb-c hdmi sdcard camera wifi cpu pin40))
    (dolist (b blist) (send bod :assoc b))
    (send bod :locate #f(0 0 1) :world)
    (setq bs (instance bodyset :init (make-cascoords)
		       :bodies (cons bod blist)))
    bs))
(defun raspi-lcd nil
  (let ((bod (make-fillet-cube 30 65 1.5 2))
	(hole (make-cylinder 1.4 10))
	(pin40 (make-cube 5 51 8 :pos (float-vector -12 0 5)))
	(lcd (make-cube 30 37 2))
	blist bs)
    (send pin40 :set-color #f(0.2 0.2 0.2))    
    (send lcd :locate #f(0 0 -1.5))
    (send lcd :set-color #f(0.9 0.9 0.9))
    (dolist (p (list '(11.5 29) '(11.5 -29) '(-11.5 -29) '(-11.5 29)))
      (send hole :locate (float-vector (car p) (cadr p) -5) :world)
      (setq bod (body- bod hole)))
    (setq blist (list pin40 lcd))
    (dolist (b blist) (send bod :assoc b))
    (send bod :locate #f(0 0 1) :world)
    (setq bs (instance bodyset :init (make-cascoords)
		       :bodies (cons bod blist)))
    bs))

