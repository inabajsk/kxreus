;;;
;;; 2021.3.22 created. moved from kxrbody.l
;;;
(provide :m5models)

(require :utils)
(require :kxrlinks)
;;(require :read-stl)
;;(require :read-wrl)
(require :raspimodels)

(defun kxr-lidar (&key base)
  (let* ((b (make-fillet-cube 38 38 22 4))
	 (cyl (make-cylinder (/ 35 2.0) 15)))
    (send b :locate #f(0 0 11) :world)
    (send cyl :locate #f(0 0 20) :world)
    (setq b (body+ b cyl))
    (when base
      (setq base (make-cube 40 92 10))
      (send b :locate #f(0 0 4) :world)
      (setq b (body+ base b))
      (send b :locate #f(0 0 5) :world)
      )
    (if base
	(setq b (kxr-make-kxr-body "lidar-ld19-with-base" b b nil))
	(setq b (kxr-make-kxr-body "lidar-ld19" b b nil)))
    ))
(defun kxr-m5-irsensor-head-bodyset (&optional b-a)
  (let ((b (kxr-irsensor-head))
	(a (kxr-bottom-arm26))
	(m5 (kxr-m5head-horizontal-bodyset))
	l (c (make-cascoords)))
    (send b :move-named-coords "baseh0" a "downh2")
    (send a :locate #f(13 0 -3))
    (setq l (kxr-bodyset-create (append (list a b) (send m5 :bodies)) c))
    (dolist (c (get a :cameras)) (send l :assoc c))
    (send l :put :cameras (get a :cameras))
    l))

;;
(defun jetson-camera-bodyset nil
  (let* ((g (make-gdome (make-gdome (make-gdome (make-icosahedron 15.5)))))
	 (blist (list g))
	 l 
	 (cam (make-cascoords))
	 (j (make-cascoords)) holes)
    (send g :assoc cam)
    ;;(send g :locate #f(0 0 0) :world)
    (send cam :rotate pi/2 :z)
    (send cam :rotate pi/2 :y)
    (send cam :translate #f(10 0 0) :world)
    (setq l (kxr-bodyset-create blist j holes))
    (send l :assoc cam)
    (setf (get cam :lens-angle) 65)
    (send l :put :cameras (list cam))
    (send l :put :weight 24)
    l
    ))
;;
(defun m5stamp-eye-bodyset-old ()
  (let* ((b (make-cube 42 42 16))
	 (cyl (make-cylinder 17.5 2 :segments 36))
	 (cyl- (make-cylinder 18 10 :segments 36))
	 l blist
	 (j (make-cascoords))
	 holes
	 (cam (make-cascoords)))
    (send cyl- :locate #f(0 0 6) :world)
    (setq b (body- b cyl-))
    (send cyl :locate #f(0 0 5) :world)
    (send cyl :set-color :black)
    (send b :assoc cyl)
    (send b :rotate pi/2 :y :world)
    (send b :set-color :white)
    (send cam :rotate pi/2 :z)
    (send cam :rotate pi/2 :y)
    (send cam :translate #f(8 0 0) :world)
    ;;
    (setq blist (list b cyl))
    (setq l (kxr-bodyset-create blist j holes))
    (send l :assoc cam)
    (setf (get cam :lens-angle) 65)
    (send l :put :cameras (list cam))
    (send l :put :weight 8)
    l
    ))

(defun m5stamp-leye-iris-bodyset ()
  (m5stamp-eye-bodyset "imgs/iris_right.jpg"))

(defun m5stamp-reye-iris-bodyset ()
  (m5stamp-eye-bodyset "imgs/iris_right.jpg"
		       (list
			(float-vector 1 0)
			(float-vector 1 1)
			(float-vector 0 1)
			(float-vector 0 0)))
  )

(defun m5stamp-leye-happy-bodyset ()
  (m5stamp-eye-bodyset "imgs/upperlid_happy_left.jpg"))
(defun m5stamp-reye-happy-bodyset ()
  (m5stamp-eye-bodyset "imgs/upperlid_happy_right.jpg"))
(defun m5stamp-leye-outline-bodyset ()
  (m5stamp-eye-bodyset "imgs/eye_outline_left_resized.jpg"))
(defun m5stamp-reye-outline-bodyset ()
  (m5stamp-eye-bodyset "imgs/eye_outline_left_resized.jpg"))

(defun m5stamp-eye-bodyset (&optional file vs)
  (let* ((b (make-cube 42 42 16))
	 (c (make-cube 36 36 10))
	 (cyl- (make-cylinder 18 10 :segments 36))
	 (j (make-cascoords))
	 holes f l blist
	 (cam (make-cascoords)))
    (setq b (body- b cyl-))
    (send b :set-color :gray)
    (send c :rotate pi :z)
    (send c :set-color :black)
    (when (and file (probe-file file))
      (setq f (car (send c :get-face nil :top)))
      (send c :paste-texture-to-face f :file file
	    :tex-coords (or vs (list (float-vector 0 0)
				     (float-vector 0 1)
				     (float-vector 1 1)
				     (float-vector 1 0)
				     )))
      )
    (send b :assoc c)
    (send b :rotate pi/2 :y :world)
    (send cam :rotate pi/2 :z)
    (send cam :rotate pi/2 :y)
    (send cam :translate #f(8 0 0) :world)
    ;;
    (setq blist (list b c))
    (setq l (kxr-bodyset-create blist j holes))
    (send l :assoc cam)
    (setf (get cam :lens-angle) 65)
    (send l :put :cameras (list cam))
    (send l :put :weight 8)
    l
    ))
  )
;;
(defun m5atom-echo-bodyset nil
  (let* ((b (make-fillet-cube 24 24 17 2))
	 (g-  (make-cube 5 10 14))
	 (g+  (make-cube 5 10 6))
	 (g-- (make-cube 4 8 12))
	 (g--- (make-cube 6 5 4))
	 (u- (make-cube 2.5 8 12))
	 (u (make-cube 2.5 8 6))
	 (u+ (make-cube 1 6 6.1))
	 l blist
	 (j (make-cascoords))
	 (holes
	  (list (list "baseh0" #f(-6 0 0) :z 3 8)))
	 (cam (make-cascoords)))
    (send b :rotate pi/2 :y)
    (send b :locate (float-vector 0 0 12) :world)
    (send g--- :locate #f(8 0 0) :world)
    (send g- :locate #f(5 0 0) :world)
    (setq g+ (body- g+ g--))
    (send g+ :locate #f(5 0 3) :world)
    (setq g+ (body- g+ g---))
    (send u- :locate #f(0.5 0 0) :world)
    (send u  :locate #f(0.5 0 3) :world)
    (send u+ :locate #f(0.5 0 3) :world)
    (send u+ :set-color :black)
    (setq b (body- b g-))
    (setq b (body- b u-))
    (send b :set-color :beige)
    (setq b (kxr-make-kxr-body "m5atom-echo-b" b b nil))
    (setq g+ (kxr-make-kxr-body "m5atom-echo-g+" g+ g+ nil))
    (setq u (kxr-make-kxr-body "m5atom-echo-u" u u nil))
    (setq u+ (kxr-make-kxr-body "m5atom-echo-u+" u+ u+ nil))
    (send cam :rotate pi/2 :z)
    (send cam :rotate pi/2 :y)
    (send cam :translate #f(10 0 0) :world)
    ;;
    (setq blist (list b g+ u u+))
    (setq l (kxr-bodyset-create blist j holes))
    (send l :assoc cam)
    (setf (get cam :lens-angle) 65)
    (send l :put :cameras (list cam))
    (send l :put :weight 24)
    l
    ;;(objects (list b b+ c w g+ u u+))
    ))
  )
;;
(defun m5stickv-bodyset (&key (name (format nil "M5stickv"))) ;; (cone t)
  (let* ((b (make-fillet-cube 48 24 22 2))
	 #|
	 (b (make-prism
	 (list (float-vector 11 12 0)
	 (float-vector 11 -12 0)
	 (float-vector -11 -12 0)
	 (float-vector -11 12 0))
	 (float-vector 0 0 48)))
	 |#
	 (w (make-cube 2.5 12 6))
	 (b- (make-cube 10 15 25))
	 (b+ (make-cube 2 15 25))
	 (c (make-cylinder 4 11))
	 (c- (make-cylinder 4.5 10))
	 (g-  (make-cube 5 10 14))
	 (g+  (make-cube 5 10 6))
	 (g-- (make-cube 4 8 12))
	 (g--- (make-cube 6 5 4))
	 (u- (make-cube 2.5 8 12))
	 (u (make-cube 2.5 8 6))
	 (u+ (make-cube 1 6 6.1))
	 l blist
	 (j (make-cascoords))
	 (holes
	  (list (list "baseh0" #f(-6 0 0) :z 3 8)))
	 cam)
    (send b :rotate pi/2 :y)
    (send b :locate (float-vector 0 0 24) :world)
    (send g--- :locate #f(8 0 0) :world)
    (send g- :locate #f(5 0 0) :world)
    (setq g+ (body- g+ g--))
    (send g+ :locate #f(5 0 3) :world)
    (setq g+ (body- g+ g---))
    (send u- :locate #f(0.5 0 0) :world)
    (send u  :locate #f(0.5 0 3) :world)
    (send u+ :locate #f(0.5 0 3) :world)
    (send u+ :set-color :black)
    (setq b (body- b g-))
    (setq b (body- b u-))
    (send c- :rotate pi/2 :y)
    (send c- :locate (float-vector 5 0 32) :world)
    (send b- :locate (float-vector -14 0 30) :world)
    (send b+ :locate (float-vector -9 0 30) :world)
    (send b+ :set-color :black)
    (setq b (body- b b-))
    (setq b (body- b c-))
    (send c :rotate pi/2 :y)
    (send c :locate (float-vector 0 0 32) :world)
    (send c :set-color :black)
    (send b :set-color #f(0.2 0.6 0.8))
    (send w :locate #f(10 0 42) :world)
    ;;(send w :set-color :whitesmoke)
    (send w :set-color :lightblue)
    (setq b (kxr-make-kxr-body "m5stickv-b" b b nil))
    (setq b+ (kxr-make-kxr-body "m5stickv-b+" b+ b+ nil))
    (setq c (kxr-make-kxr-body "m5stickv-c" c c nil))
    (setq w (kxr-make-kxr-body "m5stickv-w" w w nil))
    (setq g+ (kxr-make-kxr-body "m5stickv-g+" g+ g+ nil))
    (setq u (kxr-make-kxr-body "m5stickv-u" u u nil))
    (setq u+ (kxr-make-kxr-body "m5stickv-u+" u+ u+ nil))
    (setq cam (make-cascoords :coords (send c :copy-worldcoords)))
    (send cam :rotate pi/2 :z)
    (send cam :rotate pi/2 :y)
    (send cam :translate #f(10 0 0) :world)
    ;;
    (setq blist (list b b+ c w g+ u u+))
    #|
    (when cone
      (send cone :rotate pi/2 :z :world)
      (send cone :rotate pi/2 :y :world)
      (send cone :locate (send cam :worldpos) :world)
      ;;    (setq cone (kxr-make-kxr-body "m5stickv-cone" cone cone nil))
      (setf (get cone :face-color) :gray)
      (gl::transparent cone 0.2)
      (setq blist (append blist (list cone)))
      (send cam :assoc cone)
      )
    |#
    (setq l (kxr-bodyset-create blist j holes))
    (send l :assoc cam)
    (setf (get cam :lens-angle) 65)
    (send l :put :cameras (list cam))
    (send l :put :weight 24)
    l
    ;;(objects (list b b+ c w g+ u u+))
    ))

(defun LEGO-Bar-15L () (lego-bar-nl 15))
(defun LEGO-Bar-13L () (lego-bar-nl 13))
(defun LEGO-Bar-9L () (lego-bar-nl 9))
(defun LEGO-Bar-3L () (lego-bar-nl 3))
(defun LEGO-Bar-nL (&optional (n 9) (name (format nil "lego-bar-~Al" n)))
  (let* ((l (+ (* n 8) (- 71.5 64 8)))
	 (h 7.9)
	 (b (make-fillet-cube 7.4 l h 2.5))
	 (sbod b)
	 (c- (make-cylinder 2.5 12))
	 holes y)
    (dotimes (i n)
      (setq y (* (- i (/ n 2)) 8))
      (push (list (format nil "up~A" i) (float-vector 0 y (/ h 2)) :-z 2.5 h) holes)
      (push (list (format nil "down~A" i) (float-vector 0 y (/ h -2)) :z 2.5 h) holes)
      (send c- :locate (float-vector 0 y -5) :world)
      (setq b (body- b c-)))
    (send b :put :weight 4.0)
    (setq b (kxr-make-kxr-body name sbod b holes))
    b))

(defun M5UnitV-bodyset nil
  (let* ((b (make-fillet-cube 40 24 8 2))
	 (sbod b)
	 (h- (make-cylinder 2.5 10))
	 (s (make-cube 12 12 4))
	 (c (make-cylinder 4.5 8))
	 (cam (make-cascoords :pos #f(0 0 8) :name "m5unitv"))
	 (c- (make-cylinder 4 12))
	 (c+ (make-cylinder 3.5 8))
	 (j (make-cascoords))
	 (holes
	  (list
	   (list "basef0" #f(-4 8 12) :x 2 8)
	   (list "basef1" #f(-4 -8 12) :x 2 8)
	   (list "baseb0" #f(4 8 12) :-x 2 8)
	   (list "baseb1" #f(4 -8 12) :-x 2 8)
	   )))
    (send cam :rotate -pi/2 :x)
    (send cam :rotate pi/2 :z)
    (send s :locate #f(-12 0 -4) :world)
    (setq b (body+ b s))
    (send c :assoc cam)
    (send c :locate #f(-12 0 -8) :world)
    (setq b (body+ b c))
    (send b :assoc cam)
    (send c- :locate #f(-12 0 -10) :world)
    (setq b (body- b c-))
    (send b :assoc cam)
    (send c+ :locate #f(-12 0 -8) :world)
    (send c+ :set-color :black)
    (setq c+ (kxr-make-kxr-body "m5unitv-cam" c+ c+ nil))
    (setq sbod b) 
;;    (setq b (body+ b c+))
    (send h- :locate #f(8 8 -5) :world)
    (setq b (body- b h-))
    (send b :assoc cam)
    (send h- :locate #f(8 -8 -5) :world)
    (setq b (body- b h-))
    (send b :assoc cam)
    (send b :assoc c+)
    (send sbod :assoc c+)
    (send b :rotate pi/2 :y :world)
    (send sbod :rotate pi/2 :y :world)
    (send b :locate (float-vector 0 0 20) :world)
    (send sbod :locate (float-vector 0 0 20) :world)
    (send b :put :weight 15.4)
    (send b :set-color #f(0.2 0.6 0.8))
    (send b :worldcoords)
    (send sbod :worldcoords)
    (setq b (kxr-make-kxr-body "m5unitv-frame" sbod b nil))
    (setq b (kxr-bodyset-create (list b c+) j holes))
    (send b :put :camera cam)
    (send b :assoc cam)
    b))

(defun M5UnitV2-bodyset (&key (lego t)) ;; (cone t) (fish t))
  (let* ((b (make-fillet-cube 48 24 21 2))
	 (sbod b)
	 (s (make-fillet-cube 22 18 8 2))
	 (s1 (make-fillet-cube 31 24 8 2))
	 l0 l1
	 (cam (make-cascoords :pos #f(0 0 8) :name "m5unitv2"))
	 (c- (make-cylinder 6 12))
	 (c+ (make-cylinder 7 2.5))
	 (j (make-cascoords))
	 blist
	 (holes
	  (list
	   (list "basef0" #f(12 8 30) :x 2 8)
	   (list "basef1" #f(12 -8 30) :x 2 8)
	   (list "baseb0" #f(16 8 30) :-x 2 8)
	   (list "baseb1" #f(16 -8 30) :-x 2 8)
	   )))
    (send cam :rotate -pi/2 :x)
    (send cam :rotate pi/2 :z)
    (send s :locate #f(-11.5 0 -11.5) :world)
    (send s1 :locate #f(-8.5 0 -6.5) :world)    
    (send s :worldcoords)
    (send s1 :worldcoords)
    (setq s (convex-hull-3d (append (send s :vertices) (send s1 :vertices))))
    (send s :set-color #f(0.3 0.3 0.3))
    (setq s (kxr-make-kxr-body "m5unitv2-cam-mount" s s nil))
    ;;(setq b (body+ b s))
    (send c- :assoc cam)
    (send c- :locate #f(-12 0 -21) :world)
    (setq b (body+ b c-))
    (send b :assoc cam)
    (send c+ :locate #f(-12 0 -21) :world)
    (send c+ :set-color #f(0.3 0.3 0.3))
    (setq c+ (kxr-make-kxr-body "m5unitv2-cam" c+ c+ nil))
    ;;(setq b (body+ b c+))
    ;;(setq sbod b) 
    (send b :assoc s)
    (send b :assoc c+)
    (send b :assoc cam)
    (send sbod :assoc s)
    (send sbod :assoc c+)
    (send sbod :assoc cam)
    (send b :rotate pi/2 :y :world)
    (send sbod :rotate pi/2 :y :world)
    (send b :locate (float-vector 0 0 24) :world)
    (send sbod :locate (float-vector 0 0 24) :world)
    (send b :put :weight 27.2)
    (send b :set-color #f(0.3 0.3 0.3))
    (send s :worldcoords)
    (send b :worldcoords)
    (setq b (kxr-make-kxr-body "m5unitv2-frame" sbod b nil))
    (setq blist (append (list b c+ s) blist))
    #|
    (when cone
      (setq cone (camera-zcone (if fish 150 85) 200 :gray 0.2))
      (send cone :rotate pi/2 :-y :world)
      (send cone :locate (send cam :worldpos) :world)
      ;;(setq cone (kxr-make-kxr-body "m5unitv2-cone" cone cone nil))
      (setf (get cone :face-color) :gray)
      (gl::transparent cone 0.2)
      (send b :assoc cone)
      (setq blist (append blist (list cone)))
      )
    |#
    (when
	lego
      (setq l0 (LEGO-Bar-3L))
      (setq l1 (LEGO-Bar-3L))
      (send l1 :rotate pi/2 :y :world)
      (send l1 :rotate pi/2 :x :world)
      (setq l1 (kxr-make-kxr-body "m5unitv2-l1" l1 l1 nil))
      (send l0 :rotate pi/2 :y :world)
      (send l0 :assoc l1)
      (send l0 :locate #f(14.5 0 30) :world)
      (setq l0 (kxr-make-kxr-body "m5unitv2-l0" l0 l0 nil))
      (setq blist (append blist (list l0 l1))))
    (setq b (kxr-bodyset-create blist j holes))
    (send b :put :camera cam)
    (setf (get cam :lens-angle) 150)
    (send b :assoc cam)
    b))

(defun M5UnitV2-usb-bodyset (&key (lego t))
  (let* ((b (make-fillet-cube 48 24 19 2))
	 (u (make-cube 18 18 6))
	 (sbod b)
	 (j (make-cascoords))
	 blist l0 l1
	 (holes
	  (list
	   (list "basef0" #f(12 8 30) :x 2 8)
	   (list "basef1" #f(12 -8 30) :x 2 8)
	   (list "baseb0" #f(16 8 30) :-x 2 8)
	   (list "baseb1" #f(16 -8 30) :-x 2 8)
	   )))
    (send u :locate #f(-15 0 -10.5) :world)
    (send u :worldcoords)
    (setq u (kxr-make-kxr-body "m5unitv2-usb-mount" u u nil))
    (send b :assoc u)
    (send b :rotate pi/2 :y :world)
    (send b :locate (float-vector 0 0 24) :world)
    (send sbod :locate (float-vector 0 0 24) :world)
    (send b :put :weight 19.9)
    (send b :set-color #f(0.3 0.3 0.3))
    (send u :set-color #f(0.3 0.3 0.3))
    (send u :worldcoords)
    (send b :worldcoords)
    (send sbod :worldcoords)
    (setq b (kxr-make-kxr-body "m5unitv2-usb-frame" sbod b nil))
    (setq blist (list b u))
    (when
	lego
      (setq l0 (LEGO-Bar-3L))
      (setq l1 (LEGO-Bar-3L))
      (send l1 :rotate pi/2 :y :world)
      (send l1 :rotate pi/2 :x :world)
      (setq l1 (kxr-make-kxr-body "m5unitv2-l1" l1 l1 nil))
      (send l0 :rotate pi/2 :y :world)
      (send l0 :assoc l1)
      (send l0 :locate #f(12 0 30) :world)
      (setq l0 (kxr-make-kxr-body "m5unitv2-l0" l0 l0 nil))
      (setq blist (append blist (list l0 l1))))
    (setq b (kxr-bodyset-create blist j holes))
    b))

(defun d405-head-link-org (&key (front t))
  (let ((bs (wrl2eus "stls/radxahead_asm_rev2.wrl" 1000.0))
	(lc (make-cascoords :pos #f(36 9 26)))
	(rc (make-cascoords :pos #f(36 -9 26)))	
	l)
    (send lc :rotate pi/2 :y) (send rc :rotate pi/2 :y)
    (send lc :rotate -pi/2 :z) (send rc :rotate -pi/2 :z)
    (send bs :assoc lc) (send bs :assoc rc)
    (if front (send bs :locate #f(-21 0 0) :world))
    (setq l (kxr-link-create (send bs :bodies) :joint-coord (make-cascoords :pos #f(0 0 60))))
    (send l :put :cameras (list lc rc))
    (dolist (c (get l :cameras)) (send l :assoc c))
    l))

(defun kxr-d405-aux (&optional (depth 23))
  (let* ((b0 (make-fillet-cube 42 42 9 6 :segments 4))
	 (d (- depth 9))
	 (b1 (make-fillet-cube 42 42 d 6 :segments 4))
	 (b2 (make-fillet-cube 40 40 1 6 :segments 4))
	 holes l blist
	 (cam0 (make-cylinder 4.5 1.2 :segments 16))
	 (cam1 (make-cylinder 4.5 1.2 :segments 16)))
    (send cam0 :locate (float-vector 0 9 3.5) :world)
    (send cam1 :locate (float-vector 0 -9 3.5) :world)
    (setq b0 (kxr-make-kxr-body "d405-cam" b0 b0 holes))
    (send b1 :locate (float-vector 0 0 (- (+ (/ d 2) 4.5))) :world)
    (setq b1 (kxr-make-kxr-body (format nil "d405-back-~A" d) b1 b1 holes))    
    (send b1 :set-color #f(0.6 0.6 0.6))
    (send b2 :locate (float-vector 0 0 4.1) :world)
    (send b2 :set-color #f(0.1 0.1 0.1))
    (send b0 :assoc b1) (send b0 :assoc b2)
    (send b0 :assoc cam0) (send b0 :assoc cam1)
    (send b0 :rotate pi/2 :y :world)
    (send b0 :locate (float-vector 10.5 0 21) :world)
    (setq l (kxr-bodyset-create (list b0 b1 b2 cam0 cam1) (make-cascoords) nil))
    l))

(defun kxr-d405-link ()
  (let ((bs (kxr-d405-aux 23))
	(lc (make-cascoords :pos #f(16 9 21)))
	(rc (make-cascoords :pos #f(16 -9 21)))	
	l)
    (send lc :rotate pi/2 :y) (send rc :rotate pi/2 :y)
    (send lc :rotate -pi/2 :z) (send rc :rotate -pi/2 :z)
    (send bs :assoc lc) (send bs :assoc rc)
    (setq l (kxr-link-create (send bs :bodies)
			     :joint-coord (make-cascoords :pos #f(0 0 42))))
    (send l :put :cameras (list lc rc))
    (dolist (c (get l :cameras)) (send l :assoc c))
    l))

(defun kxr-d405-magbase-link ()
  (let ((bs (kxr-d405-aux 23))
	(mb (d405-magbase-bodyset))
	(lc (make-cascoords :pos #f(16 9 21)))
	(rc (make-cascoords :pos #f(16 -9 21)))	
	l)
    (send lc :rotate pi/2 :y) (send rc :rotate pi/2 :y)
    (send lc :rotate -pi/2 :z) (send rc :rotate -pi/2 :z)
    (send bs :assoc lc) (send bs :assoc rc)
    (send bs :locate (float-vector 0 0 10) :world)
    (setq l (kxr-link-create (append (send mb :bodies)
				     (send bs :bodies))
			     :joint-coord (make-cascoords :pos #f(0 0 42))))
    (send l :put :cameras (list lc rc))
    (dolist (c (get l :cameras)) (send l :assoc c))
    l))


(in-package "GL")
(defmethod edge
  (:pvertex (f)
	    (cond ((eq f pface) pvert)
		  ((eq f nface) nvert)
		  (t (format t ";; :pvertex bad face f:~A e:~A~%" f self)
		     (or pvert nvert))))
  (:nvertex (f)
	    (cond ((eq f pface) nvert)
		  ((eq f nface) pvert)
		  (t (format t ";; :nvertex bad face f:~A e:~A~%" f self)
		     (or nvert pvert))))
  )

(in-package "USER")

(defun d405-echos-link-heavy (&key (front t) (depth 19))
  (let ((bs (stl2eus "catkin_ws_src/kxr_pkgs/kxr_models/meshes/D405_earhead_module/base_link.STL"))
	(lc (make-cascoords :pos #f(36 9 26)))
	(rc (make-cascoords :pos #f(36 -9 26)))	
	l)
    (send lc :rotate pi/2 :y) (send rc :rotate pi/2 :y)
    (send lc :rotate -pi/2 :z) (send rc :rotate -pi/2 :z)
    (send bs :assoc lc) (send bs :assoc rc)
    (if front (send bs :locate #f(-21 0 0) :world))
    (setq l (kxr-link-create (list bs)
			     :joint-coord (make-cascoords :pos #f(0 0 60))))
    (send l :put :cameras (list lc rc))
    (dolist (c (get l :cameras)) (send l :assoc c))
    l))
  
(defun d405-magbase-bodyset nil
  (let ((bs (kxr-magbase))
	(mt (make-cube 29 26 9))
	(m- (make-cube 23 40 20))
	)
    (send m- :locate (float-vector 0 0 (+ 1.5 10)))
    (setq mt (body- mt m-))
    (send mt :locate (float-vector 3.5 0 (+ 4 4.5)) :world)
    (kxr-bodyset-create (list bs mt)))
  )

(defun d405-echos-link (&key front (depth 19))
  (let* ((bs (kxr-d405-magbase-link))
	 (lear (m5atom-echo-bodyset))
	 (rear (m5atom-echo-bodyset))
	 (cams (get bs :cameras))
	 (lc (car cams))
	 (rc (cadr cams))
	 l)
    (send lear :locate #f(16 33 19) :world)
    (send rear :locate #f(16 -33 19) :world)
    (send bs :assoc lear)
    (send bs :assoc rear)
    (if front (send bs :locate #f(-21 0 0) :world))
    (setq l (kxr-link-create (append (send bs :bodies)
				     (send lear :bodies)
				     (send rear :bodies))
			     :joint-coord (make-cascoords :pos #f(0 0 60))))
    (send l :put :cameras (list lc rc))
    (dolist (c (get l :cameras)) (send l :assoc c))
    l))

(defun d405-m5stamp-eyes-iris-link ()
  (d405-m5stamp-eyes-link :leye (m5stamp-leye-iris-bodyset)
			  :reye (m5stamp-reye-iris-bodyset)))
(defun d405-m5stamp-eyes-link (&key front (depth 19)
				    (leye (m5stamp-eye-bodyset))
				    (reye (m5stamp-eye-bodyset)))
  (let* ((bs (kxr-d405-magbase-link))
	 (lear (m5atom-echo-bodyset))
	 (rear (m5atom-echo-bodyset))
	 (cams (get bs :cameras))
	 (lc (car cams))
	 (rc (cadr cams))
	 l)
    (send lear :rotate pi :x :world)
    (send rear :rotate pi :x :world)
    (send lear :locate #f(-4 11 76) :world)
    (send rear :locate #f(-4 -11 76) :world)
    (send leye :locate #f(19 41 31) :world)
    (send reye :locate #f(19 -41 31) :world)
    (send bs :assoc lear)
    (send bs :assoc rear)
    (send bs :assoc leye)
    (send bs :assoc reye)
    (if front (send bs :locate #f(-21 0 0) :world))
    (setq l (kxr-link-create (append (send bs :bodies)
				     (send lear :bodies)
				     (send rear :bodies)
				     (send leye :bodies)
				     (send reye :bodies))
			     :joint-coord (make-cascoords :pos #f(0 0 60))))
    (send l :put :cameras (list lc rc))
    (dolist (c (get l :cameras)) (send l :assoc c))
    l))

(defun d405-head-link (&key (front t) (depth 19))
  (let ((bs (wrl2eus "stls/radxahead_asm_rev2_no_d405.wrl" 1000.0))
	(d405 (kxr-d405-aux depth))
	(lc (make-cascoords :pos #f(36 9 26)))
	(rc (make-cascoords :pos #f(36 -9 26)))	
	l)
    (send d405 :locate #f(19.5 0 5) :world)
    (send bs :assoc d405)
    (send lc :rotate pi/2 :y) (send rc :rotate pi/2 :y)
    (send lc :rotate -pi/2 :z) (send rc :rotate -pi/2 :z)
    (send bs :assoc lc) (send bs :assoc rc)
    (if front (send bs :locate #f(-21 0 0) :world))
    (setq l (kxr-link-create (append (send bs :bodies)
				     (send d405 :bodies))
			     :joint-coord (make-cascoords :pos #f(0 0 60))))
    (send l :put :cameras (list lc rc))
    (dolist (c (get l :cameras)) (send l :assoc c))
    l))

(defun 3dusb-3eye-link (&key (rev 8) (lens 7) (front t) (cover t) m5stickv hub raspi lidar)
  (let ((c (3dusb-camera-aux lens))
	b u blist l)
    (case
	rev
      (2
       (setq b (m5stickhead-3eye :m5unitv2 nil :rev rev :hub hub :front front :m5stickv m5stickv))
       (send c :locate (float-vector 6 0 12) :world)    
       (setq u (m5unitv2-usb-bodyset :lego t))
       (send u :locate (float-vector -38 0 0) :world)
       (setq blist (append (send b :bodies) (send c :bodies) (send u :bodies))))
      (3
       (setq b (m5stickhead-3eye :m5unitv2 nil :rev rev :hub hub :front front :m5stickv m5stickv))
       (send c :locate (float-vector -15 0 12) :world)    
       (setq u (m5unitv2-usb-bodyset :lego t))
       (send u :locate (float-vector -52 0 0) :world)
       (setq blist (append (send b :bodies) (send c :bodies) (send u :bodies))))
      (4
       (setq b (m5stickhead-3eye :m5unitv2 nil :rev 4 :hub hub :front front :m5stickv m5stickv))
       (send c :locate (float-vector -14 0 12) :world)    
       (setq u (m5unitv2-usb-bodyset :lego t))
       (send u :locate (float-vector -52 0 0) :world)
       (send b :assoc u) (send b :assoc c)
       (setq blist (append (send b :bodies) (send c :bodies) (send u :bodies))))
      (5
       (setq b (m5stickhead-3eye :m5unitv2 nil :rev 5 :hub nil :m5stickv m5stickv))
       (send c :locate (float-vector 3 0 12) :world)    
       ;;(send u :rotate pi :y :world)
       ;;(send u :locate (float-vector -11.5 0 68) :world)
       (setq u (m5unitv2-usb-bodyset :lego t))
       (send u :rotate pi :z :world)
       (send u :locate (float-vector -11.5 0 8) :world)
       (send b :assoc u) (send b :assoc c)
       (setq blist (append (send b :bodies) (send c :bodies) (send u :bodies))))
      (6
       (setq b (m5stickhead-3eye :m5unitv2 nil :rev 6 :hub hub :front front :m5stickv m5stickv))
       (send c :locate (float-vector 3 0 12) :world)    
       (setq u (m5unitv2-usb-bodyset :lego t))
       (send u :rotate pi :z :world)
       (send u :locate (float-vector -11.5 0 8) :world)
       (send b :assoc u) (send b :assoc c)
       (send b :locate #f(-10.5 0 0) :world)
       (setq blist (append (send b :bodies) (send c :bodies) (send u :bodies))))
      ((7 8 9 10 11)
       (setq b (m5stickhead-3eye :m5unitv2 nil :rev rev
				 :front front :cover cover :m5stickv m5stickv :hub hub))
       (send c :locate (float-vector 3 0 12) :world)    
       (setf (get b :cameras) (get c :cameras))
       (when raspi
	 (setq u (raspi-zero-2-w))
	 (send u :rotate -pi/2 :y :world)
	 (send u :rotate pi :z :world)
	 (cond
	   ((memq rev (list 8 9))
	    (send u :locate (float-vector -20 0 31) :world))
	   ((memq rev (list 10))
	    (send u :locate (float-vector -24 0 41) :world))
	   ((memq rev (list 11))
	    (send u :locate (float-vector -24 0 42) :world))
	   )
	 (send b :assoc u)
	 (setq blist (send u :bodies)))
       (when (memq rev (list 10 11))
	 (setq u (raspi-lcd))
	 (send u :rotate -pi/2 :y :world)
	 (cond
	   ((= rev 10)
	    (send u :locate (float-vector 20 0 41) :world))
	   ((= rev 11)
	    (send u :locate (float-vector 20 0 42) :world))
	   )
	 (send b :assoc u)
	 (setq blist (append (send u :bodies) blist)))
       (when lidar
	 (setq u (kxr-lidar))
	 (cond
	   ((memq rev (list 8 9))
	    (send u :locate (float-vector 0 0 53) :world))
	   ((eq rev 10)
	    (send u :locate (float-vector 0 0 72) :world))
	   ((eq rev 11)
	    (send u :locate (float-vector 0 0 76) :world))
	   )
	 (send b :assoc u)
	 (setq blist (append (send u :bodies) blist)))
       (send b :assoc c)
       (send b :locate #f(-10.5 0 0) :world)
       (setq blist (append (send b :bodies) (send c :bodies) blist)))
      (t
       (setq b (m5stickhead-3eye :m5unitv2 nil :hub hub :front front :rev rev :m5stickv m5stickv))
       (send c :locate (float-vector 6.5 0 12) :world)    
       (setq u (m5unitv2-usb-bodyset :lego t))
       (send u :rotate pi :y :world)
       (send u :locate #f(22 0 68) :world)
       (setq blist (append (send b :bodies) (send c :bodies) (send u :bodies))))
      )
    (setq l (kxr-link-create blist :joint-coord (make-cascoords :pos #f(0 0 60))))
    (send l :put :cameras (get b :cameras))
    (dolist (c (get l :cameras)) (send l :assoc c))
    l))

(defun 3dusb-lens (&optional (radius 7))
  (let ((llens (make-cylinder radius 17))
	(ll- (make-cylinder (- radius 1) 20))
	(ll+ (make-cylinder (- radius 1) 16))
	(rlens (make-cylinder radius 17))
	(rl- (make-cylinder (- radius 1) 20))
	(rl+ (make-cylinder (- radius 1) 16))
	))
  )

(defun 3DUSB-camera-7 () (3dusb-camera-aux 7))
(defun 3DUSB-camera-5 () (3dusb-camera-aux 5))
(defun 3DUSB-camera-aux (&optional (radius 7))
  (let ((base (make-fillet-cube 16 80 1 1))
	(cyl- (make-cylinder 1 10))
	(lbase (make-cube 14 14 2))
	(rbase (make-cube 14 14 2))
	(llens (make-cylinder radius 17))
	(ll- (make-cylinder (- radius 1) 20))
	(ll+ (make-cylinder (- radius 1) 16))
	(rlens (make-cylinder radius 17))
	(rl- (make-cylinder (- radius 1) 20))
	(rl+ (make-cylinder (- radius 1) 16))
	(usbm (make-cube 5.5 7 2))
	(cam0 (make-cascoords :pos #f(0 0 10)))
	(cam1 (make-cascoords :pos #f(0 0 10)))
	blist l)
    (send cyl- :locate #f(6.5 38 -3) :world)
    (setq base (body- base cyl-))
    (send cyl- :locate #f(-6.5 38 -3) :world)
    (setq base (body- base cyl-))
    (send cyl- :locate #f(-6.5 -38 -3) :world)
    (setq base (body- base cyl-))
    (send cyl- :locate #f(6.5 -38 -3) :world)
    (setq base (body- base cyl-))
    (send base :set-color #f(0.15 0.15 0.15))
    (send usbm :locate #f(-7 0 1.5) :world)
    (send usbm :set-color #f(0.7 0.7 0.7))
    (send lbase :locate #f(0 30 1.5) :world)
    (send lbase :set-color #f(0.3 0.3 0.3))
    (send rbase :locate #f(0 -30 1.5) :world)
    (send rbase :set-color #f(0.3 0.3 0.3))
    ;;
    (send ll- :locate #f(0 0 -1) :world)
    (setq llens (body- llens ll-))
    (send cam0 :rotate -pi/2 :z :world)
    (send llens :assoc cam0)
    (send ll+ :set-color #f(0.15 0.15 0.15))
    (send llens :assoc ll+)
    (send llens :locate #f(0 30 1.5) :world)
    (send llens :set-color #f(0.2 0.2 0.2))
    (send rl- :locate #f(0 0 -1) :world)
    (setq rlens (body- rlens rl-))
    (send cam1 :rotate -pi/2 :z :world)
    (send rlens :assoc cam1)
    (send rl+ :set-color #f(0.15 0.15 0.15))
    (send rlens :assoc rl+)
    (send rlens :locate #f(0 -30 1.5) :world)
    (send rlens :set-color #f(0.2 0.2 0.2))
    (setq blist (list lbase rbase llens ll+ rlens rl+ usbm))
    (dolist (b blist) (send base :assoc b))
    (send base :rotate pi/2 :y :world)
    (setq l (kxr-bodyset-create (cons base blist) (make-cascoords) nil))
    (setf (get l :cameras) (list cam0 cam1))
    l))

(defun GroveHub-body nil
  (let* ((b (make-fillet-cube 32 24 8 2))
	 (h- (make-cylinder 2.5 10))
	 (j (make-cascoords))
	 (g- (make-cube 10 5 10))
	 (gv1 (make-cube 10 5 8 :pos #f(0 0.5 4)));; (wrl2eus "Chips/Parts/GROVE-4PIN-VERT.wrl"))
	 (gv2 (copy-object gv1)) ;; (wrl2eus "Chips/Parts/GROVE-4PIN-VERT.wrl"))
	 (gv3 (copy-object gv1)) ;; (wrl2eus "Chips/Parts/GROVE-4PIN-VERT.wrl"))
	 (ga (copy-object gv1)) ;; (wrl2eus "Chips/Parts/GROVE-4PIN-VERT.wrl"))
	 glist l blist
	 (holes
	  (list
	   (list "basef0" #f(-4 8 12) :x 2 8)
	   (list "basef1" #f(-4 -8 12) :x 2 8)
	   (list "baseb0" #f(4 8 12) :-x 2 8)
	   (list "baseb1" #f(4 -8 12) :-x 2 8)
	   )))
    (send h- :locate #f(4 8 -5) :world)
    (setq b (body- b h-))
    (send h- :locate #f(4 -8 -5) :world)
    (setq b (body- b h-))
    (send gv1 :rotate pi :z)
    (send g- :locate #f(-6 0 0) :world)
    (setq b (body- b g-))
    (send gv1 :locate #f(-6 0.5 -2) :world)
    (send gv2 :rotate pi :z)
    (send g- :locate #f(-6 8 0) :world)
    (setq b (body- b g-))
    (send gv2 :locate #f(-6 8.5 -2) :world)
    (send gv3 :rotate pi :z)
    (send g- :locate #f(-6 -8 0) :world)
    (setq b (body- b g-))
    (send gv3 :locate #f(-6 -7.5 -2) :world)
    (send ga :rotate pi/2 :z :world)
    (send ga :rotate pi/2 :y :world)
    (send ga :locate #f(7.7 0 1) :world)
    (send g- :rotate pi/2 :z :world)
    (send g- :rotate pi/2 :y :world)
    (send g- :locate #f(13.5 0 2) :world)
    (setq b (body- b g-))
    ;;
    (setq glist (list ga gv1 gv2 gv3))
    (dolist (o glist) (send b :assoc o))
    (send b :rotate pi/2 :y :world)
    (send b :locate (float-vector 0 0 16) :world)
    (send b :put :weight 5.1) ;; 4.7 with joint 0.4
    (send b :set-color #f(0.7 0.75 0.74))
    (send b :worldcoords)
    (setq b (kxr-make-kxr-body "grovehub" b b holes))
    (setq blist (cons b glist))
    ;;(setq blist (cons b (send-all glist :bodies)))
    (setq l (kxr-bodyset-create blist j holes))
    l))

(defun m5unitv-stereo (&key hub (n 13) (flat t) (base t) (m5stack-function 'm5stackfire-bodyset) m5stack
			 m5unitv2)
  (let* ((ul (m5unitv-bodyset))
	 (lcam (send ul :find-named-coords "m5unitv"))
	 (ur (m5unitv-bodyset))
	 (rcam (send ur :find-named-coords "m5unitv"))
	 (b (case n (9 (LEGO-Bar-9L)) (13 (LEGO-Bar-13L)) (15 (LEGO-Bar-15L)) (t (LEGO-Bar-nL n))))
	 (hn (/ n 2))
	 (j (make-cascoords))
	 blist m5 bs f h holes l)
    (when m5unitv2
      (setq m5unitv2 (m5unitv2-bodyset))
      (send m5unitv2 :move-named-coords "baseb0" b (format nil "down~A" (1- (/ n 2))) pi :x)
      (setq blist (send m5unitv2 :bodies))
      )
    (send ul :move-named-coords "baseb1" b (format nil "down~A" (1- n)) pi :x)
    (send ur :move-named-coords "baseb0" b "down0" pi :x)
    (setq blist (append (send ul :bodies)
			(send ur :bodies) blist))
    (when (integerp m5stack)
      (setq m5 (funcall m5stack-function))
      (send m5 :move-named-coords (format nil "clegoh~A" m5stack)
	    b (format nil "down~A" hn));; pi :x)      
      (setq blist (append (send m5 :bodies) blist))
      )
    (when hub
      (setq h (grovehub-body))
      (if (eq hub :front)
	  (send h :move-named-coords "baseb0" b (format nil "down~A" (1- hn)) pi :x)
	(send h :move-named-coords "baseb1" b (format nil "up~A" (1- hn)) pi :y)
	)
      (push h blist))
    (when flat
      (setq f (kxr-flat-frame))      
      (send b :move-named-coords (format nil "up~A" (+ 3 hn)) f "rddown2" pi/2 :z)
      (push b blist)
      (push f blist)
      (setq bs (kxr-joint-base))
      (send f :move-named-coords "lupc" bs "sideh3" pi/2 :z)
      (cond
	(base
	 (push bs blist)
	 (send bs :locate #f(0 0 3)))
	(t 
	 (send bs :locate #f(0 0 -3))))
      )
    (setq l (kxr-bodyset-create blist j holes))
    (send l :assoc lcam)
    (send l :assoc rcam)
    (send l :put :cameras (list lcam rcam))
    l))

(defun m5unitv2-stereo (&key (hub t) (n 13) (flat t) (base t))
  (let* ((ul (m5unitv2-bodyset))
	 (lcam (send ul :find-named-coords "m5unitv2"))
	 (ur (m5unitv2-bodyset))
	 (rcam (send ur :find-named-coords "m5unitv2"))
	 (b (case n (9 (LEGO-Bar-9L)) (13 (LEGO-Bar-13L)) (15 (LEGO-Bar-15L)) (t (LEGO-Bar-nL n))))
	 (hn (/ n 2))
	 (j (make-cascoords))
	 blist m5 bs f h holes l)
    (send ul :move-named-coords "baseb1" b "up0" pi :y)
    (send ur :move-named-coords "baseb0" b (format nil "up~A" (1- n)) pi :y)
    (setq blist (append (send ul :bodies)
			(send ur :bodies)))
    (when hub
      (setq h (grovehub-body))
      (send h :move-named-coords "basef0" b (format nil "down~A" (1- hn)) pi :x)
      (setq blist (append (send h :bodies) blist)))
    (when flat
      (setq f (kxr-flat-frame))      
      (send b :move-named-coords (format nil "up~A" (+ 3 hn)) f "rddown2" pi/2 :z)
      (push b blist)
      (push f blist)
      (setq bs (kxr-joint-base))
      (send f :move-named-coords "lupc" bs "sideh3" pi/2 :z)
      (cond
	(base
	 (push bs blist)
	 (send bs :locate #f(0 0 3)))
	(t 
	 (send bs :locate #f(0 0 -3))))
      )
    (send bs :rotate pi :z :world)
    (send bs :worldcoords)
    (setq l (kxr-bodyset-create blist j holes))
    (send l :assoc lcam)
    (send l :assoc rcam)
    (send l :put :cameras (list lcam rcam))
    l))

(defun m5stickv-stereo (&key (angle 7) m5unitv2)
  (let* ((fb (kxr-flat-frame))
	 (ft (kxr-flat-frame))
	 (ls (kxr-dummy-servo))
	 (rs (kxr-dummy-servo))
	 (la (kxr-upper-arm20))
	 (ra (kxr-upper-arm20))
	 (lj (kxr-joint-base))
	 (rj (kxr-joint-base))
	 (ljf (kxr-joint-frame-b-b))
	 (rjf (kxr-joint-frame-b-a))
	 (vl (m5stickv-bodyset))
	 (vr (m5stickv-bodyset))
	 (lcam (car (get vl :cameras)))
	 (rcam (car (get vr :cameras)))
	 (j (make-cascoords))
	 blist holes l)
    (when m5unitv2
      (setq m5unitv2 (m5unitv2-bodyset :lego nil))
      (send m5unitv2 :rotate pi :z)
      (send m5unitv2 :translate #f(30 0 0) :world)
      (setq blist (send m5unitv2 :bodies))
      )
    (send fb :rotate -pi/2 :y :world)
    (send fb :rotate -pi/2 :z :world)
    (send fb :rotate pi :x :world)
    (send fb :locate #f(0 0 5) :world)
    (send ls :move-named-coords "downh4" fb "ruup0")
    (send rs :move-named-coords "downh3" fb "rdup0" pi :z)
    (send ft :move-named-coords "rdup0" ls "uph4")
    (send la :move-named-coords "uph2" ls "uph0" (+ pi (deg2rad angle)) :z)
    (send ra :move-named-coords "uph2" rs "uph0" (- pi (deg2rad angle)) :z)
    (send lj :move-named-coords "sideh1" la "downh1")
    (send rj :move-named-coords "sideh1" ra "downh1")
    (send ljf :move-named-coords "uph1" lj "downh1")
    (send rjf :move-named-coords "uph1" rj "downh3" pi :z)
    (send vl :move-named-coords "baseh0" ljf "downh3" -pi/2 :z)
    (send vr :move-named-coords "baseh0" rjf "downh3" -pi/2 :z)
    (setq blist (append (list fb ft ls rs la ra lj rj ljf rjf) blist))
    (setq blist (append blist (send vl :bodies)	(send vr :bodies)))
    (setq l (kxr-bodyset-create blist j holes))
    (send lcam :rotate pi/2 :x)
    ;;(send lcam :rotate pi/2 :z)
    (send lcam :rotate pi :z)
    (send l :assoc lcam)
    (send rcam :rotate pi/2 :x)
    ;;(send rcam :rotate pi/2 :z)
    (send rcam :rotate pi :z)
    (send l :assoc rcam)
    (send l :put :cameras (list lcam rcam))
    l))


(defun m5stickhead-3eye-link (&key (m5unitv2 t) v2up (hub t) y-servo (rev 8) (front t) (cover t))
  (let* ((bs (m5stickhead-3eye :y-servo y-servo :rev rev :front front :cover cover))
	 (cams (get bs :cameras))
	 l)
    (setq l (kxr-link-create (send bs :bodies) :joint-coord (make-cascoords :pos #f(0 0 60))))
    (dolist (c cams) (send l :assoc c))
    (send l :put :cameras cams)
    l))


(defun m5stickhead-mount-name (num)
  (cond
    ((or (null num) (< num 2))
     (format nil "~A/stls/M5Stickhead_3eye_mount" *rcb4eus-dir*))
    ((< num 9)
     (format nil "~A/stls/M5Stickhead_3eye_mount_rev~A" *rcb4eus-dir* num))
    ((= num 9)
     (format nil "~A/stls/reduction/M5Stickhead_3eye_mount_rev8" *rcb4eus-dir*))
    (t 
     (format nil "~A/stls/m5stickhead_3eye_mount_rev~A" *rcb4eus-dir* num))))

(defun m5stickhead-mount-bodyset (&optional (num 8) &key (front t) (cover t)
						      (scale (if (> num 9) 1000 1)))
  (let* ((str (m5stickhead-mount-name num))
	 (base (stl2eus (format nil "~A.~A" str (if (> num 8) "stl" "STL")) :scale scale))
	 blist)
    (when
	(> num 6)
      (when (> num 8)
	(send base :rotate -pi/2 :x :world)      
	(send base :rotate -pi/2 :y :world)      
	)
      (when (and front (< num 10))
	(setq front (stl2eus (format nil "~A_front.~A" str (if (= num 9) "stl" "STL"))
			     :scale scale :offset #f(0 -22.5 -16)))
	(send base :assoc front)
	(when
	    (= num 9)
	  (send front :locate #f(0 4 0)))
	(push front blist))
      (when cover
	(setq cover (stl2eus (format nil "~A_cover.~A" str (if (> num 8) "stl" "STL"))
			     :scale scale))
	(cond
	  ((= num 8)
	   (send cover :rotate pi :z :world)
	   (send cover :locate #f(0 45 0) :world)
	   )
	  ((= num 9)
	   (send cover :rotate -pi/2 :x)
	   (send cover :rotate -pi/2 :z)
	   (send cover :locate #f(0 0 53))
	   )
	  ((= num 10)
	   (send cover :rotate -pi/2 :x)
	   (send cover :rotate -pi/2 :z)
	   (send cover :locate #f(0 0 64))
	   )
	  ((= num 11)
	   (send cover :rotate -pi/2 :x)
	   (send cover :rotate -pi/2 :z)
	   (send cover :locate #f(0 0 68))
	   ))
	(send base :assoc cover)
	(push cover blist)))
    (send base :rotate pi/2 :z :world)
    (send base :rotate pi/2 :y :world)
    (when
	(= num 9)
      (send base :translate #f(0 0 -4))
      )
    (push base blist)
    (kxr-bodyset-create blist)))

(defun m5stickhead-3eye (&key m5unitv2 v2up hub y-servo (rev 8) (front t) (cover t) (m5stickv t))
  (let* ((m (m5stickhead-mount-bodyset rev :front front :cover cover))
	 vl vr lcam rcam
	 ccam h
	 (j (make-cascoords))
	 blist holes l)
    ;;(if (member rev (list 6 5 4)) (setq m5unitv2 nil))
    (when hub
      (setq h (grovehub-body))
      (case
	  hub
	(:front
	 (setq m5unitv2 nil)
	 (case
	     rev
	   ((3 4 5 6 7 8 9 10 11) (send h :locate (float-vector -23.5 0 6) :world))
	   (3 (send h :locate (float-vector -23.5 0 6) :world))
	   (2 (send h :locate (float-vector -10 0 6) :world))
	   (t (send h :locate (float-vector 9.5 0 6) :world)))
	 )
	(t
	 (send h :rotate pi :z :world)
	 (case
	     rev
	   ((3 4 5 6 7 8 9 10 11) (send h :locate (float-vector (+ -25.5 -14) 0 10) :world))
	   (2 (send h :locate (float-vector -25.5 0 10) :world))
	   (t (send h :locate (float-vector -7 0 10) :world)))))
      (send m :assoc h)
      (setq blist (send h :bodies)))
    (when m5unitv2
      (setq m5unitv2 (m5unitv2-bodyset :lego t))
      (setq ccam (get m5unitv2 :camera))
      (send ccam :name "center-m5unitv2")
      (send m5unitv2 :assoc ccam)
      (send m5unitv2 :rotate pi :z)
      (case
	  rev
	((3 4 5 6 7 8 9 10 11) (send m5unitv2 :translate (float-vector (- 4.8 14) 0 4) :world))
	(2 (send m5unitv2 :translate (float-vector 4.8 0 4) :world))
	(t (send m5unitv2 :translate (float-vector 23.8 0 -4) :world)))
      (if v2up (send m5unitv2 :translate #f(0 0 8) :world))
      (send m :assoc m5unitv2)
      (setq blist (append (send m5unitv2 :bodies) blist)))
    (case
	rev
      ((3 4 5 6) (send m :translate #f(30 0 0) :world))
      (t ))
    (when m5stickv
      (setq vl (m5stickv-bodyset))
      (setq vr (m5stickv-bodyset))
      (send vl :rotate pi/2 :-x :world)
      (case
	  rev
	(9 (send vl :locate (float-vector -7 36 30.5) :world))
	(8 (send vl :locate (float-vector -7 36 30.5) :world))
	(7 (send vl :locate (float-vector -7 36 30.5) :world))
	(6 (send vl :locate (float-vector (+ 11 14) 31 30.5) :world))
	(5 (send vl :locate (float-vector (+ 11 16.5) 32 30.5) :world))
	((4 3) (send vl :locate (float-vector (+ 11 5.5) 29 30.5) :world))
	(t
	 (send vl :locate (float-vector 11 35 30.5) :world))
	)
      (send m :rotate (deg2rad 15) :z :world)
      (send m :assoc vl)
      (send m :rotate (deg2rad (* 2 -15)) :z :world)    
      (send vr :rotate pi/2 :x :world)
      (case
	  rev
	(9 (send vr :locate (float-vector -7 -36 30.5) :world))
	(8 (send vr :locate (float-vector -7 -36 30.5) :world))
	(7 (send vr :locate (float-vector -7 -36 30.5) :world))
	(6 (send vr :locate (float-vector (+ 11 14) -31 30.5) :world))
	(5 (send vr :locate (float-vector (+ 11 16.5) -32 30.5) :world))
	((4 3) (send vr :locate (float-vector (+ 11 5.5) -29 30.5) :world))
	(t
	 (send vr :locate (float-vector 11 -35 30.5) :world))
	)
      (send m :assoc vr)
      (send m :rotate (deg2rad 15) :z :world)
      (setq blist (append blist (send vl :bodies) (send vr :bodies)))
      (setq lcam (car (get vl :cameras)))
      (setq rcam (car (get vr :cameras)))
      (send lcam :name "left-m5stickv")
      (send rcam :name "right-m5stickv")
      )
    (case
	rev
      ;;((7 8) (send m :translate #f(-10.5 0 4) :world))
      (6 (send m :translate #f(-30 0 4) :world))
      (5 (send m :translate #f(-30 0 4) :world))
      (4 (send m :translate #f(-30 0 4) :world))
      (3 (send m :translate #f(-30 0 4) :world))
      (t (send m :translate #f(0 0 4) :world)))
    (setq blist (append (send m :bodies) blist))
    (when y-servo
      (send m :translate #f(-10.5 0 0) :world) 
      (setq y-servo (kxr-servo-supporter-bodyset))
      (send y-servo :assoc m)
      (send y-servo :locate #f(0 0 30) :world)
      (setq blist (append (send y-servo :bodies) blist))
      )
    ;;
    (setq l (kxr-bodyset-create blist j holes))
    (when m5stickv
      (send lcam :rotate pi/2 :x)
      ;;(send lcam :rotate pi/2 :z)
      (send lcam :rotate pi :z)
      (send l :assoc lcam)
      (send rcam :rotate pi/2 :x)
      ;;(send rcam :rotate pi/2 :z)
      (send rcam :rotate pi :z)
      (send l :assoc rcam)
      (send l :put :cameras (list lcam rcam)))
    (when
	m5unitv2
      (send l :assoc ccam)
      (send l :put :cameras (append (get l :cameras) (list ccam))))
    l))
;;
(defun M5stickC-body nil
  (let ((b (make-fillet-cube 48 24 14 2))
	#|
	(b (make-prism
	(list (float-vector 7 12 0)
	(float-vector 7 -12 0)
	(float-vector -7 -12 0)
	(float-vector -7 12 0))
	(float-vector 0 0 48)))
	|#
	(b- (make-cube 10 11 22)))
    (send b :rotate pi/2 :y :world)
    (send b :locate (float-vector 0 0 24) :world)
    (send b- :locate (float-vector 11 0 32) :world)
    (setq b (body- b b-))
    (send b :put :weight 15.4)
    (send b :set-color #f(0.9 0.25 0.0))
    b))

(defun M5stackFIRE-bodyset nil
  (let ((bf (make-fillet-cube 54 54 13 3))
	(bf- (make-fillet-cube 52 52 13 3))
	;;(bf-c (make-cube 32 41 20))
	(bb (make-fillet-cube 54 54 8 3))
	#|
	(bf (make-prism
	     (list (float-vector 13 27 0)
		   (float-vector 13 -27 0)
		   (float-vector 0 -27 0)
		   (float-vector 0 27 0))
	     (float-vector 0 0 54)))
	(bf- (make-prism
	      (list (float-vector 13.5 26 1)
		    (float-vector 13.5 -26 1)
		    (float-vector 0 -26 1)
		    (float-vector 0 26 1))
	      (float-vector 0 0 52)))
	(bb (make-prism
	     (list (float-vector 0 27 0)
		   (float-vector 0 -27 0)
		   (float-vector -8 -27 0)
		   (float-vector -8 27 0))
	     (float-vector 0 0 54)))
	|#
	(ctop- (make-cube 10 10 10))
	(cside- (make-cube 5 10 10))
	(b1 (make-cube 2 8 5))
	(b2 (make-cube 2 8 5))
	(b3 (make-cube 2 8 5))
	(pb (make-cube 4 1 8))
	(usbc- (make-cube 2 8 9))
	(sd- (make-cube 2 12 10))
	(cyl- (make-cylinder 2 15))
	l
	(holes
	 (list (list "connect0" (float-vector -8 0 48.5) :-x 2 7)
	       (list "llegoh0" (float-vector -8 -16 (+ 27 8)) :-x 2 7)
	       (list "llegoh1" (float-vector -8 -16 27) :-x 2 7)
	       (list "llegoh2" (float-vector -8 -16 (- 27 8)) :-x 2 7)
	       (list "clegoh0" (float-vector -8 0 (+ 27 8)) :-x 2 7)
	       (list "clegoh1" (float-vector -8 0 27) :-x 2 7)
	       (list "clegoh2" (float-vector -8 0 (- 27 8)) :-x 2 7)
	       (list "rlegoh0" (float-vector -8 16 (+ 27 8)) :-x 2 7)
	       (list "rlegoh1" (float-vector -8 16 27) :-x 2 7)
	       (list "rlegoh2" (float-vector -8 16 (- 27 8)) :-x 2 7)
	       ))
	(*contact-threshold* 0.00001)
	(c (make-cascoords)))
    (send bf :rotate pi/2 :y :world)
    (send bf :locate (float-vector 6.5 0 27) :world)
    ;;(setq bf- (body- bf- bf-c))
    (send bf- :rotate pi/2 :y :world)
    (send bf- :locate (float-vector 7 0 27) :world)
    (send bb :rotate pi/2 :y :world)
    (send bb :locate (float-vector -4 0 27) :world)
    
    (send b1 :locate (float-vector 13 -12 6) :world)
    (send b2 :locate (float-vector 13 0 6) :world)
    (send b3 :locate (float-vector 13 12 6) :world)
    (send pb :locate (float-vector 6 -27 41) :world)
    (send pb :set-color :darkred)
    (send usbc- :locate (float-vector 5 -27 28) :world)
    (setq bf (body- bf usbc-))
    (send sd- :locate (float-vector 5 -7 0) :world)
    (setq bf (body- bf sd-))
    (send ctop- :locate (float-vector 0 9 54) :world)
    (setq bb (body- bb ctop-))
    (send ctop- :locate (float-vector 0 -9 54) :world)
    (setq bb (body- bb ctop-))
    (send cyl- :rotate pi/2 :-y)
    (send cyl- :locate #f(-1 0 48.5) :world)
    (setq bb (body- bb cyl-))
    (send cside- :locate (float-vector 4 -27 13) :world)
    (setq bf (body- bf cside-))    
    (setq bf- (body- bf- cside-))    
    (send bf :put :weight 63.4)
    (send bf- :set-color :black)
    (send bf :set-color #f(0.8 0.1 0.1))
    (setq bf (kxr-make-kxr-body "m5stackfire-bf" bf bf nil))
    (setq bf- (kxr-make-kxr-body "m5stackfire-bf-" bf- bf- nil))
    (setq bb (kxr-make-kxr-body "m5stackfire-bb" bb bb nil))
    (setq b1 (kxr-make-kxr-body "m5stackfire-b1" b1 b1 nil))
    (setq b2 (kxr-make-kxr-body "m5stackfire-b2" b2 b2 nil))
    (setq b3 (kxr-make-kxr-body "m5stackfire-b3" b3 b3 nil))
    (setq pb (kxr-make-kxr-body "m5stackfire-pb" pb pb nil))
    (setq l (kxr-bodyset-create (list bf bf- bb b1 b2 b3 pb) c holes))
    (send l :put :weight 63.4)
    l))

(defun M5stackGRAY-bodyset nil
  (let ((bf (make-fillet-cube 54 54 13 3))
	(bf- (make-fillet-cube 52 52 13 3))
	(bf-c (make-cube 32 41 20))
	(bb (make-fillet-cube 54 54 4 3))
	#|
	(bf (make-prism
	     (list (float-vector 13 27 0)
		   (float-vector 13 -27 0)
		   (float-vector 0 -27 0)
		   (float-vector 0 27 0))
	     (float-vector 0 0 54)))
	(bf- (make-prism
	      (list (float-vector 13.5 26 1)
		    (float-vector 13.5 -26 1)
		    (float-vector -1 -26 1)
		    (float-vector -1 26 1))
	      (float-vector 0 0 52)))
	(bb (make-prism
	     (list (float-vector 0 27 0)
		   (float-vector 0 -27 0)
		   (float-vector -4 -27 0)
		   (float-vector -4 27 0))
	     (float-vector 0 0 54)))
	|#
	(ctop- (make-cube 2.5 22 4))
	(cflat- (make-cube 2.5 4 38.5))
	(cside- (make-cube 5 10 10))
	(b1 (make-cube 2 8 5))
	(b2 (make-cube 2 8 5))
	(b3 (make-cube 2 8 5))
	(pb (make-cube 4 1 8))
	(usbc- (make-cube 2 8 9))
	(sd- (make-cube 2 12 10))
	(cyl- (make-cylinder 2 15))
	l
	(holes
	 (list (list "connect0" (float-vector -8 0 48.5) :-x 2 7)
	       (list "llegoh0" (float-vector -8 -16 (+ 27 8)) :-x 2 7)
	       (list "llegoh1" (float-vector -8 -16 27) :-x 2 7)
	       (list "llegoh2" (float-vector -8 -16 (- 27 8)) :-x 2 7)
	       (list "clegoh0" (float-vector -8 0 (+ 27 8)) :-x 2 7)
	       (list "clegoh1" (float-vector -8 0 27) :-x 2 7)
	       (list "clegoh2" (float-vector -8 0 (- 27 8)) :-x 2 7)
	       (list "rlegoh0" (float-vector -8 16 (+ 27 8)) :-x 2 7)
	       (list "rlegoh1" (float-vector -8 16 27) :-x 2 7)
	       (list "rlegoh2" (float-vector -8 16 (- 27 8)) :-x 2 7)
	       ))
	(c (make-cascoords)))
    (send bf :rotate pi/2 :y :world)
    (send bf :locate (float-vector 6.5 0 27) :world)
    (setq bf- (body- bf- bf-c))
    (send bf- :rotate pi/2 :y :world)
    (send bf- :locate (float-vector 7 0 27) :world)
    (send bb :rotate pi/2 :y :world)
    (send bb :locate (float-vector -2 0 27) :world)
    ;;
    (send b1 :locate (float-vector 13 -12 6) :world)
    (send b2 :locate (float-vector 13 0 6) :world)
    (send b3 :locate (float-vector 13 12 6) :world)
    (send pb :locate (float-vector 6 -27 41) :world)
    (send pb :set-color :darkred)
    (send usbc- :locate (float-vector 5 -27 28) :world)
    (setq bf (body- bf usbc-))
    (send sd- :locate (float-vector 5 -7 0) :world)
    (setq bf (body- bf sd-))
    ;;
    (send ctop- :locate (float-vector 0 0 54) :world)
    (setq bb (body- bb ctop-))
    (send ctop- :locate (float-vector 0 0 0) :world)
    (setq bb (body- bb ctop-))
    (send cflat- :locate (float-vector 0 -27 28) :world)
    (setq bb (body- bb cflat-))
    (send cflat- :locate (float-vector 0 27 28) :world)
    (setq bb (body- bb cflat-))
    ;;
    (send cyl- :rotate pi/2 :-y)
    (send cyl- :locate #f(-1 0 48.5) :world)
    (setq bb (body- bb cyl-))
    (send cside- :locate (float-vector 4 -27 13) :world)
    (setq bf (body- bf cside-))    
    (setq bf- (body- bf- cside-))    
    (send bf :put :weight 63.4)
    (send bf- :set-color :black)
    (setq bf (kxr-make-kxr-body "m5stackgray-bf" bf bf nil))
    (setq bf- (kxr-make-kxr-body "m5stackgray-bf-" bf- bf- nil))
    (setq bb (kxr-make-kxr-body "m5stackgray-bb" bb bb nil))
    (setq b1 (kxr-make-kxr-body "m5stackgray-b1" b1 b1 nil))
    (setq b2 (kxr-make-kxr-body "m5stackgray-b2" b2 b2 nil))
    (setq b3 (kxr-make-kxr-body "m5stackgray-b3" b3 b3 nil))
    (setq pb (kxr-make-kxr-body "m5stackgray-pb" pb pb nil))
    (setq l (kxr-bodyset-create (list bf bf- bb b1 b2 b3 pb) c holes))
    (send l :put :weight 63.4)
    l))

(defun M5GO-bodyset nil
  (let ((bf (make-fillet-cube 54 54 13 3))
	(bf- (make-fillet-cube 52 52 13 3))
	(bf-c (make-cube 32 41 20))
	(bb (make-fillet-cube 54 54 8 3))
	(ctop- (make-cube 10 10 10))
	(cside- (make-cube 5 10 10))
	(b1 (make-cube 2 8 5))
	(b2 (make-cube 2 8 5))
	(b3 (make-cube 2 8 5))
	(pb (make-cube 4 1 8))
	(usbc- (make-cube 2 8 9))
	(sd- (make-cube 2 12 10))
	(cyl- (make-cylinder 2 15))
	l
	(holes
	 (list (list "connect0" (float-vector -8 0 48.5) :-x 2 7)
	       (list "llegoh0" (float-vector -8 -16 (+ 27 8)) :-x 2 7)
	       (list "llegoh1" (float-vector -8 -16 27) :-x 2 7)
	       (list "llegoh2" (float-vector -8 -16 (- 27 8)) :-x 2 7)
	       (list "clegoh0" (float-vector -8 0 (+ 27 8)) :-x 2 7)
	       (list "clegoh1" (float-vector -8 0 27) :-x 2 7)
	       (list "clegoh2" (float-vector -8 0 (- 27 8)) :-x 2 7)
	       (list "rlegoh0" (float-vector -8 16 (+ 27 8)) :-x 2 7)
	       (list "rlegoh1" (float-vector -8 16 27) :-x 2 7)
	       (list "rlegoh2" (float-vector -8 16 (- 27 8)) :-x 2 7)
	       ))
	(*contact-threshold* 0.00001)
	(c (make-cascoords)))
    (send bf :rotate pi/2 :y :world)
    (send bf :locate (float-vector 6.5 0 27) :world)
    (setq bf- (body- bf- bf-c))
    (send bf- :rotate pi/2 :y :world)
    (send bf- :locate (float-vector 7 0 27) :world)
    (send bb :rotate pi/2 :y :world)
    (send bb :locate (float-vector -4 0 27) :world)
    
    (send b1 :locate (float-vector 13 -12 6) :world)
    (send b2 :locate (float-vector 13 0 6) :world)
    (send b3 :locate (float-vector 13 12 6) :world)
    (send pb :locate (float-vector 6 -27 41) :world)
    (send pb :set-color :darkred)
    (send usbc- :locate (float-vector 5 -27 28) :world)
    (setq bf (body- bf usbc-))
    (send sd- :locate (float-vector 5 -7 0) :world)
    (setq bf (body- bf sd-))
    (send ctop- :locate (float-vector 0 9 54) :world)
    (setq bb (body- bb ctop-))
    (send ctop- :locate (float-vector 0 -9 54) :world)
    (setq bb (body- bb ctop-))
    (send cyl- :rotate pi/2 :-y)
    (send cyl- :locate #f(-1 0 48.5) :world)
    (setq bb (body- bb cyl-))
    (send cside- :locate (float-vector 4 -27 13) :world)
    (setq bf (body- bf cside-))    
    (setq bf- (body- bf- cside-))    
    (send bf :put :weight 63.4)
    (send bf- :set-color :black)
    (send bf :set-color #f(0.8 0.8 0.8))
    (setq bf (kxr-make-kxr-body "m5go-bf" bf bf nil))
    (setq bf- (kxr-make-kxr-body "m5go-bf-" bf- bf- nil))
    (setq bb (kxr-make-kxr-body "m5go-bb" bb bb nil))
    (setq b1 (kxr-make-kxr-body "m5go-b1" b1 b1 nil))
    (setq b2 (kxr-make-kxr-body "m5go-b2" b2 b2 nil))
    (setq b3 (kxr-make-kxr-body "m5go-b3" b3 b3 nil))
    (setq pb (kxr-make-kxr-body "m5go-pb" pb pb nil))
    (setq l (kxr-bodyset-create (list bf bf- bb b1 b2 b3 pb) c holes))
    (send l :put :weight 63.4)
    l))

(defun kxr-m5head-horizontal-bodyset (&optional b-a)
  (let ((b (m5stickv-bodyset))
	(jf (kxr-joint-frame-a))
	(jb (kxr-joint-base))
	(jfb (if b-a (kxr-joint-frame-b-a) (kxr-joint-frame-b-b)))
	holes l (c (make-cascoords)))
    (send jb :move-named-coords "uph2" jfb "uph2" pi :z)
    (send jf :move-named-coords "uph3" jb "sideh1" pi/2 :-z)
    (send b  :move-named-coords "baseh0" jf "uph4" pi/2 :z)
    (send jfb :rotate pi/2 :x :world)
    (send jfb :rotate pi :z :world)
    (send jfb :locate #f(-13 0 -3) :world)
    (setq l (kxr-bodyset-create (append (list jfb jb jf)
					(send b :bodies))
				c))
    (dolist (c (get b :cameras))
      (send c :rotate pi :y)
      (send c :rotate pi/2 :x)
      (send l :assoc c))
    (send l :put :cameras (get b :cameras))
    l))

(defun kxr-M5head-stereo nil	;; kxrl2makabe
  (let* ((b (make-prism
	     (list (float-vector 13 23.5 0)
		   (float-vector 13 -23.5 0)
		   (float-vector -13 -23.5 0)
		   (float-vector -13 23.5 0))
	     (float-vector 0 0 52)))
	 (sbod b)
	 (d (make-prism
	     (list (float-vector 15.6 9.5 0)
		   (float-vector 15.6 -9.5 0)
		   (float-vector -15.6 -9.5 0)
		   (float-vector -15.6 9.5 0))
	     (float-vector 0 0 5)))
	 (c (make-cylinder 12 18))
	 (c- (make-cylinder 4.1 12))
	 lcam rcam l)
    (send c- :rotate pi/2 :y)
    (send c- :locate (float-vector 12 11 (+ 5 8 4.5)) :world)
    (send c :rotate pi/2 :y)
    (send c :locate (float-vector -1 11 (+ 5 8 4.5)) :world)
    (setq b (body+ b c))
    (setq b (body- b c-))
    (setq lcam (make-cascoords :coords (send c :copy-worldcoords)))
    (send lcam :translate #f(10 0 0) :world)
    (send lcam :rotate pi/2 :z)
    (send lcam :rotate pi/2 :y)
    (send lcam :rotate pi :z :world)
    (send lcam :rotate pi :x :world)
    (send c- :locate (float-vector 12 -11 (+ 5 8 4.5)) :world)
    (send c :locate (float-vector -1 -11 (+ 5 8 4.5)) :world)
    (setq b (body+ b c))
    (setq b (body- b c-))
    (setq rcam (make-cascoords :coords (send c :copy-worldcoords)))
    (send rcam :translate #f(10 0 0) :world)
    (send rcam :rotate pi/2 :z)
    (send rcam :rotate pi/2 :y)
    (send rcam :rotate pi :z :world)
    (send rcam :rotate pi :x :world)
    (send d :rotate pi/2 :y)
    (send d :locate (float-vector -15 -10.5 31.5) :world)
    (setq b (body- b d))
    (send d :locate (float-vector -15  10.5 31.5) :world)
    (setq b (body- b d))    
    (send b :put :weight 38.3)
    (setq l (kxr-make-kxr-body "M5head-stereo" sbod b nil))
    (send l :assoc lcam)
    (send l :assoc rcam)
    (send l :put :cameras (list lcam rcam))
    (setf (get l :weight) 38.3)
    l))

(defun kxr-M5head nil	;; kxrl2makabe
  (let* ((b (make-prism
	     (list (float-vector 15 15 0)
		   (float-vector 15 -15 0)
		   (float-vector -15 -15 0)
		   (float-vector -15 15 0))
	     (float-vector 0 0 52)))
	 (c (make-cylinder 14 18))
	 (c- (make-cylinder 10 12))
	 (sbod b)
	 cam l)
    (send c- :rotate pi/2 :y)
    (send c- :locate (float-vector 12 0 (+ 7 26)) :world)
    (send c :rotate pi/2 :y)
    (send c :locate (float-vector 0 0 (+ 7 26)) :world)
    (setq cam (make-cascoords :coords (send c :copy-worldcoords)))
    (send cam :rotate pi/2 :z)
    (send cam :rotate pi/2 :y)
    (send cam :translate #f(10 0 0) :world)
    (setq b (body+ b c))
    (setq b (body- b c-))
    (send b :put :weight 38.3)
    (setq l (kxr-make-kxr-body "M5head" sbod b nil))
    (send l :assoc cam)
    (send l :put :cameras (list cam))
    (setf (get l :weight) 38.3)
    l))

