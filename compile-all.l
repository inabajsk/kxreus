;;
;;
(setq *rcb4eus-dir* (format nil "~A" (pwd)))

(defun create-eusrc-file (&optional (var-name '*rcb4eus-dir*) (fname "eusrc.l"))
  (let* ((dir (symbol-value var-name))
	 (sdir (format nil "~A/" dir))
	 (odir (format nil "~A/~A/obj/" dir (unix::getenv "ARCHDIR")))
	 (ldir (format nil "~A/~A/lib/" dir (unix::getenv "ARCHDIR")))
	 (rc (format nil "~A/.eusrc" (unix:getenv "HOME")))
	 (rclst (if (probe-file rc) (read-lists rc)))
	 (lst `(progn
		 (setq ,var-name ,dir)
		 (pushnew ,sdir *load-path* :test #'equal)
		 (pushnew ,ldir *load-path* :test #'equal)
		 (pushnew ,odir *load-path* :test #'equal)
		 (format t ";; .eusrc executed!! ~A=~A added, *load-path* updated!!~%"
			 ',var-name ,var-name)
		 ;;(format t ";; *load-path*=") (pprint *load-path*)
		 (require :tiny-xml)
		 ))
	 l)
    (format t ";; create-eusrc-file ~A ~A executed.~%" var-name fname)
    (with-open-file
     (fout fname :direction :output)
     (format fout ";;~%")
     (format fout ";; ~A" (unix:asctime (unix:localtime)))
     (format fout ";; This file ~A/~A~%" (symbol-value var-name) fname)
     (format fout ";; was automatically generated by compile.l in Makefile at ~A~%"
	     var-name)
     (format fout ";; to be copied to $(HOME)/.eusrc which is loaded when euslisp is executed.~%")
     (format fout ";;~%")
     (if (consp rclst)
	 (setq rclst (remove-if
		      #'(lambda (x)
			  (and (listp x)
			       (eq 'progn (car x))
			       (consp (setq l (cadr x)))
			       (eq (car l) 'setq)
			       (eq (cadr l) var-name)))
		      rclst)))
     (dolist (a rclst) (pprint a fout))
     (pprint lst fout)
     )))

(create-eusrc-file '*rcb4eus-dir* "eusrc.l")

(defun compile-all (files &optional (dir "work"))
  (let ((objdir (format nil "~A/~A/obj/" (pwd) (unix:getenv "ARCHDIR")))
	fname lname)
    (unless (probe-file dir) (unix::mkdir dir))
    (dolist (f files)
      (setq fname (pathname-name f))
      (when (probe-file (setq lname (format nil "~A.l" fname)))
	(comp::compile-file-if-src-newer lname objdir)
	(if (probe-file (format nil "~A.c" fname))
	    (unix::system (format nil "mv -f ~A.c ~A" fname dir)))
	(if (probe-file (format nil "~A.h" fname))
	    (unix::system (format nil "mv -f ~A.h ~A" fname dir))))
      )
    ))

(unless (find-package "RCB4LISP") (make-package "RCB4LISP"))
(in-package "RCB4LISP")
(user::compile-all '( "rcb4lisp.l"))
(in-package "USER")

(unless (find-package "TINY-XML") (make-package "TINY-XML"))
(in-package "TINY-XML")
(user::compile-all '( "tiny-xml.l"))
(in-package "USER")

(compile-all '(
	       "utils.l"
	       "set.l"
	       "graphsearch.l"
	       "ftdi.l"
	       "ics.l"
	       "uart.l"
;;	       "tiny-xml.l"
;;	       "odedyna.l"
;;	       "read-stl.l"
;;	       "read-wrl.l"
;;	       "eus2mjcf.l"
;;	       "nn.l"
;;	       "cblaslib.l"
;;	       "mnist.l"
	       "rcb4file.l"
	       "kxrdyna.l"
	       "kxranimate.l"
	       "kxrbody.l"
	       "m5models.l"
	       "kxrboards.l"
	       "kxrbodyset.l"
	       "kxrlinks.l"
	       "kxrmodels.l"
	       "kxrviewer.l"
	       "kxrextentions.l"
	       "khrmodels.l"
	       "rcb4robots.l"
	       "rcb4interface.l"
;;	       "armh7interface.l"
	       "rcb4asm.l"
	       "rcb4file.l"
	       "rcb4lisp.l"
	       "rcb4machine.l"
	       "rcb4sample.l"
	       ;; testing
	       "inertia.l"
;;	       "humanmodel.l"
;;	       "vrmlNodeSpec.l"
;;	       "vrmlParser.l"
;;	       "wbtNodeSpec.l"
	       "eus2wrl.l"
;;	       "eus2webots.l"
	       ))
