;;;
;;;	KXR primitive body parts
;;;
;;;	2018.6.6 created JSK M.I.
;;;	2018.6.17 KXR L2 parts
;;;	2018.6.19 KXR L4 parts start
;;;	2018.7.1  add mass property
;;;	2018.9.30 (kxr-make-kxr-body bod holes)
;;;	2019.1.20 tripyramidal-im by S.Noda
;;;	2020.11.21 add kxr-hole class
#|
(defun bodies-vector-limit-pos0 (bb &optional (pos #f(0 0 -10000)) (v #f(0 0 1)))
  (let ((ff (apply #'append
		   (send-all bb :faces-intersect-with-point-vector pos v)))
	limit)
    (dolist (f ff)
      (let ((vdot (v. (cadr f) v)))
	(if (null limit) (setq limit vdot lpos (cadr f))
	  (if (> vdot limit)
	      (setq limit vdot lpos (cadr f))))))
    (list limit lpos)))

(defun bodies-vector-limit0 (bb &optional (pos #f(0 0 -10000)) (v #f(0 0 1)))
  (car (bodies-vector-limit-pos0 bb pos v)))
|#

(require :utils)
(require :kxrboards)

(set-new-defun) ;; redefun defun

(defvar *kxr-servo-color* #f(0.2 0.2 0.2))
(defvar *kxr-white-color* #f(0.7 0.7 0.7))
(defvar *kxr-default-color* #f(0.3 0.3 0.3))

(defun kxr-create-screw (m l &optional (h 1.0) (m2 (+ m 1.5)))
  (let ((s (make-cylinder (/ m 2.0) (+ l 0.5)))
	(h (make-cylinder (/ m2 2.0) h)))
    (send s :locate #f(0 0 0.5))
    (body+ h s)))
(defun kxr-screw-m2x4 () (kxr-create-screw 2 4))
(defun kxr-screw-m2x6 () (kxr-create-screw 1 6))
(defun kxr-screw-m2x8 () (kxr-create-screw 2 8))
(defun kxr-screw-m2x10 () (kxr-create-screw 2 10))
(defun kxr-screw-m2x12 () (kxr-create-screw 2 12))
(defun kxr-screw-m2.6x4 () (kxr-create-screw 2.6 4 1.0 10))
(defun kxr-screw-m2.6x10 () (kxr-create-screw 2.6 10 1.5 5))
(defun kxr-screw-m3x6 () (kxr-create-screw 3 6 1.2 5))
(defun kxr-screw-m3x8 () (kxr-create-screw 3 8 1.2 5))

(reset-new-defun) ;; redefun defun

(defmethod gl::glbody
  (:init-mass-property
   (&key weight (density 1.2))
   (if weight
       (send self :put :weight weight)
     (send self :put :weight (/ (* density (send self :volume)) 1000.0)))
   (send self :put :inertia-matrix-g (send self :cal-inertia-matrix-g))
   )
  )

(defmethod kxr-body
  (:bodies nil (list self))
  (:attach-coords
   (props)
   (let* ((name1 (car props))
	  (name2 (cadr props))
	  (invert (caddr props))
	  (holes (get self :holes))
	  (nm1 (assoc name1 holes :test #'string-equal))
	  (nm2 (assoc name2 holes :test #'string-equal))
	  (pos1 (cadr nm1)) (pos2 (cadr nm2))
	  (axis (axis2vector (caddr nm1)))
	  (axis1 (if invert (v- axis) axis))
	  (nmd (normalize-vector (v- pos2 pos1)))
	  (r1 (transpose (make-matrix 3 3 (list nmd (v* axis1 nmd) axis1))))
	  (b1 (make-cascoords :coords (send self :copy-worldcoords)))
	  (c1 (make-cascoords :pos pos1 :rot r1)))
     (send b1 :transform c1)
     ;;(send self :assoc b1)
     b1))
  (:attach
   (props target tprops &optional invert)
   (send self :move-coords
	 (send target :attach-coords tprops)
	 (send self :attach-coords props))
   )
  (:update nil
	   (send-super :update)
	   (send self :cal-inertia-matrix)
	   )
  ;; kxr-body
  (:init (&key (name)
	       (replace-obj (make-cube 10 10 10))
	       fine
	       (color *kxr-default-color*))
	 (if replace-obj
	     (replace-object self replace-obj)
	     (if fine
		 (replace-object self fine)
		 (format *error-output* ";; kxr-body ~A is no replace-obj, fine body~%" name)))
	 (when name (send self :name name))
	 (send self :set-color color)
	 (send self :init-mass-property)
	 (send self :generate-glvertices fine)
	 self)
  (:generate-glvertices
   (&optional (bod self) (dir (rcb4eus-mkdir "glbodies"))
	      &aux
	      (cds (send self :copy-worldcoords))
	      (fname (format nil "~A/~A.gv" dir (send self :name))))
   (cond
     (gl::aglvertices
      (format t ";; ok already defined self=~A aglvertices ~%" (send self :name)))
     ((probe-file fname)
      (unless (file-newer fname (rcb4eus-file "kxrbody.l"))
	(warning-message 1 ";; alarm!! ~A is older than kxrbody.l ~%" fname))
      ;;(format t ";; load glvertices ~A~%" fname)
      (with-open-file (f fname :direction :input)
	(setq gl::aglvertices (read f))
	;;(send gl::aglvertices :transform cds)
	(send self :assoc gl::aglvertices))
      )
     (t (let (mat (col (get self :face-color)))
	  (when col
	    (unless (vectorp col)
	      (setq col (gl::find-color col)))
	    (setq mat
		  (list
		   (list :ambient
			 (float-vector (elt col 0) (elt col 1) (elt col 2)))
		   (list :diffuse
			 (float-vector (elt col 0) (elt col 1) (elt col 2))))))
	  (format t ";; make-glvertices and dump gl::aglvertices into ~A~%" fname)
	  (setq gl::aglvertices
		(gl::make-glvertices-from-faceset bod :material mat))
	  (dump-structure fname gl::aglvertices)
	  ;;(send gl::aglvertices :transform cds)
	  (send self :assoc gl::aglvertices)
	  (setf (get gl::aglvertices :face-color) (get self :face-color))
	  ))))
  (:change-visual
   (&optional (v :fine))
   )
  )
;;;
;;;
(defvar *kxr-fine-body*)
;;;
(defun kxr-make-kxr-body (name sbod bod holes
			  &key
			    (color (get bod :face-color))
			    joint-coord)
  (let (kb)
    (send sbod :worldcoords) (send bod :worldcoords)
    (if *kxr-fine-body*
	(setq kb (instance kxr-body :init
			   :replace-obj bod :fine bod :name name :color color))
	(setq kb (instance kxr-body :init
			   :replace-obj sbod :fine bod :name name :color color)))
    (when (derivedp joint-coord cascaded-coords)
      (send kb :put :joint-coord joint-coord)
      (send joint-coord :put :color #f(0 0 1))
      (send joint-coord :put :size 30)
      (send kb :assoc joint-coord))
    (kxr-assoc-holes kb holes)
    kb))

(defclass kxr-hole :super cascaded-coords :slots (radius depth))
(defmethod kxr-hole
  (:init
   (n p r d)
   (send-super :init)
   (send self :name n)
   (setq pos p radius r depth d)
   self)
  )

(defun kxr-assoc-holes (bod holes)
  (let (c)
    (send bod :put :holes holes)
    (dolist (h holes)
      ;;(setq c (make-cascoords :name (car h) :pos (cadr h)))
      (setq c (instance kxr-hole :init (elt h 0) (elt h 1) (elt h 3) (elt h 4)))
      (case
	  (caddr h)
	(:-z (send c :rotate pi :y))
	(:x (send c :rotate pi/2 :y))
	(:-x (send c :rotate -pi/2 :y))
	(:y (send c :rotate -pi/2 :x))
	(:-y (send c :rotate pi/2 :x))
	)
      (send c :put :color #f(0 1 0)) 
      (send c :put :size 7)
      (send bod :assoc c)
      )
    bod))
;;;
(defun rcube-finger-aux (&key flip)
  (let* ((*contact-threshold* 0.0001)
	 (c0 (make-prism
	      (list (float-vector 0 0 0)
		    (float-vector 0 15 0)
		    (float-vector 30 15 0)
		    (float-vector 30 0 0))
	      (float-vector 0 0 30)))
	 (c1 (make-prism
	      (list (float-vector 0 0 -10)
		    (float-vector 0 15 -10)
		    (float-vector 30 15 -10)
		    (float-vector 30 0 -10))
	      (float-vector 0 0 50)))
	 (offset (float-vector -10 0 -20))
	 (h0 (make-cylinder 3.9 50 :segments 21))
	 (h1 (make-cylinder 1.1 8))
	 )
    (send c1 :rotate (deg2rad 29) :z :world)
    (send c1 :locate (float-vector 15 6 0) :world)
    (setq c0 (body- c0 c1))
    (send h0 :locate (float-vector 10 -3.2 -10) :world)
    (setq c0 (body- c0 h0))
    (when
	flip
      (send c0 :rotate pi :x :world)
      (send c0 :locate (float-vector 0 0 30) :world)
      (send h1 :rotate pi :x :world)
      )
    (send h1 :rotate -pi/2 :x :world)
    (send c0 :translate offset :world)
    (send c0 :worldcoords)
    (setq c0 (body- c0 h1))
    c0))

(defun rcube-rfinger nil
  (let ((c (rcube-finger-aux)))
    (send c :rotate -pi/2 :x :world)
    (send c :rotate pi/2 :z :world)
    (kxr-make-kxr-body "rcube-rfinger" c c nil)
    ))

(defun rcube-lfinger nil
  (let ((c (rcube-finger-aux :flip t)))
    (send c :rotate pi/2 :x :world)
    (send c :rotate pi/2 :z :world)
    (kxr-make-kxr-body "rcube-lfinger" c c nil)))

;;;
(defun kxr-servo-s3301 nil (kxr-servo-s3300 "s3301")) ;; 25.98
(defun kxr-servo-s3304 nil (kxr-servo-s3300 "s3304")) ;; 33.52g

(defun kxr-servo-s3300 (name)
  (let* ((xl/2 (/ 32.5 2))
	 (yl/2 (/ 26.0 2))
	 (zl/2 (/ 26.0 2))
	 (xl- (- xl/2 7.25))
	 (xl+ (+ xl/2 7.25))
	 (dz+ 4.5)
	 (dz- 3.0)
	 (conwindow (make-cube 13 4 5.5))
	 (connecter1 (make-cube 5 10 3))
	 (connecter2 (make-cube 5 10 3))
	 (bod
	  (make-prism
	   (list
	    (float-vector 0 (- yl/2) (- zl/2))
	    (float-vector -5.5 (- 1 yl/2) (- zl/2))
	    (float-vector (- xl-) (- 4 yl/2) (- zl/2))
	    (float-vector (- xl-) (- yl/2 4) (- zl/2))
	    (float-vector -5.5 (- yl/2 1) (- zl/2))
	    (float-vector 0 yl/2 (- zl/2))
	    (float-vector (- xl+ 2) yl/2 (- zl/2))
	    (float-vector xl+  (- yl/2 2) (- zl/2))
	    (float-vector xl+ (- 2 yl/2) (- zl/2))
	    (float-vector (- xl+ 2) (- yl/2) (- zl/2)))
	   (float-vector 0 0 (* 2 zl/2))))
	 (cyl1 (make-cylinder 6.25 28))
	 (cyl2 (make-cylinder 3.0 33.5))
	 (holes (list
		 (list "uph0" #f(0    0 13.0) :z 6.5 8)
		 (list "uph1" #f(0    -10.5 13.0) :-z 1 8)
		 (list "uph2" #f(0     10.5 13.0) :-z 1 8)
		 (list "uph3" #f(21.0  10.5 13.0) :-z 1 8)
		 (list "uph4" #f(21.0 -10.5 13.0) :-z 1 8)
		 (list "downh0" #f(0   0 -13.0) :z 6.5 15)
		 (list "downh1" #f(0    -10.5 -13.0) :z 1 15)
		 (list "downh2" #f(0     10.5 -13.0) :z 1 15)
		 (list "downh3" #f(21.0  10.5 -13.0) :z 1 15)
		 (list "downh4" #f(21.0 -10.5 -13.0) :z 1 15)))
	 (sbod bod)
	 (c (make-cascoords)))
    (send cyl1 :locate (float-vector 0 0 -14.0))
    (send cyl2 :locate (float-vector 0 0 -16.0))
    (setq bod (body+ bod cyl1))
    (setq bod (body+ bod cyl2))
    (send connecter1 :locate #f(9 14 -6) :world)
    (setq bod (body- bod connecter1))
    (send connecter2 :locate #f(15 14 -6) :world)
    (setq bod (body- bod connecter2))
    (send conwindow :locate #f(12 14 -6) :world)
    (setq bod (body- bod conwindow))
    (setq bod (kxr-make-kxr-body name sbod bod holes
                                 :color *kxr-servo-color*))
    (if (member name '("s3304" "s3304R2") :test #'equal)
	(send bod :put :weight (+ 33.7 1.33))
      (send bod :put :weight (+ 26.4 1.33)))
    (send bod :put :joint-coord (copy-object c))
    (send bod :assoc (get bod :joint-coord))
    (send c :locate #f(0 0 15) :world)
    (send c :put :color #f(0 0 1)) 
    (send c :put :size 30)
    (send bod :put :upper-coord c)
    (send bod :assoc c)
    (send bod :set-color *kxr-servo-color*) ; :black
    bod
    )
  )

(defun kxr-dual-servo-plate2 nil (kxr-dual-servo-plate :thickness 2 :name "dual-servo-plate2"))
(defun kxr-dual-servo-plate5 nil (kxr-dual-servo-plate :thickness 5 :name "dual-servo-plate5"))

(defun kxr-dual-servo-plate (&key (thickness 5) (name (format nil "dual-servo-plate~A" thickness)))
  (let* ((bod
	  (make-prism
	   (list
	    (float-vector  26 0 0)
	    (float-vector -26 0 0)
	    (float-vector -26 0 13)
	    (float-vector -22 0 19)
	    (float-vector -21 0 23)
	    (float-vector -18 0 28)
	    (float-vector -15 0 31)
	    (float-vector -13 0 32)
	    (float-vector -13 0 38)
	    (float-vector  13 0 38)
	    (float-vector  13 0 32)
	    (float-vector  15 0 31)
	    (float-vector  18 0 28)
	    (float-vector  21 0 23)
	    (float-vector  22 0 19)
	    (float-vector  26 0 13)
	    )
	   (float-vector 0 (- thickness) 0)))
	 (sbod bod)
	 (cyl (make-cylinder 6.2 (+ thickness 5)))
	 holes (c (make-cascoords)))
    (send cyl :rotate pi/2 :x :world)
    (send cyl :locate (float-vector -10.5 2 23) :world)
    (setq bod (body- bod cyl))
    (send cyl :locate (float-vector 10.5  2 23) :world)
    (setq bod (body- bod cyl))
    (setq bod (kxr-make-kxr-body name sbod bod holes))
    (send bod :put :joint-coord c)
    bod
    )
  )

(defun kxr-dyp-chest-base-plate nil
  (let ((b (make-cube 26 54 6)))
    (kxr-make-kxr-body "dyp-chest-base-plate" b b nil)
    ))

(defun kxr-dyp-chest-side-plate nil	;; kxrl2makabe
  (let ((b (make-cube 26 6 94)))
    (kxr-make-kxr-body "dyp-chest-side-plate" b b nil)
    ))

;;
(defun kxr-IRsensor-head (&key (name (format nil "IRsensor-head")))
  (let* ((bod
	  (make-prism
	   (list
	    (float-vector  0 -10 0)
	    (float-vector  0 -23 13)
	    (float-vector  0 -25 15)
	    (float-vector  0 -26 18)
	    (float-vector  0 -27 20)
	    (float-vector  0 -26 22)
	    (float-vector  0 -25 25)
	    (float-vector  0 -20 28)
	    ;;
	    (float-vector  0  20 28)
	    (float-vector  0  25 25)
	    (float-vector  0  26 22)
	    (float-vector  0 27 20)
	    (float-vector  0  26 18)
	    (float-vector  0  25 15)
	    (float-vector  0  23 13)
	    (float-vector  0  10 0)
	    (float-vector  0  10 -10)
	    (float-vector  0  -10 -10)
	    )
	   (float-vector 5 0 0)))
	 (cyl2- (make-cylinder 8.5 20))
	 (cyl (make-cylinder 5 8))
	 (cyl- (make-cylinder 2 20))
	 (bod+ (make-cube 12 28 6))
	 (holes (list
		 (list "baseh0" #f(10 0 0) :x 2 8)
		 ))
	 (sbod bod)
	 (c (make-cascoords)))
    (send cyl2- :rotate pi/2 :y)
    (send cyl2- :locate #f(-5 0 17) :world)
    (setq bod (body- bod cyl2-))
    (send bod+ :locate #f(0 0 17) :world)
    (setq bod (body+ bod bod+))
    (send cyl :rotate pi/2 :y)
    (send cyl :locate #f(2 0 0) :world)
    (setq bod (body+ bod cyl))
    (send cyl- :rotate pi/2 :y)
    (send cyl- :locate #f(-5 0 0) :world)
    (setq bod (body- bod cyl-))
    (kxr-make-kxr-body name sbod bod holes)
    )
  )

(defun kxr-irsensor-head-bodyset (&optional b-a)
  (let ((b (kxr-irsensor-head))
	(a (kxr-bottom-arm26))
	l (c (make-cascoords)))
    (send b :move-named-coords "baseh0" a "downh2")
    (send a :locate #f(13 0 -3))
    (kxr-bodyset-create (list a b) c)
    ))

(defun kxr-realsense (&key (yaw nil))    ;; kxrl2makaberaspi
    (let ((diameters '(4 8 5 4))
          (locates '(-35 -10 15 35))
          (angles nil)
	  (b nil) (p nil)
          sbod)
      (let ((n 5) (cnt) (theta 0) (x 0) (y 0))
	(setq cnt n)
	(while
	    (not (< cnt (- n)))
	  (setq theta (* (/ pi (* n 2)) cnt))
	  (setq x (* 10 (cos theta)))
	  (setq y (* 10 (sin theta)))
	  (push (float-vector (+ x 35) y 0) angles)
	  (setq cnt (- cnt 1))
	  ))
      (setq b (make-prism (reverse (append angles (mapcar #'v- angles))) 24.9))
      (setq sbod b)
      ;;(let ((i 0) (cam))
      ;;    (while (< i (length diameters))
      ;;        (setq cam (make-cylinder (elt diameters i) 0.5))
      ;;        (send cam :locate (float-vector (elt locates i) 0 25) :world)
      ;;        (send cam :set-color (float-vector 0.8 0.8 0.8))
      ;;        (setq b (body+ b cam))
      ;;        (setq i (+ i 1))
      ;;    )
      ;;)
      
      (let ((i 0) (cam+) (cam-))
	(while (< i (length diameters))
	  (setq cam+ (make-cylinder (elt diameters i) 2))
	  (setq cam- (make-cylinder (- (elt diameters i) 2) 2))
	  (send cam+ :locate (float-vector (elt locates i) 0 25) :world)
	  (send cam- :locate (float-vector (elt locates i) 0 25) :world)
	  (setq b (body+ b cam+))
	  (setq b (body- b cam-))
	  (setq i (+ i 1))
	  )
        )
      
      (send b :rotate pi/2 :z)
      (send b :rotate pi/2 :x)
      (send b :locate (float-vector -12.5 0 11) :world)
      (when yaw
	(send b :rotate -pi/2 :x)
	(send b :locate (float-vector 0 0 1) :world)
        )
      (setq p (make-prism (list
			   (float-vector -10 10 0)
			   (float-vector 10 10 0)
			   (float-vector 10 -10 0)
			   (float-vector -10 -10 0)) 1.0))
      (setq b (body+ b p))
      (send b :put :weight 77.0)
      (if yaw
	  (kxr-make-kxr-body "RealSense-Y" sbod b nil)
	  (kxr-make-kxr-body "RealSense"   sbod b nil)
	  )
      )
    )

(defun kxr-realsense-head nil
  (kxr-realsense :yaw nil)
)
(defun kxr-realsense-head-yaw nil
  (kxr-realsense :yaw t)
)

(defun kxr-dyp-chest-shoulder-arm nil
  (let* ((bod
	  (make-prism
	   (list
	    (float-vector  -13  0 0)
	    (float-vector  -13 35 0)
	    (float-vector  -4  42 0)
	    (float-vector   4  42 0)
	    (float-vector  13 35 0)
	    (float-vector  13  0 0)
	    )
	   (float-vector 0 0 6)))
	 (sbod bod)
	 (cyl
	  (make-cylinder 5.5 10)))
    (send cyl :locate #f(0 28 -2))
    (setq bod (body- bod cyl))
    (kxr-make-kxr-body "dyp-chest-shoulder-arm" sbod bod nil)
    ))

(defun kxr-dummy-half-servo nil
  (kxr-dummy-servo :name "dummy-half-servo" :half t))

(defun kxr-dummy-servo (&key (name "dummy-servo") half)
  (let* ((zl/2 (if half 0 13))
	 (bod
	  (make-prism
	   (list
	    (float-vector  0   -13   (- zl/2))
	    (float-vector -1.8 -12.3 (- zl/2))
	    (float-vector -2.5 -10.5 (- zl/2))
	    (float-vector -4.5 -10 (- zl/2))
	    (float-vector -9   -5  (- zl/2))
	    (float-vector -9    5  (- zl/2))
	    (float-vector -4.5  10 (- zl/2))
	    (float-vector -2.5  10.5 (- zl/2))
	    (float-vector -1.8  12.3 (- zl/2))
	    (float-vector  0    13   (- zl/2))
	    (float-vector  1.8  12.3 (- zl/2))
	    (float-vector  2.5  10.5 (- zl/2))
	    (float-vector 18.5  10.5 (- zl/2))
	    (float-vector 19.2  12.3 (- zl/2))
	    (float-vector 21    13   (- zl/2))
	    (float-vector 22.8  12.3 (- zl/2))
	    (float-vector 23.5  10.5 (- zl/2))
	    (float-vector 22.8   8.7 (- zl/2))
	    (float-vector 21     8   (- zl/2))
	    (float-vector 21    -8   (- zl/2))
	    (float-vector 22.8  -8.7 (- zl/2))
	    (float-vector 23.5 -10.5 (- zl/2))
	    (float-vector 22.8 -12.3 (- zl/2))
	    (float-vector 21   -13   (- zl/2))
	    (float-vector 19.2 -12.3 (- zl/2))
	    (float-vector 18.5 -10.5 (- zl/2))
	    (float-vector  2.5 -10.5 (- zl/2))
	    (float-vector  1.8 -12.3 (- zl/2))
	    )
	   (float-vector 0 0 (if half 13 26))))
	 (cyl1 (make-cylinder 6.25 (if half 10 28)))
	 (cyl2 (make-cylinder 3.0 (if half 10 33.5)))
	 (holes (list
		 (list "uph0" #f(0    0    19.0) :-z 1 8)
		 (list "downh0" #f(0    0 -19.0) :z 1 8)
		 (list "uph1" #f(0    -10.5 13.0) :-z 1 8)
		 (list "uph2" #f(0     10.5 13.0) :-z 1 8)
		 (list "uph3" #f(21.0  10.5 13.0) :-z 1 8)
		 (list "uph4" #f(21.0 -10.5 13.0) :-z 1 8)
		 (list "downh1" (float-vector 0    -10.5 (if half 0 -13.0)) :z 1 8)
		 (list "downh2" (float-vector 0     10.5 (if half 0 -13.0)) :z 1 8)
		 (list "downh3" (float-vector 21.0  10.5 (if half 0 -13.0)) :z 1 8)
		 (list "downh4" (float-vector 21.0 -10.5 (if half 0 -13.0)) :z 1 8)))
	 (sbod bod)
	 (c (make-cascoords :name "joint-coord")))
    (send cyl1 :locate (float-vector 0 0 (if half 4 -14.0)))
    (send cyl2 :locate (float-vector 0 0 (if half 6 -16.0)))
    (setq bod (body+ bod cyl1))
    (setq bod (body+ bod cyl2))
    (setq bod (kxr-make-kxr-body name sbod bod holes))
    (send bod :put :weight 10.5)
    (send bod :put :joint-coord c)
    (send bod :set-color *kxr-servo-color*) ; :black
    bod)
  )

(defun kxr-magbase (&optional (hl 13.5) (thickness 4) (hl2 16) (dr 0.5) (dh 6))
  (make-prism
   (list
    (float-vector (- dr hl) (- hl) 0)
    (float-vector (- hl) (- dr hl) 0)
    (float-vector (- hl2) (- dh) 0)
    (float-vector (- hl2)   dh   0)
    (float-vector (- hl) (- hl dr) 0)
    (float-vector (- dr hl) hl 0)
    (float-vector (- dh) hl2 0)
    (float-vector  dh hl2 0)
    (float-vector (- hl dr) hl 0)
    (float-vector hl (- hl dr) 0)
    (float-vector hl2 dh 0)
    (float-vector hl2 (- dh) 0)
    (float-vector hl (- dr hl) 0)
    (float-vector (- hl dr) (- hl) 0)
    (float-vector dh (- hl2) 0)
    (float-vector (- dh) (- hl2) 0)
    )
   (float-vector 0 0 thickness)))

(defun kxr-joint-mag (typ)
  (case
      typ
    (:mag-4 (kxr-joint-mag-4))
    (:mag+7 (kxr-joint-mag+7))
    (:horn-mag- (kxr-joint-horn-mag-))
    (:horn-mag+ (kxr-joint-horn-mag+))
    (:sensor-mag+ (kxr-joint-sensor-mag+))
    (:horn-sensor-mag+ (kxr-joint-horn-sensor-mag+))
    (t (kxr-joint-mag-7)))
  )

(defun kxr-joint-mag-4 nil  (kxr-joint-mag-aux 4 "joint-mag-4" :center-hole t))
(defun kxr-joint-mag-7 nil  (kxr-joint-mag-aux 7 "joint-mag-7" :sensor-hole t))
(defun kxr-joint-mag+7 nil  (kxr-joint-mag-aux 7 "joint-mag+7" :sensor-hole :all))
(defun kxr-joint-horn-mag- nil (kxr-joint-mag-aux 11 "joint-horn-mag-" :sensor-hole t))
(defun kxr-joint-horn-mag+ nil (kxr-joint-mag-aux 11 "joint-horn-mag+" :sensor-hole :all))
(defun kxr-joint-sensor-mag+ nil (kxr-joint-mag-aux 7 "joint-sensor-mag+" :sensor t :bottom 1))
(defun kxr-joint-horn-sensor-mag+ nil (kxr-joint-mag-aux 7 "joint-horn-sensor-mag+" :sensor t :bottom 3))

(defun kxr-joint-mag-aux (&optional (thickness 4)
			    (name "joint-mag-aux")
			  &key (bottom 1) center-hole sensor-hole sensor)
  (let* ((hl 13.5)
	 (hl2 16)
	 (dr 1)
	 (dh 6)
	 (*contact-threshold* 0.0001)
	 (up-z (if sensor (+ thickness bottom 6) thickness))
	 (bod
	  (make-prism
	   (list
	    (float-vector (- dr hl) (- hl) 0)
	    (float-vector (- hl) (- dr hl) 0)
	    (float-vector (- hl2) (- dh) 0)
	    (float-vector (- hl2)   dh   0)
	    (float-vector (- hl) (- hl dr) 0)
	    (float-vector (- dr hl) hl 0)
	    (float-vector (- dh) hl2 0)
	    (float-vector  dh hl2 0)
	    (float-vector (- hl dr) hl 0)
	    (float-vector hl (- hl dr) 0)
	    (float-vector hl2 dh 0)
	    (float-vector hl2 (- dh) 0)
	    (float-vector hl (- dr hl) 0)
	    (float-vector (- hl dr) (- hl) 0)
	    (float-vector dh (- hl2) 0)
	    (float-vector (- dh) (- hl2) 0)
	    )
	   (float-vector 0 0 thickness)))
	 (sbod bod)
	 (cyl1 (make-cylinder 0.8 30))
	 (holes (list
		 (list "uph0" (float-vector   0.0   0.0  up-z) :-z 1 6)
		 (list "uph1" (float-vector -10.5 -10.5  up-z) :-z 1 6)
		 (list "uph2" (float-vector -10.5  10.5  up-z) :-z 1 6)
		 (list "uph3" (float-vector  10.5  10.5  up-z) :-z 1 6)
		 (list "uph4" (float-vector  10.5 -10.5  up-z) :-z 1 6)
		 (list "downh0" (float-vector   0.0   0.0 0) :-z 1 6)
		 (list "downh1" (float-vector -10.5 -10.5 0) :-z 1 6)
		 (list "downh2" (float-vector -10.5  10.5 0) :-z 1 6)
		 (list "downh3" (float-vector  10.5  10.5 0) :-z 1 6)
		 (list "downh4" (float-vector  10.5 -10.5 0) :-z 1 6)
		 ))
	 sens cyl (c (make-cascoords :pos (float-vector 0 0 up-z))))
    (send cyl1 :locate (float-vector 10.5 10.5 -15) :world)
    (setq bod (body- bod cyl1))
    (send cyl1 :locate (float-vector 10.5 -10.5 -15) :world)
    (setq bod (body- bod cyl1))
    (send cyl1 :locate (float-vector -10.5 -10.5 -15) :world)
    (setq bod (body- bod cyl1))
    (send cyl1 :locate (float-vector -10.5 10.5 -15) :world)
    (setq bod (body- bod cyl1))
    (when center-hole
      (setq cyl (make-cylinder 4 30))
      (send cyl :locate (float-vector 0 0 -12) :world)
      (setq bod (body- bod cyl)))
    (when sensor-hole
      (setq cyl (make-cylinder 2.1 30))
      (cond
	((eq sensor-hole :all)
	 (dolist (x (list 7 -7))
	   (dolist (y (list 7 -7))
	     (send cyl :locate (float-vector x y -4) :world)
	     (setq bod (body- bod cyl)))))
	(t
	 (send cyl :locate (float-vector 7 7 -4) :world)
	 (setq bod (body- bod cyl)))))
    (when sensor
      (setq sens (kxr-sensor-joint-base-c-aux (+ bottom 6) "KJS-03-aux" bottom t))
      (setq bod (body+ bod sens))
      (send bod :locate (float-vector 0 0 (+ 6 bottom)) :world)
      )
    (setq bod (kxr-make-kxr-body name sbod bod holes))
    (setf (get bod :joint-coord) c)
    (send bod :assoc (get bod :joint-coord))
    bod)
  )

(defun kxr-joint-base (&optional (name "joint-base"))
  (let* ((hl 13.5)
	 (z 3)
	 (bod
	  (make-prism
	   (list
	    (float-vector (- 2 hl) (- hl) (- z))
	    (float-vector (- hl) (- 2 hl) (- z))
	    (float-vector (- hl) (- hl 2) (- z))
	    (float-vector (- 2 hl) hl (- z))
	    (float-vector (- hl 2) hl (- z))
	    (float-vector hl (- hl 2) (- z))
	    (float-vector hl (- 2 hl) (- z))
	    (float-vector (- hl 2) (- hl) (- z))
	    )
	   (float-vector 0 0 (* z 2))))
	 (sbod bod)
	 (cylb (make-cylinder 4 6))
	 (cub (make-cube 10 10 6))
	 (cyl0 (make-cylinder 1.55 10))
	 (cyl1 (make-cylinder 0.75 10))
	 (holes (list
		 (list "uph0" #f(  0.0   0.0  3.0) :-z 1 6)
		 (list "uph1" #f(-10.5 -10.5  3.0) :-z 1 6)
		 (list "uph2" #f(-10.5  10.5  3.0) :-z 1 6)
		 (list "uph3" #f( 10.5  10.5  3.0) :-z 1 6)
		 (list "uph4" #f( 10.5 -10.5  3.0) :-z 1 6)
		 (list "downh0" #f(  0.0   0.0 -3.0) :-z 1 6)
		 (list "downh1" #f(-10.5 -10.5 -3.0) :-z 1 6)
		 (list "downh2" #f(-10.5  10.5 -3.0) :-z 1 6)
		 (list "downh3" #f( 10.5  10.5 -3.0) :-z 1 6)
		 (list "downh4" #f( 10.5 -10.5 -3.0) :-z 1 6)
		 (list "sideh1" #f(-13.5   0.0  0.0) :x  1.5 8)
		 (list "sideh2" #f(  0.0  13.5  0.0) :-y 1.5 8)
		 (list "sideh3" #f( 13.5   0.0  0.0) :-x 1.5 8)
		 (list "sideh4" #f(  0.0 -13.5  0.0) :y  1.5 8)
		 (list "sideuh1" #f(-13.5   0.0  0.0) :x  1.5 8)
		 (list "sideuh2" #f(  0.0  13.5  0.0) :-y 1.5 8)
		 (list "sideuh3" #f( 13.5   0.0  0.0) :-x 1.5 8)
		 (list "sideuh4" #f(  0.0 -13.5  0.0) :y  1.5 8)
		 (list "sidedh1" #f(-13.5   0.0  0.0) :x  1.5 8)
		 (list "sidedh2" #f(  0.0  13.5  0.0) :-y 1.5 8)
		 (list "sidedh3" #f( 13.5   0.0  0.0) :-x 1.5 8)
		 (list "sidedh4" #f(  0.0 -13.5  0.0) :y  1.5 8)
		 ))
	 c)
    (send cylb :locate (float-vector 0 0 -7))
    (setq bod (body- bod cylb))
    (send cub :locate (float-vector 0 0 3))
    (setq bod (body- bod cub))
    (send cyl0 :locate (float-vector 0 0 -5))
    (setq bod (body- bod cyl0))
    (send cyl1 :locate (float-vector 10.5 10.5 -5) :world)
    (setq bod (body- bod cyl1))
    (send cyl1 :locate (float-vector 10.5 -10.5 -5) :world)
    (setq bod (body- bod cyl1))
    (send cyl1 :locate (float-vector -10.5 -10.5 -5) :world)
    (setq bod (body- bod cyl1))
    (send cyl1 :locate (float-vector -10.5 10.5 -5) :world)
    (setq bod (body- bod cyl1))
    (setq bod (kxr-make-kxr-body name sbod bod holes))
    bod)
  )

(defun kxr-horn (&optional (height 3))
  (let ((h (make-cylinder 8 (- height 1)))
	(cyl9 (make-cylinder 4.5 (- height 1))))
    (send cyl9 :translate #f(0 0 1))
    (setq h (body+ h cyl9))
    (setf (get h :height) height)
    h))

(defun kxr-sensor-joint-base (sensor &key flip)
  (let (s)
    (cond
      ((null sensor) (setq s (kxr-joint-base)))
      ((eq-memq :mag-4 sensor) (setq s (kxr-joint-mag-4)))
      ((eq-memq :mag-7 sensor) (setq s (kxr-joint-mag-7)))
      ((eq-memq :mag+7 sensor) (setq s (kxr-joint-mag+7)))
      ((eq-memq :horn-mag- sensor) (setq s (kxr-joint-horn-mag-)))
      ((eq-memq :horn-mag+ sensor) (setq s (kxr-joint-horn-mag+)))
      ((eq-memq :sensor-mag+ sensor) (setq s (kxr-joint-sensor-mag+)))
      ((eq-memq :horn-sensor-mag+ sensor) (setq s (kxr-joint-horn-sensor-mag+)))
      ((eq-memq :rev-a sensor) (setq s (kxr-sensor-joint-base-a)))
      ((eq-memq :rev-b sensor) (setq s (kxr-sensor-joint-base-b)))
      (t (setq s (kxr-sensor-joint-base-c))))
    (if flip
	(if (eq flip :y) 
	    (send s :rotate pi :y :world)
	    (send s :rotate pi :x :world)))
    (unless (get s :joint-coord) (setf (get s :joint-coord)
				       (make-cascoords :pos (float-vector 0 0 (send s :min-z)))))
    s))

(defun kxr-sensor-joint-base-a (&aux (len 10))
  (kxr-sensor-joint-base-aux
   :len len :name "KJS-01"
   :imu
   (make-cascoords :name "imu" :pos (float-vector 10 5 (- 5 len))
		   :rot (rotation-matrix pi :y)))
  )

(defun kxr-sensor-joint-base-b (&aux (len 11))
  (kxr-sensor-joint-base-aux
   :len len :name "KJS-02"
   :imu
   (make-cascoords :name "imu" :pos (float-vector 4 1 (- 5 11))
		   :rot (rotation-matrix pi :y))
   ))

(defun kxr-sensor-joint-base-c-aux (&optional (len 14) (name "KJS-03-aux") (bottom-thickness 3) no-hole)
  (kxr-sensor-joint-base-aux
   :len len :name name
   :imu
   (make-cascoords :name "imu" :pos (float-vector 5 10 (- 5 11))
		   :rot (m* (rotation-matrix pi :z) (rotation-matrix pi :y)))
   :lps 7
   :sh6-z-rotation -pi/2
   :ps-order (list "ps3" "ps2" "ps1" "ps0")
   :adc-order (list "adc3" "adc0" "adc2" "adc1")
   :zh-z (- 2 len (- bottom-thickness))
   :no-hole no-hole
   ))

(defun kxr-sensor-joint-base-c (&aux (len 14))
  (kxr-sensor-joint-base-c-aux len "KJS-03"))

(defun kxr-sensor-joint-base-aux
    (&rest args
	   &key
	     (len 16.5) (name "KJS-aux")
	     (imu
	      (make-cascoords :name "imu" :pos (float-vector 4 1 (- 5 len))
			      :rot (rotation-matrix pi :y)))
	     (ladc 11.5)
	     (lps 5)
	     (hl 13.5)	   
	     sh6-z-rotation
	     (ps-order (list "ps2" "ps1" "ps0" "ps3"))
	     (adc-order (list "adc0" "adc1" "adc2" "adc3"))
	     (zh-z (- 4 len))
	     no-hole 
	     )
  (let* ((sh6pin (make-cube 10 8.5 3.5))
	 (sh6pin-pos (float-vector 13.5 4.25 (+ 0.5 zh-z)))
	 (zh4pin (make-cube 10 7.5 4.0))
	 (zh4pin-pos1 (float-vector -13.5 -4.25 zh-z))
	 (zh4pin-pos2 (float-vector -13.5 4.25  zh-z))
	 (z len)
	 #|
	 (ps (list (make-cascoords :name "ps2" :pos (float-vector  lps (- lps) 0))
		   (make-cascoords :name "ps1" :pos (float-vector (- lps) (- lps) 0))
		   (make-cascoords :name "ps0" :pos (float-vector (- lps) lps 0))
		   (make-cascoords :name "ps3" :pos (float-vector  lps lps 0))))
	 (adc (list (make-cascoords :name "adc0" :pos (float-vector 0 ladc 0))
		    (make-cascoords :name "adc1" :pos (float-vector 0 (- ladc) 0))
		    (make-cascoords :name "adc2" :pos (float-vector (- ladc) 0 0))
		    (make-cascoords :name "adc3" :pos (float-vector ladc 0 0))))
	 |#
	 (ps-pos-list
	  (list (float-vector  lps (- lps) 0)
		(float-vector (- lps) (- lps) 0)
		(float-vector (- lps) lps 0)
		(float-vector  lps lps 0)))
	 (ps (mapcar #'(lambda (nm p) (make-cascoords :name nm :pos p))
		     ps-order  ps-pos-list))
	 (adc (mapcar #'(lambda (nm p) (make-cascoords :name nm :pos p))
		      adc-order
		      (list
		       (float-vector 0 ladc 0)
		       (float-vector 0 (- ladc) 0)
		       (float-vector (- ladc) 0 0)
		       (float-vector ladc 0 0))))
	 (bod
	  (make-prism
	   (list
	    (float-vector (- 2 hl) (- hl) (- z))
	    (float-vector (- hl) (- 2 hl) (- z))
	    (float-vector (- hl) (- hl 2) (- z))
	    (float-vector (- 2 hl) hl (- z))
	    (float-vector (- hl 2) hl (- z))
	    (float-vector hl (- hl 2) (- z))
	    (float-vector hl (- 2 hl) (- z))
	    (float-vector (- hl 2) (- hl) (- z))
	    )
	   (float-vector 0 0 (+ z 3))))
	 (cylb (make-cylinder 4 len))
	 (cylps (make-cylinder 2 6))
	 ;;(cub (make-cube 10 16 6))
	 (cyl0 (make-cylinder 1.55 10))
	 (cyl1 (make-cylinder 0.75 10))
	 (holes (list
		 (list "uph1" (float-vector -10.5 -10.5  3.0) :-z 1 6)
		 (list "uph2" (float-vector -10.5  10.5  3.0) :-z 1 6)
		 (list "uph3" (float-vector  10.5  10.5  3.0) :-z 1 6)
		 (list "uph4" (float-vector  10.5 -10.5  3.0) :-z 1 6)
		 (list "downh1" (float-vector -10.5 -10.5 (- z)) :-z 1 6)
		 (list "downh2" (float-vector -10.5  10.5 (- z)) :-z 1 6)
		 (list "downh3" (float-vector  10.5  10.5 (- z)) :-z 1 6)
		 (list "downh4" (float-vector  10.5 -10.5 (- z)) :-z 1 6)
		 (list "sideh1" (float-vector -13.5   0.0  0.0) :x 1.5 8)
		 (list "sideh2" (float-vector   0.0  13.5  0.0) :-y 1.5 8)
		 (list "sideh3" (float-vector  13.5   0.0  0.0) :-x 1.5 8)
		 (list "sideh4" (float-vector   0.0 -13.5  0.0) :y 1.5 8)
		 (list "sideuh1" (float-vector -13.5   0.0  0.0) :x 1.5 8)
		 (list "sideuh2" (float-vector   0.0  13.5  0.0) :-y 1.5 8)
		 (list "sideuh3" (float-vector  13.5   0.0  0.0) :-x 1.5 8)
		 (list "sideuh4" (float-vector   0.0 -13.5  0.0) :y 1.5 8)
		 (list "sidedh1" (float-vector -13.5   0.0  (- 3 z)) :x 1.5 8)
		 (list "sidedh2" (float-vector   0.0  13.5  (- 3 z)) :-y 1.5 8)
		 (list "sidedh3" (float-vector  13.5   0.0  (- 3 z)) :-x 1.5 8)
		 (list "sidedh4" (float-vector   0.0 -13.5  (- 3 z)) :y 1.5 8)
		 ))
	 (sbod bod)
	 sh6-org
	 (c (make-cascoords :pos (float-vector 0 0 (- len)))))
    (send sh6pin :locate sh6pin-pos)
    (when sh6-z-rotation
      (setq sh6-org (make-cascoords))
      (send sh6-org :assoc sh6pin)
      (send sh6-org :rotate sh6-z-rotation :z))
    (setq bod (body- bod sh6pin))
    ;;
    (send zh4pin :locate zh4pin-pos1 :world)
    (setq bod (body- bod zh4pin))
    (send zh4pin :locate zh4pin-pos2 :world)
    (setq bod (body- bod zh4pin))
    ;;
    (unless no-hole
      (send cylb :locate (float-vector 0 0 (- len)))
      (setq bod (body- bod cylb))
      (dolist (p ps-pos-list)
	(send cylps :locate p :world)
	(setq bod (body- bod cylps)))
      (send cyl0 :locate (float-vector 0 0 -5))
      (setq bod (body- bod cyl0))
      (send cyl1 :locate (float-vector 10.5 10.5 -5) :world)
      (setq bod (body- bod cyl1))
      (send cyl1 :locate (float-vector 10.5 -10.5 -5) :world)
      (setq bod (body- bod cyl1))
      (send cyl1 :locate (float-vector -10.5 -10.5 -5) :world)
      (setq bod (body- bod cyl1))
      (send cyl1 :locate (float-vector -10.5 10.5 -5) :world)
      (setq bod (body- bod cyl1)))
    (setq bod (kxr-make-kxr-body name bod bod holes))
    (setf (get bod :joint-coord) c)
    (send bod :assoc (get bod :joint-coord))
    (send bod :assoc imu)
    (dolist (p ps)
      ;;(send p :rotate pi :y)
      ;;(send p :translate (float-vector 0 0 (+ (+ z 3) 2.5)))
      (send bod :assoc p))
    (dolist (a adc)
      ;;(send a :rotate pi :y)
      ;;(send a :translate (float-vector 0 0 (- (+ z 3) 2.5)))
      (send bod :assoc a))
    bod))

(defun kxr-sensor-joint-base-3axisforce (&optional (name "KJS-3axisforce"))
  (let* ((hl 13.5)
	 (z (+ 15 7.5))
	 ;;(z 15)
	 (bod
	  (make-prism
	   (list
	    (float-vector (- 2 hl) (- hl) (- z))
	    (float-vector (- hl) (- 2 hl) (- z))
	    (float-vector (- hl) (- hl 2) (- z))
	    (float-vector (- 2 hl) hl (- z))
	    (float-vector (- hl 2) hl (- z))
	    (float-vector hl (- hl 2) (- z))
	    (float-vector hl (- 2 hl) (- z))
	    (float-vector (- hl 2) (- hl) (- z))
	    )
	   (float-vector 0 0 (+ z 3))))
	 (sbod bod)
	 (cylb (make-cylinder 4 6))
	 (cub (make-cube 10 10 6))
	 (cyl0 (make-cylinder 1.55 10))
	 (cyl1 (make-cylinder 0.75 10))
	 (holes (list
		 (list "uph1" (float-vector -10.5 -10.5  3.0) :-z 1 6)
		 (list "uph2" (float-vector -10.5  10.5  3.0) :-z 1 6)
		 (list "uph3" (float-vector  10.5  10.5  3.0) :-z 1 6)
		 (list "uph4" (float-vector  10.5 -10.5  3.0) :-z 1 6)
		 (list "downh1" (float-vector -10.5 -10.5 -3.0) :-z 1 6)
		 (list "downh2" (float-vector -10.5  10.5 -3.0) :-z 1 6)
		 (list "downh3" (float-vector  10.5  10.5 -3.0) :-z 1 6)
		 (list "downh4" (float-vector  10.5 -10.5 -3.0) :-z 1 6)
		 (list "sideh1" (float-vector -13.5   0.0  0.0) :x  1.5 8)
		 (list "sideh2" (float-vector   0.0  13.5  0.0) :-y 1.5 8)
		 (list "sideh3" (float-vector  13.5   0.0  0.0) :-x 1.5 8)
		 (list "sideh4" (float-vector   0.0 -13.5  0.0) :y  1.5 8)
		 ))
	 c)
    (send cylb :locate (float-vector 0 0 -7))
    (setq bod (body- bod cylb))
    (send cub :locate (float-vector 0 0 3))
    (setq bod (body- bod cub))
    (send cyl0 :locate (float-vector 0 0 -5))
    (setq bod (body- bod cyl0))
    (send cyl1 :locate (float-vector 10.5 10.5 -5) :world)
    (setq bod (body- bod cyl1))
    (send cyl1 :locate (float-vector 10.5 -10.5 -5) :world)
    (setq bod (body- bod cyl1))
    (send cyl1 :locate (float-vector -10.5 -10.5 -5) :world)
    (setq bod (body- bod cyl1))
    (send cyl1 :locate (float-vector -10.5 10.5 -5) :world)
    (setq bod (body- bod cyl1))
    (setq bod (kxr-make-kxr-body name sbod bod holes))
    bod)
  )

(defun kxr-battery-box (&optional (name "battery-box"))
  (let ((ls (kxr-battery-box-aux name 32))
	bod)
    (setq bod (kxr-make-kxr-body name (car ls) (cadr ls) (caddr ls) :color *kxr-white-color*))
    (setf (get bod :weight) 30.0)
    bod))

(defun kxr-battery-box-aux (&optional (name "battery-box") (height 32))
  (let* ((hh (/ height 2.0))
	 (hm (- hh))
	 (bod
	  ;;(make-cube 78 45 32);;
	  (make-prism
	   (list
	    (float-vector -35 -22.5 hm)
	    (float-vector -36.5 -20 hm)
	    (float-vector -38 -10.5 hm)
	    (float-vector -39 -4 hm)
	    (float-vector -39  4 hm)
	    (float-vector -38  10.5 hm)
	    (float-vector -36.5  20 hm)
	    (float-vector -35  22.5 hm)
	    (float-vector  35  22.5 hm)
	    (float-vector  36.5  20 hm)
	    (float-vector  38  10.5 hm)
	    (float-vector  39  4 hm)
	    (float-vector  39 -4 hm)
	    (float-vector  38 -10.5 hm)
	    (float-vector  36.5 -20 hm)
	    (float-vector  35 -22.5 hm)
	    )
	   (float-vector 0 0 height)))
	 (sbod bod)
	 (cyl (make-cylinder 14 (+ 8 height)))
	 (holes (list
		 (list "uph1" (float-vector -34  -10.5 hh) :-z 1 2)
		 (list "uph2" (float-vector -34   10.5 hh) :-z 1 2)
		 (list "uph3" (float-vector -13   10.5 hh) :-z 1 2)
		 (list "uph4" (float-vector -13  -10.5 hh) :-z 1 2)
		 (list "uph5" (float-vector  13  -10.5 hh) :-z 1 2)
		 (list "uph6" (float-vector  13   10.5 hh) :-z 1 2)
		 (list "uph7" (float-vector  34   10.5 hh) :-z 1 2)
		 (list "uph8" (float-vector  34  -10.5 hh) :-z 1 2)
		 (list "downh1" (float-vector -34  -10.5 hh) :z 1 2)
		 (list "downh2" (float-vector -34   10.5 hh) :z 1 2)
		 (list "downh3" (float-vector -13   10.5 hh) :z 1 2)
		 (list "downh4" (float-vector -13  -10.5 hh) :z 1 2)
		 (list "downh5" (float-vector  13  -10.5 hh) :z 1 2)
		 (list "downh6" (float-vector  13   10.5 hh) :z 1 2)
		 (list "downh7" (float-vector  34   10.5 hh) :z 1 2)
		 (list "downh8" (float-vector  34  -10.5 hh) :z 1 2)
		 (list "centerh1" (float-vector 0   0.0  hh) :-z 14 2)
		 (list "centerh2" (float-vector 0  22.5   0.0) :-y 14 2)
		 (list "centerh3" (float-vector 0   0.0 hm) :z 14 2)
		 (list "centerh4" (float-vector 0 -22.5   0.0) :y 14 2)
		 ))
	 cbod)
    (send cyl :locate (float-vector 0 0 (- hm 4)))
    (setq bod (body- bod cyl))
    (list sbod bod holes))
  )

(defun kxr-battery-leg-plate (&optional (name "battery-leg-plate"))
  (let* ((h- -8)
	 (bod
	  (make-prism
	   (list
	    (float-vector -35 -22.5 h-)
	    (float-vector -36.5 -20 h-)
	    (float-vector -38 -10.5 h-)
	    (float-vector -39 -4 h-)
	    (float-vector -39  4 h-)
	    (float-vector -38  10.5 h-)
	    (float-vector -36.5  20 h-)
	    (float-vector -35  22.5 h-)
	    (float-vector  35  22.5 h-)
	    (float-vector  36.5  20 h-)
	    (float-vector  38  10.5 h-)
	    (float-vector  39  4 h-)
	    (float-vector  39 -4 h-)
	    (float-vector  38 -10.5 h-)
	    (float-vector  36.5 -20 h-)
	    (float-vector  35 -22.5 h-)
	    )
	   (float-vector 0 0 8)))
	 (sbod bod)
	 (cyl
	  (make-cylinder 14 40))
	 (cyl0
	  (make-cylinder 1.6 40))
	 (cub0
	  (make-cube 100 10 50))
	 (holes (list
		 (list "uph1" (float-vector -34  -10.5 0.0) :-z 1 2)
		 (list "uph2" (float-vector -34   10.5 0.0) :-z 1 2)
		 (list "uph3" (float-vector -13   10.5 0.0) :-z 1 2)
		 (list "uph4" (float-vector -13  -10.5 0.0) :-z 1 2)
		 (list "uph5" (float-vector  13  -10.5 0.0) :-z 1 2)
		 (list "uph6" (float-vector  13   10.5 0.0) :-z 1 2)
		 (list "uph7" (float-vector  34   10.5 0.0) :-z 1 2)
		 (list "uph8" (float-vector  34  -10.5 0.0) :-z 1 2)
		 (list "downh1" (float-vector -34  -10.5 h-) :z 1 2)
		 (list "downh2" (float-vector -34   10.5 h-) :z 1 2)
		 (list "downh3" (float-vector -13   10.5 h-) :z 1 2)
		 (list "downh4" (float-vector -13  -10.5 h-) :z 1 2)
		 (list "downh5" (float-vector  13  -10.5 h-) :z 1 2)
		 (list "downh6" (float-vector  13   10.5 h-) :z 1 2)
		 (list "downh7" (float-vector  34   10.5 h-) :z 1 2)
		 (list "downh8" (float-vector  34  -10.5 h-) :z 1 2)
		 (list "centerh1" (float-vector 0   0.0   0.0) :-z 14 2)
		 (list "centerh2" (float-vector 0   0.0  h-) :z  14 2)
		 ))
	 (c (make-cascoords :pos (float-vector 0 0 h-)))
	 cbod)
    (send cyl0 :locate (float-vector -13 -10.5 -15) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector -34 -10.5 -20) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector -13 10.5 -20) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector -34 10.5 -20) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector 13 -10.5 -15) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector 34 -10.5 -20) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector 13 10.5 -20) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector 34 10.5 -20) :world)
    (setq bod (body- bod cyl0))
    (send cyl :locate (float-vector 0 0 -20))
    (setq bod (body- bod cyl))
    (send cub0 :rotate (deg2rad 45) :-x)
    (send cub0 :locate (float-vector 0 32 0) :world)
    (setq bod (body- bod cub0))
    (send cub0 :rotate pi :z :world)
    (send cub0 :locate (float-vector 0 -32 0) :world)
    (setq bod (body- bod cub0))
    (setq bod (kxr-make-kxr-body name sbod bod holes :color *kxr-white-color*))
    (setf (get bod :joint-coord) c)
    (send bod :assoc c)
    bod)
  )

(defun kxr-twinmagbase (&optional (name "twinmagbase") (height 11))
  (kxr-battery-mag-plate-aux :name name :height 9.5 :name name))

(defun kxr-battery-mag-plate (&optional (name "battery-mag-plate"))
  (kxr-battery-mag-plate-aux :height 9.5 :name name))
(defun kxr-battery-doublemag-plate (&optional (name "battery-doublemag-plate"))
  (kxr-battery-mag-plate-aux :height 19 :name name))
(defun kxr-battery-mag-plate-aux (&key (height 8) (name "battery-mag-plate"))
  (let* ((h- (- height))
	 (bod
	  (make-prism
	   (list
	    (float-vector -35 -22.5 h-)
	    (float-vector -36.5 -20 h-)
	    (float-vector -38 -10.5 h-)
	    (float-vector -39 -4 h-)
	    (float-vector -39  4 h-)
	    (float-vector -38  10.5 h-)
	    (float-vector -36.5  20 h-)
	    (float-vector -35  22.5 h-)
	    (float-vector  35  22.5 h-)
	    (float-vector  36.5  20 h-)
	    (float-vector  38  10.5 h-)
	    (float-vector  39  4 h-)
	    (float-vector  39 -4 h-)
	    (float-vector  38 -10.5 h-)
	    (float-vector  36.5 -20 h-)
	    (float-vector  35 -22.5 h-)
	    )
	   (float-vector 0 0 height)))
	 (sbod bod)
	 (cyl (make-cylinder 11 (* height 6)))
	 (cyl0 (make-cylinder 1.6 (* height 6)))
	 (cyl1 (make-cylinder 3 (* height 6)))
	 (holes (list
		 (list "uph1" (float-vector -34  -10.5 0.0) :-z 1 2)
		 (list "uph2" (float-vector -34   10.5 0.0) :-z 1 2)
		 (list "uph3" (float-vector -13   10.5 0.0) :-z 1 2)
		 (list "uph4" (float-vector -13  -10.5 0.0) :-z 1 2)
		 (list "uph5" (float-vector  13  -10.5 0.0) :-z 1 2)
		 (list "uph6" (float-vector  13   10.5 0.0) :-z 1 2)
		 (list "uph7" (float-vector  34   10.5 0.0) :-z 1 2)
		 (list "uph8" (float-vector  34  -10.5 0.0) :-z 1 2)
		 (list "downh1" (float-vector -34  -10.5 h-) :z 1 2)
		 (list "downh2" (float-vector -34   10.5 h-) :z 1 2)
		 (list "downh3" (float-vector -13   10.5 h-) :z 1 2)
		 (list "downh4" (float-vector -13  -10.5 h-) :z 1 2)
		 (list "downh5" (float-vector  13  -10.5 h-) :z 1 2)
		 (list "downh6" (float-vector  13   10.5 h-) :z 1 2)
		 (list "downh7" (float-vector  34   10.5 h-) :z 1 2)
		 (list "downh8" (float-vector  34  -10.5 h-) :z 1 2)
		 (list "centerh1" (float-vector 0   0.0   0.0) :-z 14 2)
		 (list "centerh2" (float-vector 0   0.0  h-) :z  14 2)
		 ))
	 (c (make-cascoords :pos (float-vector 0 0 h-)))
	 (*contact-threshold* 0.000001)
	 (*coplanar-threshold* 0.000001)
	 (*epsilon* 0.000001)
	 (z- (* height -2.5))
	 cbod)
    (send cyl0 :locate (float-vector -13 -10.5 z-) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector -34 -10.5 z-) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector -13 10.5 z-) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector -34 10.5 z-) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector 13 -10.5 z-) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector 34 -10.5 z-) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector 13 10.5 z-) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector 34 10.5 z-) :world)
    (setq bod (body- bod cyl0))
    (send cyl :locate (float-vector 0 0 z-) :world)
    (setq bod (body- bod cyl))
    (send cyl :locate (float-vector 23.5 0 z-) :world)
    (setq bod (body- bod cyl))
    (send cyl :locate (float-vector -23.5 0 z-) :world)
    (setq bod (body- bod cyl))
    (dolist (x (list -20 20))
      (dolist (y (list -20 20))
	(send cyl1 :locate (float-vector x y z-) :world)
	(setq bod (body- bod cyl1))))
    (setq bod (kxr-make-kxr-body name sbod bod holes :color *kxr-white-color*))
    (setf (get bod :joint-coord) c)
    (send bod :assoc c)
    bod)
  )

(defun kxr-body-plate (&optional (name "body-plate"))
  (let* ((bod
	  (make-prism
	   (list
	    (float-vector -55 -47.5  0)
	    (float-vector -58 -44.5  0)
	    (float-vector -58  44.5  0)
	    (float-vector -55  47.5  0)
	    (float-vector -10  47.5  0)
	    (float-vector   0  37.5  0)
	    (float-vector   0 -37.5  0)
	    (float-vector -10 -47.5  0)
	    )
	   (float-vector 0 0 3)))
	 (sbod bod)
	 (cylc
	  (make-cylinder 10 5))
	 (cylh
	  (make-cylinder 1.05 5))
	 (c (make-cascoords :pos (float-vector (+ -33 -10.5)  0 3)))
	 (holes
	  (list
	   (list "baseh0" (float-vector 0.0 0.0 0.0) :-z 1 2)
	   ))
	 )
    (send cylc :locate (float-vector -2 0 -1))
    (setq bod (body- bod cylc))
    (dotimes (i 5)
      (push (list (format nil "l5up~A" i)
		  (float-vector (+ -12 (* i -10.5))  -43.5 3) :-z
		  2 3) holes)
      (push (list (format nil "r5up~A" i)
		  (float-vector (+ -12 (* i -10.5))  43.5 3) :-z
		  2 3) holes))
    (dotimes (i 4)
      (push (list (format nil "l4up~A" i)
		  (float-vector (+ -22.5 (* i -10.5))  -22.5 3) :-z
		  2 3) holes)
      (push (list (format nil "r4up~A" i)
		  (float-vector (+ -22.5 (* i -10.5))  22.5 3) :-z
		  2 3) holes))
    (dotimes (i 3)
      (push (list (format nil "l3up~A" i)
		  (float-vector (+ -33 (* i -10.5))  -10.5 3) :-z
		  2 3) holes)
      (push (list (format nil "r3up~A" i)
		  (float-vector (+ -33 (* i -10.5))  10.5 3) :-z
		  2 3) holes))
    (dolist (h holes)
      (send cylh :locate (cadr h) :world)
      (send cylh :translate (float-vector 0 0 -4) :world)
      (setq bod (body- bod cylh)))
    (setq bod (kxr-make-kxr-body name sbod bod holes :color :white))
    (setf (get bod :joint-coord) c)
    (send bod :assoc c)
    bod)
  )

(defun kxr-body-cut-plate (&optional (name "body-cut-plate"))
  (let* ((bod
	  (make-prism
	   (list
	    (float-vector -13 -47.5  0)
	    (float-vector -16 -44.5  0)
	    (float-vector -16  44.5  0)
	    (float-vector -13  47.5  0)
	    (float-vector  13  47.5  0)
	    (float-vector  16  44.5  0)
	    (float-vector  16 -44.5  0)
	    (float-vector  13 -47.5  0)
	    )
	   (float-vector 0 0 3)))
	 (sbod bod)
	 (cylh
	  (make-cylinder 1.05 5))
	 holes)
    (dotimes (i 3)
      (push (list (format nil "l5up~A" i)
		  (float-vector (+ 10.5 (* i -10.5))  -43.5 3) :-z
		  2 3) holes)
      (push (list (format nil "r5up~A" i)
		  (float-vector (+ 10.5 (* i -10.5))  43.5 3) :-z
		  2 3) holes)
      (push (list (format nil "l4up~A" i)
		  (float-vector (+ 10.5 (* i -10.5)) -22.5 3) :-z
		  2 3) holes)
      (push (list (format nil "r4up~A" i)
		  (float-vector (+ 10.5 (* i -10.5))  22.5 3) :-z
		  2 3) holes)
      (push (list (format nil "l3up~A" i)
		  (float-vector (+ 10.5 (* i -10.5))  -10.5 3) :-z
		  2 3) holes)
      (push (list (format nil "r3up~A" i)
		  (float-vector (+ 10.5 (* i -10.5))  10.5 3) :-z
		  2 3) holes))
    (dolist (h holes)
      (send cylh :locate (cadr h) :world)
      (send cylh :translate (float-vector 0 0 -4) :world)
      (setq bod (body- bod cylh)))
    (setq bod (kxr-make-kxr-body name sbod bod holes :color :white))
    bod)
  )

(defun kxr-body-plate-spacer (&optional (name "body-plate-spacer"))
  (let* ((bod
	  (make-cylinder 21 3 :segments 15))
	 (sbod bod)
	 (cyl0
	  (make-cylinder 10 10 :segments 15))
	 (cyl1
	  (make-cylinder 17 10 :segments 15))
	 (cut0
	  (make-prism
	   (list (float-vector -30 -30 -5)
		 (float-vector -30 30 -5)
		 (float-vector 0 30 -5)
		 (float-vector 0 -30 -5))
	   (float-vector 0 0 12)))
	 (holes
	  (list (list "uph1" (float-vector 0 0 3) :-z 21 6)
		(list "downh1" (float-vector 0 0 3) :z 21 6)))
	 cbod)
    (send cyl0 :locate (float-vector 0 0 -3))
    (setq bod (body- bod cyl0))
    (send cyl1 :locate (float-vector 0 0 2))
    (setq bod (body- bod cyl1))
    (setq bod (body- bod cut0))
    (setq bod (kxr-make-kxr-body name sbod bod holes :color :white))
    bod)
  )

(defun kxr-back-pack (&optional (name "back-pack"))
  (let* (l
	 (cboard (make-cascoords :name "cboard"))
	 (hinge
	  (make-prism
	   (list
	    (float-vector -8 2 -9)
	    (float-vector -2 8 -9)
	    (float-vector 2 8 -9)
	    (float-vector 8 2 -9)
	    (float-vector 8 -2 -9)
	    (float-vector 2 -8 -9)
	    (float-vector -2 -8 -9)
	    (float-vector -8 -2 -9))
	   (float-vector 0 0 18)))
	 (cyl0
	  (make-cylinder 4 10))
	 (cyl1
	  (make-cylinder 4.2 22 :segments 7))
	 (bod1
	  (make-prism
	   (list
	    (float-vector -17.5 0 10)
	    (float-vector -16.5 1.5 10)
	    (float-vector -15 2.5 10)
	    (float-vector -5 2.5 10)
	    (float-vector -2.5 5 10)
	    (float-vector -2.5 15 10)
	    (float-vector -1.5 16.5 10)
	    (float-vector 0 17.5 10)
	    (float-vector 1.5 16.5 10)
	    (float-vector 2.5 15 10)
	    (float-vector 2.5 2.5 10)
	    (float-vector 2 -2 10)
	    (float-vector -2.5 -2.5 10)
	    (float-vector -15 -2.5 10)
	    (float-vector -16.5 -1.5 10)
	    )
	   (float-vector 0 0 21))
	  )
	 (bod0
	  (make-prism
	   (list
	    (float-vector -80 0 30.5)
	    (float-vector -80 23 28)
	    (float-vector -80 42 20)
	    (float-vector -80 48 16)
	    (float-vector -80 48 12)
	    (float-vector -80 40 -2)
	    (float-vector -80 -40 -2)
	    (float-vector -80 -48 12)
	    (float-vector -80 -48 16)
	    (float-vector -80 -42 20)
	    (float-vector -80 -23 28)
	    )
	   (float-vector 160 0 0)
	   ))
	 (bod
	  (make-prism
	   (list
	    (float-vector -57 -46.5  0)
	    (float-vector -57  46.5  0)
	    (float-vector  -6  46.5  0)
	    (float-vector   0  40.5  0)
	    (float-vector   5  38.5  0)
	    (float-vector  19  37.5  0)
	    (float-vector  20  30.5  0)
	    (float-vector  21  20.5  0)
	    (float-vector 22.5 10  0)
	    (float-vector 22.5 -10  0)
	    (float-vector  21  -20.5  0)
	    (float-vector  20  -30.5  0)
	    (float-vector  19  -37.5  0)
	    (float-vector   5  -38.5  0)
	    (float-vector   0  -40.5  0)
	    (float-vector  -6  -46.5  0)
	    )
	   (float-vector 0 0 32)))
	 (cbod
	  (make-prism
	   (list
	    (float-vector  12    -12  10)
	    (float-vector  10.5  -13  10)
	    (float-vector   9    -13  10)
	    (float-vector   2     -9  10)
	    (float-vector  -2     -9  10)
	    (float-vector  -9    -13  10)
	    (float-vector -10.5  -13  10)
	    (float-vector -12    -12  10)
	    (float-vector -13  -10.5  10)
	    (float-vector -13     -9  10)
	    (float-vector -4     -4  10)
	    ;;(float-vector -3     -1  10)
	    ;;(float-vector -3      1  10)
	    (float-vector -4      4  10)
	    (float-vector -13     9  10)
	    (float-vector -13  10.5  10)
	    (float-vector -12    12  10)
	    (float-vector -10.5  13  10)
	    (float-vector  -9    13  10)
	    (float-vector  -2     9  10)
	    (float-vector   2     9  10)
	    (float-vector   9    13  10)
	    (float-vector  10.5  13  10)
	    (float-vector  12    12  10)
	    (float-vector  13  10.5  10)
	    (float-vector  13     9  10)
	    (float-vector   4     4  10)
	    ;;(float-vector   3     1  10)
	    ;;(float-vector   3    -1  10)
	    (float-vector   4    -4  10)
	    (float-vector  13    -9  10)
	    (float-vector  12   -12  10)
	    (float-vector  13  -10.5  10)
	    )
	   (float-vector 0 0 21)))
	 (holes
	  (list
	   (list "bottomuh0" (float-vector 0 0 0) :z  10 6)
	   (list "bottomdh1" (float-vector 0 0 0) :-z 10 6)
	   (list "uph0" (float-vector -36.5 0 31) :z  10 6)
	   (list "uph1" (float-vector -36.5 0 31) :-z 10 6)
	   ))
	 sbod
	 (c (make-cascoords)))
    (send c :locate (float-vector 0 0 31))
    (send cbod :assoc c)
    (setq bod (body* bod bod0))
    (setq sbod bod)
    (send hinge :rotate pi/2 :x :world)
    (send hinge :locate (float-vector -56 -24 14) :world)
    (setq bod (body+ bod hinge))
    (send hinge :locate (float-vector -56 24 14) :world)
    (setq bod (body+ bod hinge))
    (send cyl0 :locate (float-vector 14.5 -29 20) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector 14.5 29 20) :world)
    (setq bod (body- bod cyl0))
    ;;(send cyl1 :locate (float-vector -6.5 -36 10) :world)
    (send bod1 :rotate (deg2rad -45) :z :world)
    (send bod1 :locate (float-vector -6.5 -36.5 0) :world)
    (setq bod (body+ bod bod1))
    (send bod1 :locate (float-vector -36.5 -36.5 0) :world)
    (setq bod (body+ bod bod1))
    (send bod1 :rotate pi :z :world)
    (send bod1 :locate (float-vector -6.5 36.5 0) :world)
    (setq bod (body+ bod bod1))
    (send bod1 :locate (float-vector -36.5 36.5 0) :world)
    (setq bod (body+ bod bod1))
    (send cbod :locate #f(-36.5 0 0) :world)
    (setq bod (body+ bod cbod))
    (setq l (kxr-make-kxr-body name sbod bod holes :color :white))
    (setf (get l :joint-coord) c)
    (send l :assoc c)
    (setf (get l :weight) 66.0)
    (send cboard :locate (float-vector -32 26 5.5) :world)
    (send l :assoc cboard)
    (setf (get l :joint-coord) (send l :find-named-coords "uph0"))
    l)
  )

(defun kxr-joint-base-back-pack (&optional (name "joint-base-back-pack"))
  (let* ((bod (make-cube 30 60 64))
	 (sbod bod)
	 (c+ (make-cube 24 67 44))
	 (c- (make-cube 100 100 20))
	 ;;(b- (make-cube 27 100 34))
	 (cboard (make-cascoords :name "cboard"))
	 l (c (make-cascoords)))
    (send c+ :locate (float-vector -25 0 (+ -10 -2)) :world)
    (send bod :locate (float-vector 0 0 -2) :world)
    (setq bod (body+ bod c+))
    (send c- :locate (float-vector 0 0 -40) :world)
    (setq bod (body- bod c-))
    ;;(send b- :locate (float-vector -1 0 -10) :world)
    ;;(setq bod (body- bod b-))
    (setq l (kxr-make-kxr-body name sbod bod nil))
    (send l :put :weight 145)
    (send cboard :rotate -pi/2 :y :world)
    (send cboard :locate (float-vector -15 -15 -15) :world)
    (send l :assoc cboard)
    l)
  )
(defun kxr-small-back-pack (&optional (name "small-back-pack"))
  (let* ((bod (make-cube 46 65 50))
	 (sbod bod)
	 (c+ (make-cube 20 20 29))
	 (cboard (make-cascoords :name "cboard"))
	 l (c (make-cascoords)))
    (send c+ :locate (float-vector -25 -20 0) :world)
    (setq bod (body+ bod c+))
    (setq l (kxr-make-kxr-body name sbod bod nil))
    (send l :put :weight 145)
    (send cboard :rotate -pi/2 :y :world)
    (send cboard :locate (float-vector 20 -15 -5) :world)
    (send l :assoc cboard)
    l)
  )
(defun kxr-small-back-pack-orig (&optional (name "small-back-pack-orig"))
  (let* ((bod (make-cube 46 65 50))
	 (cboard (make-cascoords :name "cboard"))
	 l (c (make-cascoords)))
    (setq l (kxr-make-kxr-body name bod bod nil))
    (send l :put :weight 145)
    (send cboard :rotate -pi/2 :y :world)
    (send cboard :locate (float-vector 20 -15 -5) :world)
    (send l :assoc cboard)
    l)
  )

(defun kxr-raspi-back-pack (&optional (name "raspi-back-pack"))
  (let* ((bod (make-cube 50 103 75))
	 (cboard (make-cascoords :name "cboard"))
	 l (c (make-cascoords)))
    (setq l (kxr-make-kxr-body name bod bod nil))
    (send l :put :weight 125)
    (send cboard :rotate -pi/2 :y :world)
    (send cboard :locate (float-vector 20 -15 -5) :world)
    (send l :assoc cboard)
    l)
)

(defun kxr-auv-back-pack (&optional (name "auv-back-pack"))
  (let* ((bod0;; (make-cube 106 106 66))
	  (make-prism
	   (list (float-vector 31 53 0)
		 (float-vector 31 -53 0)
		 (float-vector (- 31 106) -53 0)
		 (float-vector (- 31 106) 53 0))
	   (float-vector 0 0 66)))
	 (sbod bod0)
	 (bod1 ;; (make-cube 112 112 45))
	  (make-prism
	   (list (float-vector 34 56 33)
		 (float-vector 34 -56 33)
		 (float-vector (- 34 112) -53 33)
		 (float-vector (- 34 112) 53 33))
	   (float-vector 0 0 45)))
	 (c+ (make-cube 16 36 27))
	 (cboard (make-cascoords :name "cboard"))
	 (*contact-threshold* 0.0001)
	 l (c (make-cascoords)))
    (send c :locate (float-vector (- 31 53) 0 (+ 45 33)))
    (setq bod0 (body+ bod0 bod1))
    (send c+ :locate (float-vector (- (- 106 31))   -32 (/ 29 2.0)) :world)
    (setq bod0 (body+ bod0 c+))
    (setq l (kxr-make-kxr-body name sbod bod0 nil))
    (send l :put :joint-coord c)
    (send l :put :weight 145)
    (send cboard :locate (float-vector -40 0 10) :world)
    (send cboard :rotate -pi/2 :z)
    (send l :assoc cboard)
    l)
  )

(defun kxr-auv-back-pack-nofloat (&optional (name "auv-back-pack-nofloat"))
  (let* ((bod0;; (make-cube 106 106 66))
	  (make-prism
	   (list (float-vector 31 53 0)
		 (float-vector 31 -53 0)
		 (float-vector (- 31 106) -53 0)
		 (float-vector (- 31 106) 53 0))
	   (float-vector 0 0 51)))
	 (sbod bod0)
	 (c+ (make-cube 16 36 27))
	 (cboard (make-cascoords :name "cboard"))
	 (*contact-threshold* 0.0001)
	 l (c (make-cascoords)))
    (send c :locate (float-vector (- 31 53) 0 (+ 45 33)))
    (send c+ :locate (float-vector (- (- 106 31))   -32 (/ 29 2.0)) :world)
    (setq bod0 (body+ bod0 c+))
    (setq l (kxr-make-kxr-body name sbod bod0 nil))
    (send l :put :joint-coord c)
    (send l :put :weight 145)
    (send cboard :locate (float-vector -40 0 10) :world)
    (send cboard :rotate -pi/2 :z)
    (send l :assoc cboard)
    l)
  )

(defun kxr-auv-head-old (&optional (name "auv-head"))
  (require :eus2wrl)
  (let* (;;(bod0 (make-cube 78 44 10))
	 ;;(bod1 (make-cube 70 36 28))
	 ;;(c (make-cylinder 10 5))
	 (bs (wrl2eus "stls/M5Stickhead_wp_single_rev1.WRL" 1000.0))
	 holes (j (make-cascoords))
	 blist (i 0)
	 cam l (c (make-cascoords)))
    (send bs :rotate pi/2 :y)
    (send bs :translate #f(-13.0 -34.0 -3.0) :world)
    (dolist (b (send bs :bodies))
      (push (kxr-make-kxr-body (format nil "~A~A" name (incf i))
			       b b nil) blist))
    (setq l (kxr-bodyset-create (reverse blist) j holes))
    (send l :put :joint-coord j)
    (send l :put :weight 145)
    (setq cam (make-cascoords :coords (send c :copy-worldcoords)))
    (send cam :rotate -pi/2 :x)
    (send cam :translate #f(10 0 0) :world)
    (send l :assoc cam)
    (send l :put :cameras (list cam))
    l)
  )

(defun kxr-auv-head (&optional (name "auv-head"))
  (let* (
	 (b (stl2eus "stls/M5Stickhead_wp_single_rev1_model.STL" :scale 1.0))
	 (bs (kxr-make-kxr-body name b b nil))
	 holes (j (make-cascoords))
	 blist (i 0)
	 cam l (c (make-cascoords)))
    (send bs :rotate pi/2 :y)
    (send bs :locate #f(-25.0 -53.0 40) :world)
    (setq blist (list bs))
    (setq l (kxr-bodyset-create blist j holes))
    (send l :put :joint-coord j)
    (send l :put :weight 145)
    (setq cam (make-cascoords :coords (send c :copy-worldcoords)))
    (send cam :rotate pi/2 :x)
    (send cam :translate #f(2.5 0 18) :world)
    (send l :assoc cam)
    (send l :put :cameras (list cam))
    l)
  )

(defun kxr-bottom-spacer (&optional (name "bottom-spacer"))
  (kxr-bottom-spacer-aux nil name))
(defun kxr-bottom-spacer2 (&optional (name "bottom-spacer2"))
  (kxr-bottom-spacer-aux t name))
(defun kxr-bottom-spacer-aux (hole-pos &optional (name "bottom-spacer-aux"))
  (let* ((bod0
	  (make-prism
	   (list
	    (float-vector 0 20   50)    
	    (float-vector 0 20  -50)
	    (float-vector 0 -20  -50)
	    (float-vector 0 -20  50)
	    )
	   (float-vector 10 0 0)))
	 (bod-list
	  (list
	   (float-vector 0 11    34.5)
	   (float-vector 0 12.5  33.5)
	   (float-vector 0 13.5  31.5)
	   (float-vector 0 13.5  -1)
	   (float-vector 0 12.5  -2.5)
	   (float-vector 0 11    -3)
	   (float-vector 0 -11  -3)
	   (float-vector 0 -12.5  -2.5)
	   (float-vector 0 -13.5  -1)
	   (float-vector 0 -13.5  31.5)
	   (float-vector 0 -12.5  33.5)
	   (float-vector 0 -11  34.5)
	   ))
	 (offset (if hole-pos #f(0 0 -21) #f(0 0 0)))
	 (bod
	  (make-prism
	   (if hole-pos
	       (mapcar #'(lambda (x) (v+ x offset)) bod-list)
	       bod-list)
	   (float-vector 6.5 0 0)))
	 (cyl0
	  (make-cylinder 6.5 20 :segments 13))
	 (holes
	  (list
	   (list "bottomh0" #f(0 0  0) :-x 1 6)
	   (list "bottomh1" #f(0 0  21.0) :-x 1 6)
	   (list "uph1" #f(  6 -10.5  31.5) :x 1 6)
	   (list "uph2" #f(  6  10.5  31.5) :x 1 6)
	   (list "uph3" #f(  6  10.5  21.0) :x 1 6)
	   (list "uph4" #f(  6  10.5  10.5) :x 1 6)
	   (list "uph5" #f(  6 -10.5  10.5) :x 1 6)
	   (list "uph6" #f(  6 -10.5  21.0) :x 1 6)
	   (list "downh1" #f(0 -10.5  31.5) :-x 1 6)
	   (list "downh2" #f(0  10.5  31.5) :-x 1 6)
	   (list "downh3" #f(0  10.5  21.0) :-x 1 6)
	   (list "downh4" #f(0  10.5  10.5) :-x 1 6)
	   (list "downh5" #f(0  10.5  0) :-x 1 6)
	   (list "downh6" #f(0  -10.5 0) :-x 1 6)
	   (list "downh7" #f(0  -10.5 10.5) :-x 1 6)
	   (list "downh8" #f(0  -10.5 21.0) :-x 1 6)))
	 sbod)
    (send bod0 :rotate (atan2 3.5 8.5) :y)
    (send bod0 :translate (v+ offset (float-vector 3 0 0)) :world)
    (setq bod (body- bod bod0))
    (setq sbod bod)
    (send cyl0 :rotate pi/2 :y :world)
    (send cyl0 :locate (v+ offset (float-vector -5 0 -3.5)) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (v+ offset (float-vector -5 0 0)) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (v+ offset (float-vector -5 0 21)) :world)
    (setq bod (body- bod cyl0))
    (if hole-pos
	(setq holes
	      (mapcar #'(lambda (x)
			  (list (car x) (v+ (cadr x) offset) (caddr x)
				(elt x 3) (elt x 4)))
		      holes)))
    (setq bod (kxr-make-kxr-body name sbod bod holes))
    bod)
  )

(defun kxr-flat-frame (&optional (name "flat-frame"))
  (let* ((bod0
	  (make-prism
	   (list
	    (float-vector -1 13 30)
	    (float-vector -1 13 -30)
	    (float-vector -1 -13 -30)
	    (float-vector -1 -13 30)
	    )
	   (float-vector 4 0 0)))
	 (bod
	  (make-prism
	   (list
	    (float-vector 0 13.5 27)
	    (float-vector 0 15   25.5)
	    (float-vector 0 15   -25.5)
	    (float-vector 0 13.5 -27)
	    (float-vector 0 -13.5 -27)
	    (float-vector 0 -15   -25.5)
	    (float-vector 0 -15   25.5)
	    (float-vector 0 -13.5 27)
	    )
	   (float-vector 5 0 0)))
	 (sbod bod)
	 (cyl0
	  (make-cylinder 6.75 20 :segments 13))
	 (cyl1
	  (make-cylinder (/ 3.8 2) 10))
	 (cyl2
	  (make-cylinder (/ 2.1 2) 10))
	 holes
	 cbod)
    (setq bod (body- bod bod0))
    (send cyl0 :rotate pi/2 :y :world)
    (send cyl0 :locate (float-vector -5 0 24) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector -5 0 26.5) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector -5 0 -24) :world)
    (setq bod (body- bod cyl0))
    (send cyl0 :locate (float-vector -5 0 -26.5) :world)
    (setq bod (body- bod cyl0))
    
    (send cyl1 :rotate pi/2 :y :world)
    (send cyl1 :locate (float-vector 4.5 0 0) :world)
    (send cyl2 :rotate pi/2 :y :world)
    (send cyl2 :locate (float-vector -3 0 0) :world)
    (setq cyl1 (body+ cyl1 cyl2))
    (dotimes (i 3)
      (push (list (format nil "luup~A" i)
		  (float-vector 3 10.5 (+ -3 (* -10.5 i))) :-x 1 2) holes)
      (push (list (format nil "ruup~A" i)
		  (float-vector 3 -10.5 (+ -3 (* -10.5 i))) :-x 1 2) holes)
      (push (list (format nil "ldup~A" i)
		  (float-vector 3 10.5 (+ 3 (* 10.5 i))) :-x 1 2) holes)
      (push (list (format nil "rdup~A" i)
		  (float-vector 3 -10.5 (+ 3 (* 10.5 i))) :-x 1 2) holes))
    (dolist (h holes)
      (send cyl1 :locate (cadr h) :world)
      (send cyl1 :translate #f(-5 0 0) :world)
      (setq bod (body- bod cyl1)))
    (push (list "axis1" #f(3 0  24) :-x 6.5 2) holes)
    (push (list "axis2" #f(3 0 -24) :-x 6.5 2) holes)
    (push (list "lupc" #f(3 10.5 0) :-x 1.4 2) holes)
    (push (list "rupc" #f(3 -10.5 0) :-x 1.4 2) holes)
    (push (list "ldownc" #f(5 10.5 0) :x 1.4 2) holes)
    (push (list "rdownc" #f(5 -10.5 0) :x 1.4 2) holes)
    (dotimes (i 3)
      (push (list (format nil "ludown~A" i)
		  (float-vector 5 10.5 (+ -3 (* -10.5 i))) :x 1 2) holes)
      (push (list (format nil "rudown~A" i)
		  (float-vector 5 -10.5 (+ -3 (* -10.5 i))) :x 1 2) holes)
      (push (list (format nil "lddown~A" i)
		  (float-vector 5 10.5 (+ 3 (* 10.5 i))) :x 1 2) holes)
      (push (list (format nil "rddown~A" i)
		  (float-vector 5 -10.5 (+ 3 (* 10.5 i))) :x 1 2) holes))
    (kxr-make-kxr-body name sbod bod holes))
  )

(defun kxr-angle-bracket (&optional (name "angle-bracket"))
  (let* ((bod
	  (make-prism
	   (list
	    (float-vector -15 21 9)
	    (float-vector -15 21 -9)
	    (float-vector -15 -13.5 -9)
	    (float-vector -15 -13.5 0)
	    (float-vector -15 -10 2.5)
	    (float-vector -15 -3 6)
	    (float-vector -15  3 7.5)
	    (float-vector -15 13 8.7)
	    (float-vector -15 16 9)
	    )
	   (float-vector 15 0 0)))
	 (sbod bod)
	 (cyl
	  (make-cylinder 2 40))
	 (holes
	  (list (list "uph1" (float-vector 0 10.5 -2.5) :-x 1 13)
		(list "uph2" (float-vector 0 -10.5 -2.5) :-x 1 13)
		(list "downh1" (float-vector 0 10.5 -2.5) :x 1 13)
		(list "downh2" (float-vector 0 -10.5 -2.5) :x 1 13)
		(list "sideh1" (float-vector 0 18.0 0) :-x 1.3 13)
		(list "sideh2" (float-vector 0 18.0 0) :x 1.3 13)))
	 cbod)
    (send cyl :rotate pi/2 :y :world)
    (send cyl :locate (float-vector -17 10.5 -2.5) :world)
    (setq bod (body- bod cyl))
    (send cyl :locate (float-vector -17 -10.5 -2.5) :world)
    (setq bod (body- bod cyl))
    (kxr-make-kxr-body name sbod bod holes)
    ))

(defun kxr-sensor-angle-bracket (&optional (name "sensor-angle-bracket"))
  (let* ((bod
	  (make-prism
	   (list
	    (float-vector -15 21 9)
	    (float-vector -15 21 -9)
	    (float-vector -15 -13.5 -9)
	    (float-vector -15 -13.5 7)
	    (float-vector -15 15 7)
	    (float-vector -15 15 9)
	    )
	   (float-vector 30 0 0)))
	 (sbod bod)
	 (c1- (make-cube 17 17 30))
	 (c2- (make-cube 26 32 18))
	 (cyl
	  (make-cylinder 2 40))
	 (c (make-cascoords :pos #f(0 0 7)))
	 (holes
	  (list (list "uph1" (float-vector 0 10.5 -2.5) :-x 1 13)
		(list "uph2" (float-vector 0 -10.5 -2.5) :-x 1 13)
		(list "downh1" (float-vector 0 10.5 -2.5) :x 1 13)
		(list "downh2" (float-vector 0 -10.5 -2.5) :x 1 13)
		(list "sideh1" (float-vector 0 18.0 0) :-x 1.3 13)
		(list "sideh2" (float-vector 0 18.0 0) :x 1.3 13)))
	 cbod l)
    (send cyl :rotate pi/2 :y :world)
    (send cyl :locate (float-vector -17 10.5 -2.5) :world)
    (setq bod (body- bod cyl))
    (send cyl :locate (float-vector -17 -10.5 -2.5) :world)
    (setq bod (body- bod cyl))
    (setq bod (body- bod c1-))
    (send c2- :translate #f(0 0 -6))
    (setq bod (body- bod c2-))
    (setq l (kxr-make-kxr-body name sbod bod holes))
    (setf (get l :sensor-coord) c)
    (send l :assoc c)
    l))

(defun kxr-finger-a (&optional (name "finger-a"))
  (kxr-finger-aux name t))
(defun kxr-finger-b (&optional (name "finger-b"))
  (kxr-finger-aux name nil))
(defun kxr-finger-aux (name &optional (a t))
  (let* ((bod
	  (make-prism
	   (list
	    (float-vector (if a 0 -4)  0 13)
	    ;;(float-vector (if a 0 -4) 45 13)
	    ;;(float-vector (if a 0 -4) 45 7)
	    ;;(float-vector (if a 0 -4) 19 7)
	    ;;(float-vector (if a 0 -4) 17 5)
	    ;;(float-vector (if a 0 -4) 15 3)
	    (float-vector (if a 0 -4) 15 13)
	    (float-vector (if a 0 -4) 15 7)
	    (float-vector (if a 0 -4) 14 5)
	    (float-vector (if a 0 -4) 13 0)
	    (float-vector (if a 0 -4) (* 13 (cos (deg2rad 30))) (* 13 (sin (deg2rad -30))))
	    (float-vector (if a 0 -4) (* 13 (cos (deg2rad 45))) (* 13 (sin (deg2rad -45))))
	    (float-vector (if a 0 -4) (* 13 (cos (deg2rad 60))) (* 13 (sin (deg2rad -60))))
	    (float-vector (if a 0 -4) (* 13 (cos (deg2rad 90))) (* 13 (sin (deg2rad -90))))
	    (float-vector (if a 0 -4) (* 13 (cos (deg2rad 120))) (* 13 (sin (deg2rad -120))))
	    (float-vector (if a 0 -4) (* 13 (cos (deg2rad 135))) (* 13 (sin (deg2rad -135))))
	    (float-vector (if a 0 -4) (* 13 (cos (deg2rad 150))) (* 13 (sin (deg2rad -150))))
	    (float-vector (if a 0 -4) (* 13 (cos (deg2rad 180))) (* 13 (sin (deg2rad -180))))
	    (float-vector (if a 0 -4) (* 13 (cos (deg2rad 210))) (* 13 (sin (deg2rad -210))))
	    (float-vector (if a 0 -4) (* 13 (cos (deg2rad 225))) (* 13 (sin (deg2rad -225))))
	    (float-vector (if a 0 -4) (* 13 (cos (deg2rad 240))) (* 13 (sin (deg2rad -240))))
	    )
	   (float-vector 4 0 0)))
	 (sbod bod)
	 (cyl
	  (make-cylinder 4 50))
	 (holes
	  (list
	   (list "uph1" (float-vector (if a 4 -4) 0 0) (if a :-x :x) 4 3)
	   (list "uph2" (float-vector (if a 4 -4) (- 45 13) 10) (if a :-x :x) 4 3)))
	 cbod)
    (send cyl :rotate pi/2 :y :world)
    (send cyl :locate (float-vector -25 0 0) :world)
    (setq bod (body- bod cyl))
    (kxr-make-kxr-body name sbod bod holes)
    ))


(defun kxr-arm-aux (len &key (upper t) (shrink 3) ((:radius r) 8) (depth 5.5) (thickness 4.5)
			(name (format nil "kxr-arm-aux-~A-~A" depth thickness)) 
			)
  (if (null len) (setq len 26))
  (let* ((cyl0 (make-cylinder (if upper 1.55 3.55) 20))
	 (cyl (make-cylinder (if upper 3.95 6) thickness)) ;; 4
	 (bod0
	  (make-prism
	   (list
	    (float-vector -5 15 (+ len 20))
	    (float-vector -5 15 3)
	    (float-vector -5 -15 3)
	    (float-vector -5 -15 (+ len 20))
	    )
	   (float-vector (+ 5 (- depth thickness))  0 0)))
	 (bod
	  (make-prism
	   (list
	    ;;(float-vector 0 (* (- r) (cos (deg2rad -30))) (+ len (- 3) (* r (sin (deg2rad -30)))))
	    (float-vector 0 (* (- r) (cos (deg2rad 0))) (+ len (- 3) (* r (sin (deg2rad 0)))))
	    (float-vector 0 (* (- r) (cos (deg2rad 30))) (+ len (- 3) (* r (sin (deg2rad 30)))))
	    (float-vector 0 (* (- r) (cos (deg2rad 60))) (+ len (- 3) (* r (sin (deg2rad 60)))))
	    (float-vector 0 (* (- r) (cos (deg2rad 90))) (+ len (- 3) (* r (sin (deg2rad 90)))))
	    (float-vector 0 (* (- r) (cos (deg2rad 120))) (+ len (- 3) (* r (sin (deg2rad 120)))))
	    (float-vector 0 (* (- r) (cos (deg2rad 150))) (+ len (- 3) (* r (sin (deg2rad 150)))))
	    (float-vector 0 (* (- r) (cos (deg2rad 180))) (+ len (- 3) (* r (sin (deg2rad 180)))))
	    ;;(float-vector 0 (* (- r) (cos (deg2rad 210))) (+ len (- 3) (* r (sin (deg2rad 210)))))
	    (float-vector 0 (- r shrink) (- len 2.5 6))
	    (float-vector 0 (- r shrink) r)
	    (float-vector 0 r 4)
	    (float-vector 0 r -3)
	    (float-vector 0 (- r) -3)
	    (float-vector 0 (- r) 4)
	    (float-vector 0 (+ (- r) shrink) r)
	    (float-vector 0 (+ (- r) shrink) (- len 2.5 6)))
	   (float-vector depth 0 0)))
	 (sbod bod)
	 (holes
	  (list (list "uph1" (float-vector depth 0 0) :-x 1.5 5)
		(list "uph2" (float-vector depth 0 (- len 3)) :-x 1.5 5)
		(list "downh1" (float-vector 0 0 0) :-x 1.5 5)
		(list "downh2" (float-vector 0 0 (- len 3)) :x 1.5 5)))
	 cbod (j (make-cascoords)))
    (setq bod (body- bod bod0))
    (send cyl0 :rotate pi/2 :y :world)
    (send cyl0 :locate (float-vector (+ -5 (- depth thickness)) 0 (- len 3)) :world)
    (send j :translate #f(0 0 5) :world)
    (send cyl :assoc j)
    (send cyl :rotate pi/2 :y :world)    
    (send cyl :locate (float-vector (+ (- depth thickness) 0.5) 0 (- len 3)) :world)
    (setq bod (body+ bod cyl))
    (setq bod (body- bod cyl0))
    (kxr-make-kxr-body (format nil "~A~A" name len) sbod bod holes
		       :joint-coord j)
    ))

(defun kxr-upper-arm (len) (if (null len) (setq len 26))
       (funcall (read-from-string (format nil "kxr-upper-arm~A" len))))

(defun kxr-bottom-arm (len) (if (null len) (setq len 26))
       (funcall (read-from-string (format nil "kxr-bottom-arm~A" len))))

(defun kxr-upper-arm20 nil (kxr-arm-aux 20 :name "upper-arm" :upper t))
(defun kxr-bottom-arm20 nil (kxr-arm-aux 20 :name "bottom-arm" :upper nil))
    
(defun kxr-upper-arm26 nil (kxr-arm-aux 26 :name "upper-arm" :upper t))
(defun kxr-bottom-arm26 nil (kxr-arm-aux 26 :name "bottom-arm" :upper nil))

(defun kxr-upper-arm28 nil (kxr-arm-aux 28 :name "upper-arm" :upper t))
(defun kxr-bottom-arm28 nil (kxr-arm-aux 28 :name "bottom-arm" :upper nil))

(defun kxr-wcross-bottom-arm28 nil (kxr-arm-aux 28 :depth 18 :upper nil))

(defun kxr-upper-arm38 nil (kxr-arm-aux 38 :name "upper-arm" :upper t))
(defun kxr-bottom-arm38 nil (kxr-arm-aux 38 :name "bottom-arm" :upper nil))

(defun kxr-flat-arm42 nil
  (kxr-arm-aux 42 :name "flat-arm42" :upper nil :shrink 0 :radius 10.5 :depth 7 :thickness 5))

(defun kxr-dyp-base (&optional (name "dyp-base"))
  (let* ((bod (make-cylinder 19 8))
	 holes)
    (kxr-make-kxr-body name bod bod holes)
    ))

(defun kxr-arm-supporter-a (&optional (name "arm-supporter-a"))
  (let* ((cyl (make-cylinder 13 3 :segments 13))
	 (cyl0 (make-cylinder 6.3 20))
	 (cyl1 (make-cylinder 8.25 10))
	 (bod
	  (make-prism
	   (list
	    (float-vector 0 13 15.25)
	    (float-vector 0 13 -29.75)
	    (float-vector 0 -13 -29.75)
	    (float-vector 0 -13 15.25)
	    )
	   (float-vector 2.5 0 0)))
	 (sbod bod)
	 (holes
	  (list
	   (list "centerh1" (float-vector 0 0 12.25) :-x 1 3)
	   (list "centerh2" (float-vector 0 0 -26.75) :-x 1 3)
	   (list "uph1" (float-vector 4 -10.5 0) :-x 1 3)
	   (list "uph2" (float-vector 4  10.5 0) :-x 1 3)
	   (list "uph3" (float-vector 4  10.5 -21.0) :-x 1 3)
	   (list "uph4" (float-vector 4 -10.5 -21.0) :-x 1 3)
	   (list "downh1" (float-vector 0 -10.5 0) :-x 1 3)
	   (list "downh2" (float-vector 0  10.5 0) :-x 1 3)
	   (list "downh3" (float-vector 0  10.5 -21.0) :-x 1 3)
	   (list "downh4" (float-vector 0 -10.5 -21.0) :-x 1 3)
	   ))
	 cbod)
    (send cyl :rotate pi/2 :y :world)
    (send cyl :locate (float-vector 1.3 0 0) :world)
    (setq bod (body+ bod cyl))
    (send cyl0 :rotate pi/2 :y :world)
    (send cyl0 :locate (float-vector -8 0 0) :world)
    (send cyl1 :rotate pi/2 :y :world)
    (send cyl1 :locate (float-vector 1 0 0) :world)
    (setq bod (body- bod cyl0))
    (setq bod (body- bod cyl1))
    (kxr-make-kxr-body name sbod bod holes)
    ))

(defun kxr-arm-supporter-b (&optional (name "arm-supporter-b"))
  (let* ((cyl0 (make-cylinder 8.25 20))
	 (bod0
	  (make-prism
	   (list
	    (float-vector -10 20 9)
	    (float-vector -10 20 -30)
	    (float-vector -10 -20 -30)
	    (float-vector -10 -20 9)
	    )
	   (float-vector 10 0 0)))
	 (bod
	  (make-prism
	   (list
	    (float-vector -4.5 (* 13 (cos (deg2rad -180))) (* 13 (sin (deg2rad 180))))
	    (float-vector -4.5 (* 13 (cos (deg2rad -150))) (* 13 (sin (deg2rad 150))))
	    (float-vector -4.5 (* 13 (cos (deg2rad -120))) (* 13 (sin (deg2rad 120))))
	    (float-vector -4.5 (* 13 (cos (deg2rad -90))) (* 13 (sin (deg2rad 90))))
	    (float-vector -4.5 (* 13 (cos (deg2rad -60))) (* 13 (sin (deg2rad 60))))
	    (float-vector -4.5 (* 13 (cos (deg2rad -30))) (* 13 (sin (deg2rad 30))))
	    (float-vector -4.5 (* 13 (cos (deg2rad 0))) (* 13 (sin (deg2rad 0))))
	    (float-vector -4.5 13 -21)
	    (float-vector -4.5 12.267 -22.767)
	    (float-vector -4.5 10.5 -23.5)
	    (float-vector -4.5 -10.5 -23.5)
	    (float-vector -4.5 -12.267 -22.767)
	    (float-vector -4.5 -13 -21)
	    )
	   (float-vector 8.8 0 0)))
	 (sbod bod)
	 (holes
	  (list
	   (list "uph1" (float-vector 4 -10.5 0) :-x 1 3)
	   (list "uph2" (float-vector 4  10.5 0) :-x 1 3)
	   (list "uph3" (float-vector 4  10.5 -21.0) :-x 1 3)
	   (list "uph4" (float-vector 4 -10.5 -21.0) :-x 1 3)
	   (list "downh0" (float-vector 0 0 0) :-x 1 3)
	   (list "downh1" (float-vector 0 -10.5 0) :-x 1 3)
	   (list "downh2" (float-vector 0  10.5 0) :-x 1 3)
	   (list "downh3" (float-vector 0  10.5 -21.0) :-x 1 3)
	   (list "downh4" (float-vector 0 -10.5 -21.0) :-x 1 3)
	   ))
	 cbod)
    (setq bod (body- bod bod0))
    (send cyl0 :rotate pi/2 :y :world)
    (send cyl0 :locate (float-vector -8 0 0) :world)
    (setq bod (body- bod cyl0))
    (kxr-make-kxr-body name sbod bod holes)
    ))

(defun kxr-sole () (kxr-sole-aux :name "kxr-sole"))
(defun kxr-sole-aux (&key (name "kxr-sole") shape (scale 1.0))
  (let* ((h 10)
	 (pos-box
	  (list
	   (float-vector 0 48 44)
	   (float-vector 0 50 42)
	   (float-vector 0 50 -18)
	   (float-vector 0 48 -20)

	   (float-vector 0 -48 -20)
	   (float-vector 0 -50 -18)
	   (float-vector 0 -50 42)
	   (float-vector 0 -48 44))
	   )
	 (pos-curve
	  (list
	   (float-vector 0 0 44)
	   (float-vector 0 20 42)
	   (float-vector 0 40 32)
	   (float-vector 0 43 29)
	   (float-vector 0 45 27)
	   (float-vector 0 47 24)
	   (float-vector 0 50 18)
	   (float-vector 0 50 -10)
	   (float-vector 0 48 -15)
	   (float-vector 0 45 -18)
	   (float-vector 0 40 -20)
	   (float-vector 0 -40 -20)
	   (float-vector 0 -45 -18)
	   (float-vector 0 -48 -15)
	   (float-vector 0 -50 -10)
	   (float-vector 0 -50 18)
	   (float-vector 0 -47 24)
	   (float-vector 0 -45 27)
	   (float-vector 0 -43 29)
	   (float-vector 0 -40 32)
	   (float-vector 0 -20 42)
	   )
	   )
	 (pos-list (if (eq-memq shape '(:b :box)) pos-box pos-curve))
	 (bod0
	  (make-prism
	   (mapcar #'(lambda (p) (scale scale p)) pos-list)
	   (float-vector h 0 0)))
	 (bod
	  (make-prism
	   (mapcar #'(lambda (p) (scale (+ scale 0.05) p)) pos-list)
	   (float-vector h 0 0)))
	 (sbod bod)
	 holes
	 )
    (send bod0 :locate (float-vector 3 0 0) :world)
    (setq bod0 (body- bod bod0))
    (kxr-make-kxr-body (format nil "~A~A" name (if shape (string shape) "")) bod0 bod0 holes)
    ))

(defun kxr-sole-old (&optional (name "sole"))
  (let* ((bod0
	  (make-prism
	   (list
	    (float-vector 0 0 42)
	    (float-vector 0 20 40)
	    (float-vector 0 40 30)
	    (float-vector 0 42 27)
	    (float-vector 0 44 25)
	    (float-vector 0 45 24)
	    (float-vector 0 48 18)
	    (float-vector 0 48 -10)
	    (float-vector 0 46 -13)
	    (float-vector 0 44 -16)
	    (float-vector 0 38 -18)
	    (float-vector 0 -38 -18)
	    (float-vector 0 -43 -16)
	    (float-vector 0 -46 -13)
	    (float-vector 0 -48 -10)
	    (float-vector 0 -48 18)
	    (float-vector 0 -45 24)
	    (float-vector 0 -44 25)
	    (float-vector 0 -42 27)
	    (float-vector 0 -40 30)
	    (float-vector 0 -20 40)
	    )
	   (float-vector 5 0 0)))
	 (bod
	  (make-prism
	   (list
	    (float-vector 0 0 44)
	    (float-vector 0 20 42)
	    (float-vector 0 40 32)
	    (float-vector 0 43 29)
	    (float-vector 0 45 27)
	    (float-vector 0 47 24)
	    (float-vector 0 50 18)
	    (float-vector 0 50 -10)
	    (float-vector 0 48 -15)
	    (float-vector 0 45 -18)
	    (float-vector 0 40 -20)
	    (float-vector 0 -40 -20)
	    (float-vector 0 -45 -18)
	    (float-vector 0 -48 -15)
	    (float-vector 0 -50 -10)
	    (float-vector 0 -50 18)
	    (float-vector 0 -47 24)
	    (float-vector 0 -45 27)
	    (float-vector 0 -43 29)
	    (float-vector 0 -40 32)
	    (float-vector 0 -20 42)
	    )
	   (float-vector 5 0 0)))
	 (sbod bod)
	 holes
	 )
    (send bod0 :locate (float-vector 3 0 0) :world)
    (setq bod0 (body- bod bod0))
    (kxr-make-kxr-body name sbod bod0 holes)
    ))

(defun kxr-sensor-sole (&optional (name "sensor-sole"))
  (let* ((ladc1 17)
	 (ladc2 33)
	 (lps 5)
	 (imu (make-cascoords :name "imu" :pos (float-vector 6 4 1))) ;; to be updated
	 (ps (list (make-cascoords :name "ps0" :pos (float-vector 0 lps (- lps)))
		   (make-cascoords :name "ps1" :pos (float-vector 0 (- lps) (- lps)))
		   (make-cascoords :name "ps2" :pos (float-vector 0 (- lps) lps))
		   (make-cascoords :name "ps3" :pos (float-vector  0 lps lps))))
	 (adc (list (make-cascoords :name "adc0" :pos (float-vector 0 ladc2 ladc1))
		    (make-cascoords :name "adc1" :pos (float-vector 0 ladc2 (- ladc1)))
		    (make-cascoords :name "adc2" :pos (float-vector 0 (- ladc2) (- ladc1)))
		    (make-cascoords :name "adc3" :pos (float-vector 0 (- ladc2) ladc1))))
	 (bod0
	  (make-prism
	   (list
	    (float-vector 0 37 22)
	    (float-vector 0 38 20.5)
	    (float-vector 0 38 -20.5)
            (float-vector 0 37 -22)
	    (float-vector 0 -37 -22)
	    (float-vector 0 -38 -20.5)
	    (float-vector 0 -38  20.5)
	    (float-vector 0 -37  22)
	    )
	   (float-vector 3 0 0)))
	 (bod
	  (make-prism
	   (list
	    (float-vector 0 39 24)
	    (float-vector 0 40 22.5)
	    (float-vector 0 40 -22.5)
            (float-vector 0 39 -24)
	    (float-vector 0 -39 -24)
	    (float-vector 0 -40 -22.5)
	    (float-vector 0 -40  22.5)
	    (float-vector 0 -39  24)
	    )
	   (float-vector 6 0 0)))
	 holes c)
    (send bod0 :locate (float-vector 5 0 0) :world)
    (setq bod0 (body+ bod bod0))
    (setq c (kxr-make-kxr-body name bod bod0 holes))
    (send imu :rotate pi :x)
    (send imu :rotate pi/2 :y)
    (send imu :rotate pi :z)
    (send c :assoc imu)
    (dolist (p ps)
      (send p :rotate pi/2 :-y)
      (send c :assoc p))
    (dolist (a adc)
      (send a :rotate pi/2 :-y)
      (send c :assoc a))
    c))

(defun kxr-cross-servo-frame-a (&optional (name "cross-servo-frame-a"))
  (let* ((b1
	  (make-prism
	   (list
	    (float-vector 5 -13 10)
	    (float-vector -10 -13 10)
	    (float-vector -10 -13 -30)
	    (float-vector 5 -13 -30))
	   (float-vector 0 26 0)))
	 (bod
	  (make-prism
	   (list
	    (float-vector (* 4 (cos (deg2rad 0))) -15 (* 4 (sin (deg2rad 0))))
	    (float-vector (* 4 (cos (deg2rad 45))) -15 (* 4 (sin (deg2rad 45))))
	    (float-vector (* 4 (cos (deg2rad 90))) -15 (* 4 (sin (deg2rad 90))))
	    (float-vector (* 4 (cos (deg2rad 135))) -15 (* 4 (sin (deg2rad 135))))
	    (float-vector (* 4 (cos (deg2rad 180))) -15 (* 4 (sin (deg2rad 180))))
	    (float-vector (* 4 (cos (deg2rad 180))) -15 (- (* 4 (sin (deg2rad 180))) 21))
	    (float-vector (* 4 (cos (deg2rad 225))) -15 (- (* 4 (sin (deg2rad 225))) 21))
	    (float-vector (* 4 (cos (deg2rad 270))) -15 (- (* 4 (sin (deg2rad 270))) 21))
	    (float-vector (* 4 (cos (deg2rad 315))) -15 (- (* 4 (sin (deg2rad 315))) 21))
	    (float-vector (+ 4 5 3) -15  -23.5)
	    (float-vector (+ 4 5 3) -15 (+ -23.5 7))
	    (float-vector (+ 4 3) -15 (+ -23.5 7))
	    (float-vector (+ 4 3) -15 (+ -23.5 7 5))
	    (float-vector (+ 4 5 3) -15 (+ -23.5 7 5))
	    (float-vector (+ 4 5 3) -15 2.5)
	    (float-vector (+ 4 5) -15 2.5)
	    (float-vector (+ 4 5) -15 -8)
	    (float-vector 4 -15 -8)
	    )
	   (float-vector 0 30 0))
	   )
	 (sbod bod)
	 (cyl0 (make-cylinder 1.8 60))
	 (cyl (make-cylinder 8 3))
	 (cyl1 (make-cylinder 6 7))
	 (holes
	  (list
	   (list "outh1" (float-vector 0 -15 0) :y 1 2)
	   (list "outh2" (float-vector 0 15 0) :-y 1 2)
	   (list "outh3" (float-vector 0 15 -21) :-y 1 2)
	   (list "outh4" (float-vector 0 15 -21) :-y 1 2)
	   (list "inh1" (float-vector 0 -13 0) :y 1 2)
	   (list "inh2" (float-vector 0 13 0) :-y 1 2)
	   (list "inh3" (float-vector 0 13  -21) :-y 1 2)
	   (list "inh4" (float-vector 0 -13 -21) :y 1 2)
	   (list "outh5" (float-vector 12 0 0) :-x 6.5 2)
	   (list "inh5" (float-vector   9 0 0) :x  6.5 2)
	   ))
	 cbod)
    (setq bod (body- bod b1))
    (send cyl0 :rotate pi/2 :-x :world)
    (send cyl0 :locate #f(0 -30 0) :world)
    (setq bod (body- bod cyl0))
    (send cyl :rotate pi/2 :-y :world)
    (send cyl :locate #f(12 0 0) :world)
    (send cyl0 :locate #f(0 -30 -21) :world)    
    (setq bod (body- bod cyl0))
    (setq bod (body+ bod cyl))  ;; face-to-face alignments
    (send cyl1 :rotate pi/2 :-y :world)
    (send cyl1 :locate #f(15 0 0) :world)
    (setq bod (body- bod cyl1))
    (kxr-make-kxr-body name sbod bod holes)
    )
  )

(defun kxr-cross-servo-frame-b (&optional (name "cross-servo-frame-b"))
  (let* ((b1
	  (make-prism
	   (list
	    (float-vector 6 -13 10)
	    (float-vector -4 -13 10)
	    (float-vector -4 -13 -30)
	    (float-vector 6 -13 -30))
	   (float-vector 0 26 0)))
	 (bod
	  (make-prism
	   (list
	    (float-vector (* 4 (cos (deg2rad 0))) -15 (* 4 (sin (deg2rad 0))))
	    (float-vector (* 4 (cos (deg2rad 45))) -15 (* 4 (sin (deg2rad 45))))
	    (float-vector (* 4 (cos (deg2rad 90))) -15 (* 4 (sin (deg2rad 90))))
	    (float-vector (* 4 (cos (deg2rad 135))) -15 (* 4 (sin (deg2rad 135))))
	    ;;(float-vector (* 4 (cos (deg2rad 135))) -15 2.5)
	    (float-vector -7 -15 2.5)
	    (float-vector -7 -15 -21)
	    ;;(float-vector (* 4 (cos (deg2rad 180))) -15 (- (* 4 (sin (deg2rad 180))) 21))
	    (float-vector (* 4 (cos (deg2rad 225))) -15 (- (* 4 (sin (deg2rad 225))) 21))
	    (float-vector (* 4 (cos (deg2rad 270))) -15 (- (* 4 (sin (deg2rad 270))) 21))
	    (float-vector (* 4 (cos (deg2rad 315))) -15 (- (* 4 (sin (deg2rad 315))) 21))
	    (float-vector (* 4 (cos (deg2rad 360))) -15 (- (* 4 (sin (deg2rad 360))) 21))
	    )
	   (float-vector 0 30 0)))
	 (sbod bod)
	 (cyl0 (make-cylinder 1.9 60))
	 (cyl (make-cylinder 6 3.5))  ;; shift for raspi from (make-cylinder 6 3)
	 (cyl1 (make-cylinder 3 3))
	 (cyl2 (make-cylinder 1.5 60))
	 (holes
	  (list
	   (list "outh1" (float-vector 0 -15 0) :y 1 2)
	   (list "outh2" (float-vector 0 15 0) :-y  1 2)
	   (list "outh3" (float-vector 0 15 -21) :-y  1 2)
	   (list "outh4" (float-vector 0 15 -21) :-y  1 2)
	   (list "inh1" (float-vector 0 -13 0) :y  1 2)
	   (list "inh2" (float-vector 0 13 0) :-y  1 2)
	   (list "inh3" (float-vector 0 13  -21) :-y  1 2)
	   (list "inh4" (float-vector 0 -13 -21) :y  1 2)
	   (list "outh5" (float-vector -9 0 0) :x 1.5 2)
	   (list "inh5" (float-vector  -4 0 0) :-x 1.5 2)
	   ))
	 cbod)
    (setq bod (body- bod b1))
    (send cyl0 :rotate pi/2 :-x :world)
    (send cyl0 :locate #f(0 -30 0) :world)
    (setq bod (body- bod cyl0))
    (send cyl :rotate pi/2 :-y :world)
    (send cyl :locate #f(-3.5 0 0) :world) ;; shift for raspi from #f(-4 0 0)
    (send cyl0 :locate #f(0 -30 -21) :world)    
    (setq bod (body- bod cyl0))
    (setq bod (body+ bod cyl))	;; face-to-face align
    (send cyl1 :rotate pi/2 :-y :world)
    (send cyl1 :locate #f(-6 0 0) :world)
    (setq bod (body+ bod cyl1))
    (send cyl2 :rotate pi/2 :-y :world)
    (setq bod (body- bod cyl2))
    (kxr-make-kxr-body name sbod bod holes)
    )
  )

(defun kxr-wcross-servo-frame-a (&optional (name "wcross-servo-frame-a"))
  (let* ((b1
	  (make-prism
	   (list
	    (float-vector 10 -20 7)
	    (float-vector -7 -20 7)
	    (float-vector -7 -20 -19)
	    (float-vector 10 -20 -19))
	   (float-vector 0 40 0)))
	 (bod
	  (make-prism
	   (list
	    (float-vector 5 -13 10)
	    (float-vector -10 -13 10)
	    (float-vector -10 -13 -22)
	    (float-vector 5 -13 -22))
	   (float-vector 0 26 0)))
	 (sbod bod)
	 ;;(cyl (make-fillet-cube 30 12 70 6 :segments 8))
	 (cyl (make-cube 30 12 70))
	 (holes
	  (list
	   (list "outh1" (float-vector 0 -15 0) :y 1 2)
	   (list "outh2" (float-vector 0 15 0) :-y 1 2)
	   (list "outh3" (float-vector 0 15 -21) :-y 1 2)
	   (list "outh4" (float-vector 0 15 -21) :-y 1 2)
	   (list "inh1" (float-vector 0 -13 0) :y 1 2)
	   (list "inh2" (float-vector 0 13 0) :-y 1 2)
	   (list "inh3" (float-vector 0 13  -21) :-y 1 2)
	   (list "inh4" (float-vector 0 -13 -21) :y 1 2)
	   (list "outh5" (float-vector 12 0 0) :-x 6.5 2)
	   (list "inh5" (float-vector   9 0 0) :x  6.5 2)
	   ))
	 cbod)
    (setq bod (body- bod b1))
    (send cyl :locate (float-vector 10 0 0) :world)
    (setq bod (body- bod cyl))
    (kxr-make-kxr-body name sbod bod holes)
    )
  )

(defun kxr-wcross-servo-frame-b (&optional (name "wcross-servo-frame-b"))
  (let* ((b1 (make-cube 10 30 25))
	 (bod (make-cube 8 26 31))
	 (sbod bod)
	 (holes
	  (list
	   (list "outh1" (float-vector 0 -15 0) :y 1 2)
	   (list "outh2" (float-vector 0 15 0) :-y  1 2)
	   (list "outh3" (float-vector 0 15 -21) :-y  1 2)
	   (list "outh4" (float-vector 0 15 -21) :-y  1 2)
	   (list "inh1" (float-vector 0 -13 0) :y  1 2)
	   (list "inh2" (float-vector 0 13 0) :-y  1 2)
	   (list "inh3" (float-vector 0 13  -21) :-y  1 2)
	   (list "inh4" (float-vector 0 -13 -21) :y  1 2)
	   (list "outh5" (float-vector -9 0 0) :x 1.5 2)
	   (list "inh5" (float-vector  -4 0 0) :-x 1.5 2)
	   ))
	 cbod)
    (send b1 :translate #f(3 0 0) :world)
    (setq bod (body- bod b1))
    ;;(objects (list bod b1))
    (kxr-make-kxr-body name sbod bod holes)
    )
  )

(defun kxr-wheel (&optional (name "wheel"))
  (let* ((cyl0 (make-cylinder 1.5 20))
	 (cyl1 (make-cylinder 4.1 20))
	 (cyl2 (make-cylinder 8.1 20))
	 (bod0
	  (make-prism
	   (list
	    (float-vector -22 0  -10)
	    (float-vector -21 6  -10)
	    (float-vector -20 7  -10)
	    (float-vector -19 7  -10)
	    (float-vector -15 6  -10)
	    (float-vector -13 4  -10)
	    (float-vector -12 0  -10)
	    (float-vector -13 -4  -10)
	    (float-vector -15 -6  -10)
	    (float-vector -19 -7  -10)
	    (float-vector -20 -7  -10)
	    (float-vector -21 -6  -10)
	    )
	   (float-vector 0 0 20))
	  )
	 (r 20)
	 (bod
	  (make-solid-of-revolution
	   (list
	    (float-vector (+ r 3)   0 6.5)
	    (float-vector (+ r 7.5) 0 5.5)
	    (float-vector (+ r 9)   0 5)
	    (float-vector (+ r 9.5) 0 2)
	    (float-vector (+ r 10)  0 1.7)
	    (float-vector (+ r 10.5) 0 0)
	    (float-vector (+ r 10)   0 -1.7)
	    (float-vector (+ r 9.5) 0 -2)
	    (float-vector (+ r 9)   0 -5)
	    (float-vector (+ r 7.5) 0 -5.5)
	    (float-vector (+ r 3)   0 -6.5)
	    )))
	 (sbod bod)
	 (holes
	  (list
	   (list "uph1" (float-vector 0 0 0) :-z 1.5 10)
	   (list "downh1" (float-vector 0 0 -6.5) :z 1.5 10)))
	 )
    (send cyl0 :locate (float-vector 0 0 -10))
    (setq bod (body- bod cyl0))
    (send cyl1 :locate (float-vector 0 0 1))
    (setq bod (body- bod cyl1))
    (send cyl2 :locate (float-vector 0 0 2))
    (setq bod (body- bod cyl2))
    (send bod0 :rotate (deg2rad 30) :z :world)
    (setq bod (body- bod bod0))
    (send bod0 :rotate (deg2rad 60) :z :world)
    (setq bod (body- bod bod0))
    (send bod0 :rotate (deg2rad 60) :z :world)
    (setq bod (body- bod bod0))
    (send bod0 :rotate (deg2rad 60) :z :world)
    (setq bod (body- bod bod0))
    (send bod0 :rotate (deg2rad 60) :z :world)
    (setq bod (body- bod bod0))
    (send bod0 :rotate (deg2rad 60) :z :world)
    (setq bod (body- bod bod0))
    (kxr-make-kxr-body name sbod bod holes
                       :color (float-vector 0.2 0.2 0.25))
    )
  )

(defun kxr-wheel48 (&optional (name "wheel48"))
  (kxr-wheel-aux 14 0.75 name))

(defun kxr-wheel60 (&optional (name "wheel60"))
  (kxr-wheel-aux 20 1 name))

(defun kxr-wheel-aux (&optional (r 14) (hr 0.75) (name "wheel-aux"))
  (let* ((cyl0 (make-cylinder 1.5 30))
	 (cyl1 (make-cylinder 4.1 30))
	 (cyl2 (make-cylinder 8.1 30))
	 (r2 (- r 2))
	 (bod
	  (make-solid-of-revolution
	   (list
	    (float-vector (+ r 3)   0 (+ r2 (* hr 6.5)))
	    (float-vector (+ r 7.5) 0 (+ r2 (* hr 5.5)))
	    (float-vector (+ r 9)   0 (+ r2 (* hr 5)))
	    (float-vector (+ r 9.5) 0 (+ r2 (* hr 2)))
	    (float-vector (+ r 10)  0 (+ r2 (* hr 1.7)))
	    (float-vector (+ r 10.5) 0 r2)
	    (float-vector (+ r 10)   0 (+ r2 (* hr -1.7)))
	    (float-vector (+ r 9.5) 0 (+ r2 (* hr -2)))
	    (float-vector (+ r 9)   0 (+ r2 (* hr -5)))
	    (float-vector (+ r 7.5) 0 (+ r2 (* hr -5.5)))
	    ;;(float-vector (+ r 3)   0 (* hr -6.5))
	    ;;(float-vector (+ r 3)   0 (* hr 6.5))
	    (float-vector (+ r 7.5) 0 (* hr 5.5))
	    (float-vector (+ r 9)   0 (* hr 5))
	    (float-vector (+ r 9.5) 0 (* hr 2))
	    (float-vector (+ r 10)  0 (* hr 1.7))
	    (float-vector (+ r 10.5) 0 0)
	    (float-vector (+ r 10)   0 (* hr -1.7))
	    (float-vector (+ r 9.5) 0 (* hr -2))
	    (float-vector (+ r 9)   0 (* hr -5))
	    (float-vector (+ r 7.5) 0 (* hr -5.5))
	    (float-vector (+ r 3)   0 (* hr -6.5))
	    )))
	 (sbod bod)
	 (holes
	  (list
	   (list "uph1" (float-vector 0 0 0) :-z 1.5 10)
	   (list "downh1" (float-vector 0 0 -6.5) :z 1.5 10)))
	 )
    (send cyl0 :locate (float-vector 0 0 -10))
    (setq bod (body- bod cyl0))
    (send cyl1 :locate (float-vector 0 0 10))
    (setq bod (body- bod cyl1))
    (send cyl2 :locate (float-vector 0 0 12))
    (setq bod (body- bod cyl2))
    (kxr-make-kxr-body name sbod bod holes
                       :color (float-vector 0.2 0.2 0.25))
    )
  )

(defun kxr-lock-ring-cap (&optional (name "lock-ring-cap"))
  (let ((bod
	 (make-solid-of-revolution
	  (list
	   (float-vector 0.1  0 2)
	   (float-vector 8    0 1.7)
	   (float-vector 16.5 0 1)
	   (float-vector 16.5 0 0)
	   (float-vector 8    0 0)
	   (float-vector 8    0 -8)
	   )))
	 (holes
	  (list
	   (list "up" (float-vector 0 0 2) :-z 10 8)
	   (list "bottom" (float-vector 0 0 0) :-z 10 8)
	   ))
	 )
    (kxr-make-kxr-body name bod bod holes :color *kxr-white-color*)
    ))

(defun kxr-lock-ring (&optional (name "lock-ring"))
  (let* ((cyl0
	  (make-cylinder 10 15))
	 (bod
	  (make-cylinder 17 6))
	 (sbod bod)
	 (holes
	  (list
	   (list "uph1" (float-vector 0 0 6) :-z 10 6)
	   (list "downh1" (float-vector 0 0 0) :z 10 6)
	   )))
    (send cyl0 :locate #f(0 0 -5))
    (setq bod (body- bod cyl0))
    (kxr-make-kxr-body name sbod bod holes :color *kxr-white-color*)
    ))

(defun kxr-joint-frame-a (&optional (name "joint-frame-a"))
  (let* ((cyl0 (make-cylinder 1.35 10))
	 (cyl1 (make-cylinder 1.05 10))
	 (bod0
	  (make-prism
	   (list
	    (float-vector 1.5 5 20)
	    (float-vector 1.5 20 20)
	    (float-vector 1.5 20 -20)
	    (float-vector 1.5 5 -20)
	    )
	   (float-vector 5 -5 0)))
	 (bod1
	  (make-prism
	   (list
	    (float-vector -5 -5 20)
	    (float-vector -5 3 20)
	    (float-vector -5 3 -20)
	    (float-vector -5 -5 -20)
	    )
	   (float-vector 5 0 0)))
	 (bod2
	  (make-prism
	   (list
	    (float-vector -5 -20 20)
	    (float-vector -5 20 20)
	    (float-vector -5 20 -20)
	    (float-vector -5 -20 -20)
	    )
	   (float-vector 4.5 0 0)))
	 (bod
	  (make-prism
	   (list
	    (float-vector -2 -3 13)
	    (float-vector -2 10 13)
	    (float-vector -2 12.12 12.12)
	    (float-vector -2 13 10)
	    (float-vector -2 13 -10)
	    (float-vector -2 12.12 -12.12)
	    (float-vector -2 10 -13)
	    (float-vector -2 -3 -13)
	    )
	   (float-vector 4 0 0)))
	 (sbod bod)
	 (holes
	  (list
	   (list "uph1" (float-vector -0.5 9 10.5) :-x 1 2)
	   (list "uph2" (float-vector -0.5 9 -10.5) :-x 1 2)
	   (list "uph3" (float-vector 0 0 0) :-x 1.5 2)
	   (list "uph4" (float-vector 1.5 9 0) :x 1.5 2)
	   (list "downh1" (float-vector 1.5 9 10.5) :x 1 2)
	   (list "downh2" (float-vector 1.5 9 -10.5) :x 1 2)
	   (list "downh3" (float-vector 2.0 0 0) :x 1.5 2)
	   (list "downh4" (float-vector -0.5 9 0) :-x 1.5 2)
	   ))
	 )
    (send cyl0 :rotate pi/2 :y :world)
    (send cyl0 :locate (float-vector -4 0 0) :world)
    (setq bod (body- bod cyl0))
    (send cyl1 :rotate pi/2 :y :world)
    (send cyl1 :locate (float-vector -4 9 10.5) :world)
    (setq bod (body- bod cyl1))
    (send cyl1 :locate (float-vector -4 9 -10.5) :world)
    (setq bod (body- bod cyl1))
    (setq bod (body- bod bod0))
    (setq bod (body- bod bod1))
    (setq bod (body- bod bod2))
    (kxr-make-kxr-body name sbod bod holes)
    ))

(defun kxr-joint-frame-b-a (&optional (name "joint-frame-b-a"))
  (let* ((cyl0 (make-cylinder 1.35 10))
	 (cyl1 (make-cylinder 1.05 10))
	 (bod0
	  (make-prism
	   (list
	    ;;	    (float-vector 1.5 -5 13)
	    ;;	    (float-vector 1.5 -5 30)
	    (float-vector 1.2 5 30)
	    (float-vector 1.2 20 30)
	    (float-vector 1.2 20 -30)
	    (float-vector 1.2 5 -30)
	    )
	   (float-vector 5 -5 -5)))
	 (bod1
	  (make-prism
	   (list
	    (float-vector -5 -5 12)
	    (float-vector -5 3 12)
	    (float-vector -5 3 -12)
	    (float-vector -5 -5 -12)
	    )
	   (float-vector 5 0 0)))
	 (bod2
	  (make-prism
	   (list
	    (float-vector -5 -20 30)
	    (float-vector -5 20 30)
	    (float-vector -5 20 -30)
	    (float-vector -5 -20 -30)
	    )
	   (float-vector 4.5 0 0)))
	 (bod
	  (make-prism
	   (list
	    (float-vector -2 -3 13)
	    (float-vector -2  0 13)
	    (float-vector -2  6 22)
	    (float-vector -2  7 23.5)
	    (float-vector -2  10 23.5)
	    (float-vector -2  12.12 22.62)
	    (float-vector -2  13 20.5)
	    (float-vector -2  13 -2.5)
	    (float-vector -2  7 -12.12)
	    (float-vector -2  6 -13)
	    (float-vector -2 -3 -13)
	    )
	   (float-vector 4 0 0)))
	 (sbod bod)
	 (holes
	  (list
	   (list "uph1" (float-vector -0.5 9 21.0) :-x 1 2)
	   (list "uph2" (float-vector -0.5 9 0.0) :-x 1 2)
	   (list "uph3" (float-vector 0 0 0) :-x 1.6 2)
	   (list "uph4" (float-vector 1.5 10 10.5) :x 1.6 2)
	   (list "downh1" (float-vector 1.5 9 21.0) :x 1 2)
	   (list "downh2" (float-vector 1.5 9 0.0) :x 1 2)
	   (list "downh3" (float-vector 2.0 0 0) :x 1.6 2)
	   (list "downh4" (float-vector -0.5 10 10.5) :-x 1.6 2)
	   ))
	 )
    (send cyl0 :rotate pi/2 :y :world)
    (send cyl0 :locate (float-vector -4 0 0) :world)
    (setq bod (body- bod cyl0))
    (send cyl1 :rotate pi/2 :y :world)
    (send cyl1 :locate (float-vector -4 9 21) :world)
    (setq bod (body- bod cyl1))
    (send cyl1 :locate (float-vector -4 9 0) :world)
    (setq bod (body- bod cyl1))
    (setq bod (body- bod bod0))
    (list bod bod0)
    (setq bod (body- bod bod1))
    (setq bod (body- bod bod2))
    (kxr-make-kxr-body name sbod bod holes)
    ))

(defun kxr-joint-frame-b-b (&optional (name "joint-frame-b-b"))
  (let* ((cyl0 (make-cylinder 1.35 10))
	 (cyl1 (make-cylinder 1.05 10))
	 (bod0
	  (make-prism
	   (list
	    ;;	    (float-vector 1.5 -5 13)
	    ;;	    (float-vector 1.5 -5 30)
	    (float-vector 1.2 5 30)
	    (float-vector 1.2 20 30)
	    (float-vector 1.2 20 -30)
	    (float-vector 1.2 5 -30)
	    )
	   (float-vector 5 -5 -5)))
	 (bod1
	  (make-prism
	   (list
	    (float-vector -5 -5 12)
	    (float-vector -5 3 12)
	    (float-vector -5 3 -12)
	    (float-vector -5 -5 -12)
	    )
	   (float-vector 5 0 0)))
	 (bod2
	  (make-prism
	   (list
	    (float-vector -5 -20 30)
	    (float-vector -5 20 30)
	    (float-vector -5 20 -30)
	    (float-vector -5 -20 -30)
	    )
	   (float-vector 4.5 0 0)))
	 (bod
	  (make-prism
	   (list
	    (float-vector -2 -3 13)
	    (float-vector -2  6 13)
	    (float-vector -2  7 12)
	    (float-vector -2  13 3)
	    (float-vector -2  13 -20.5)
	    (float-vector -2  12.12 -22.62)	    
	    (float-vector -2  10 -23.5)
	    (float-vector -2  7 -23.5)
	    (float-vector -2  6 -22)
	    (float-vector -2  0 -13)
	    (float-vector -2  -3 -13)
	    )
	   (float-vector 4 0 0)))
	 (sbod bod)
	 (holes
	  (list
	   (list "uph1" (float-vector -0.5 9 0.0) :-x 1 2)
	   (list "uph2" (float-vector -0.5 9 -21.0) :-x 1 2)
	   (list "uph3" (float-vector 0 0 0) :-x 1.5 2)
	   (list "uph4" (float-vector 1.5 9 -10.5) :x 1.5 2)
	   (list "downh1" (float-vector 1.5 9 0.0) :x 1 2)
	   (list "downh2" (float-vector 1.5 9 -21.0) :x 1 2)
	   (list "downh3" (float-vector 2.0 0 0) :x 1.6 2)
	   (list "downh4" (float-vector -0.5 10 -10.5) :-x 1.6 2)
	   ))
	 )
    (send cyl0 :rotate pi/2 :y :world)
    (send cyl0 :locate (float-vector -4 0 0) :world)
    (setq bod (body- bod cyl0))
    (send cyl1 :rotate pi/2 :y :world)
    (send cyl1 :locate (float-vector -4 9 -21) :world)
    (setq bod (body- bod cyl1))
    (send cyl1 :locate (float-vector -4 9 0) :world)
    (setq bod (body- bod cyl1))
    (setq bod (body- bod bod0))
    (list bod bod0)
    (setq bod (body- bod bod1))
    (setq bod (body- bod bod2))
    (kxr-make-kxr-body name sbod bod holes)
    ))

(defun kxr-euclid-head (&optional (name "euclid-head"))
  (let* ((bod
	  (make-prism
	  (list
	   (float-vector 18 -62 33)
	   (float-vector -6 -62 33)
	   (float-vector -6 -62 0)
	   (float-vector 18 -62 0))
	  (float-vector 0 124 0)))
	 holes cam)
    (setq bod (kxr-make-kxr-body name bod bod holes))
    (send bod :put :weight 145.7)
    (setq cam (make-cascoords))
    (send cam :rotate -pi/2 :x)
    ;;(send cam :rotate pi/2 :y)
    (send cam :translate #f(10 0 0) :world)
    (send bod :assoc cam)
    (send bod :put :cameras (list cam))
    bod)
  )
;;;
(defun kxr-finger-palm1 ()
  (let* ((c1 (make-cube 6 30 6))
	 (sbod c1)
	 (cm (make-cube 4 20 10))
	 (bm (make-cube 4 20 10))
	 )
    (send cm :locate #f(3 -15 0) :world)
    (setq c1 (body- c1 cm))
    (send bm :locate #f(-2 15 0) :world) (send bm :rotate (/ pi -4) :z)
    (setq c1 (body- c1 bm))
    (send c1 :translate (float-vector -16.5 0 0))
    (kxr-make-kxr-body "palm1" sbod c1 nil)))

(defun kxr-finger-palm2 ()
  (let* ((c2 (make-cube 6 30 6))
	 (sbod c2)
	 (cm (make-cube 4 20 10))
	 (bm (make-cube 4 20 10))
	 )
    (send cm :locate #f(-3 -15 0) :world)
    (setq c2 (body- c2 cm))
    (send bm :locate #f(2 15 0) :world) (send bm :rotate (/ pi 4) :z)    
    (setq c2 (body- c2 bm))
    (send c2 :translate (float-vector  16.5 0 0))
    (kxr-make-kxr-body "palm2" sbod c2 nil)))

(defun kxr-pgripper ()
  (let* ((c2 (make-fillet-cube 37 30 6 2))
	 (sbod c2)
	 (cm (make-cube 27 27 10))
	 )
    (send c2 :translate (float-vector 0 -4 0))
    (setq c2 (body- c2 cm))
    (kxr-make-kxr-body "pgripper" sbod c2 nil)
    ))

(defun kxr-pgripper-base ()
  (let* ((c0 (make-cube 37 80 12))
	 (c1 (make-cube 15 85 6))
	 (sbod c0)
	 (c (make-cascoords :pos #f(0 0 -8)))
	 b)
    (send c1 :translate (float-vector 0 0 -6))
    (setq c0 (body+ c0 c1))
    (setq b (kxr-make-kxr-body "pgripper-base" sbod c0 nil))
    (setf (get b :joint-coord) c)
    b))

;;;
(setq *kxr-body-functions*
      '(
	kxr-servo-s3301
	kxr-servo-s3304

	kxr-finger-palm1
	kxr-finger-palm2

	kxr-dual-servo-plate2
	kxr-dual-servo-plate5

	kxr-dyp-base
	kxr-dyp-chest-base-plate
	kxr-dyp-chest-side-plate
	kxr-dyp-chest-shoulder-arm

	kxr-dummy-half-servo

	kxr-joint-base
	kxr-sensor-joint-base-a
	kxr-sensor-joint-base-b
	kxr-sensor-joint-base-c
        kxr-sensor-joint-base-3axisforce
	kxr-battery-box
	kxr-battery-leg-plate
	kxr-body-plate
	kxr-body-cut-plate
	kxr-body-plate-spacer
	kxr-back-pack
	kxr-small-back-pack
	kxr-raspi-back-pack

	kxr-bottom-spacer
	kxr-bottom-spacer2
	kxr-flat-frame
	kxr-angle-bracket

	kxr-finger-a
	kxr-finger-b
	;;	kxr-arm-aux
	kxr-upper-arm20
	kxr-bottom-arm20
	kxr-upper-arm26
	kxr-bottom-arm26
	kxr-upper-arm28
	kxr-bottom-arm28
	kxr-upper-arm38
	kxr-bottom-arm38
	kxr-flat-arm42

	kxr-arm-supporter-a
	kxr-arm-supporter-b
	kxr-sole
	kxr-sensor-sole
	kxr-cross-servo-frame-a
	kxr-cross-servo-frame-b
	kxr-wheel
	kxr-lock-ring-cap
	kxr-lock-ring
	
	kxr-joint-frame-a
	kxr-joint-frame-b-a
	kxr-joint-frame-b-b
	
	kxr-irsensor-head
	kxr-realsense-head
	kxr-euclid-head

	))

;;;
(defun file-memoization
    (fun-name
     &optional (dir (rcb4eus-mkdir "glbodies")))
  (let ((forgbody (get fun-name :original-definition))
	(file-name (format nil "~a/~a-func.bod" dir fun-name)))
    (unless forgbody
      (setf (get fun-name :orginal-definition)
	    (setq forgbody (symbol-function fun-name))))
    (setf (symbol-function fun-name)
	  `(lambda ()
	     (let* (r)
	       (if
		(get ',fun-name :call-count)
		(setf (get ',fun-name :call-count)
		      (1+ (get ',fun-name :call-count)))
		(setf (get ',fun-name :call-count) 1))
	       (cond
		 ((probe-file ,file-name)
		  ;; (format t ";; load ~A called ~A~%" ,file-name (get ',fun-name :call-count))
		  (setq r (with-open-file (f ,file-name :direction :input) (read f))))
		 (t (format t ";; save body function ~A into ~A~%" ',fun-name ,file-name)
		    (setq r (funcall ',forgbody))
		    (dump-structure ,file-name r)
		    ))
	       r)))
    )
  )

(defun memoize-kxr-bodies nil
  (mapc #'(lambda (x) (file-memoization x)) *kxr-body-functions*)
  )

(memoize-kxr-bodies)

(provide :kxrbody)

