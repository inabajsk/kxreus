;;;
;;; Links for KXR robots
;;;
;;;	2018.6.12 created JSK M.I
;;;	2018.6.17 kxr L2 robot-model genarates auto methods by joint name
;;;	2018.6.21 KXR L4 l4t l4r l4d l4n l4p
;;;	2018.6.29 KXR L6
;;;
(defvar *kxr-simple-model* t)

(require :kxrbody)
(require :kxrbodyset)

(provide :kxrlinks)

(defun gripper-sensor-pattern (pat &optional l/r)
  " gripper-sensor : ((:finger1 . :rev-a) (:finger2 . :rev-b))| t | :rev-a | :rev-b|
     (:finger1 :rev-a) | :larm | :rarm | (:larm (:finger1 . :rev-a)...) | (:rarm ...) "
  (cond
   ((eq pat t) '((:finger1 . :rev-c) (:finger2 . :rev-c)))
   ((eq l/r pat)  '((:finger1 . :rev-c) (:finger2 . :rev-c)))
   ((memq l/r pat) (gripper-sensor-pattern (remove l/r pat)))
   ((eq pat :rev-a) '((:finger1 . :rev-a) (:finger2 . :rev-a)))
   ((eq pat :rev-b) '((:finger1 . :rev-b) (:finger2 . :rev-b)))
   ((eq pat :rev-c) '((:finger1 . :rev-c) (:finger2 . :rev-c)))
   ((eq pat :finger1) '((:finger1 :rev-a)))
   ((eq pat :finger2) '((:finger2 :rev-a)))
   ((atom pat) nil)
   ((memq :finger1 pat) (list (cons :finger1 (cadr pat))))
   ((memq :finger2 pat) (list (cons :finger2 (cadr pat))))
   ((assoc :finger1 pat) pat)
   ((assoc :finger2 pat) pat)
   ))

(set-new-defun)

(defun kxr-link-create (bs &key joint-coord upper-coord (coords (make-cascoords))
			     (color #f(1 0.5 0)))
  (let (l blist (mc #f(0 0 0)) (m 0) centroid (origin-coord (make-cascoords)))
    (setq blist (if (derivedp bs bodyset) (send bs :bodies) bs))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    #-:eus
    (setq blist (mapcar #'(lambda (b)
			    (instance kxr-body :init :replace-obj b :fine b
				      :name (get b :name) :color (get b :color)))
			blist))
    (dolist (b blist)
      (setq mc (v+ mc (scale (send b :weight) (send b :centroid))))
      (setq m (+ m (send b :weight))))
    (setq centroid (scale (/ 1.0 m) mc))
    (setq l (instance bodyset-link :init coords :bodies blist
		      :weight m :centroid centroid))
    (dolist (b blist) (send l :assoc b))
    (when (derivedp bs bodyset)
      (dolist (a (list
		  :head :torso :neck :joint-coord :origin-coord :upper-coord
		  :lmarm :rmarm :larm :rarm :lleg :rleg :base-coord
		  :lleg0 :rleg0 :lleg1 :rleg1 :lleg2 :rleg2))
	(when (get bs a)
	  (setf (get l a) (get bs a))
	  (send l :assoc (get l a)))))
    (dolist (b (send l :descendants)) (send l :assoc b))
    (when
	joint-coord
      (cond
	((derivedp joint-coord cascaded-coords)
	 (setf (get l :joint-coord) (copy-object joint-coord)))
	((stringp joint-coord)
	 (setf (get l :joint-coord) (find-named-coords blist joint-coord))
	 )))
    (if upper-coord (setf (get l :upper-coord) (copy-object upper-coord)))
    (when (get l :joint-coord)
      (send (get l :joint-coord) :put :color #f(1 1 0))
      (send (get l :joint-coord) :put :size 40)
      (send l :assoc (get l :joint-coord)))
    (when (get l :upper-coord)
      (send (get l :upper-coord) :put :color #f(1 0 1))
      (send (get l :upper-coord) :put :size 60)
      (send l :assoc (get l :upper-coord)))
    (send origin-coord :put :color color)
    (send origin-coord :put :size 50)
    (send l :assoc origin-coord)
    (send l :put :origin-coord origin-coord)
    l))

(defun kxr-l2l5-body-link (&key (leg-arms t) (backpack (kxr-back-pack)) mag-plate
				no-upper-body
				shoulder-front neck-front shoulder-center (shoulder-servo t))
  (let* ((b0 (kxr-l2-body-bodyset :backpack backpack :shoulder-front shoulder-front
				  :no-upper-body no-upper-body :mag-plate mag-plate
				  :neck-front neck-front
				  :shoulder-center shoulder-center
				  :shoulder-servo shoulder-servo
				  ))
	 lb rb
	 (lc (make-cascoords :pos #f(0 0 28) :rot (rotation-matrix pi/2 :y)))
	 (rc (make-cascoords :pos #f(0 0 28) :rot (rotation-matrix pi/2 :y)))
	 blist l)
    (setq blist (send b0 :bodies))
    (when leg-arms
      (setq lb (kxr-arm-base-bodyset 28))
      (setq rb (kxr-arm-base-bodyset 28))
      (send lb :assoc lc)
      (send rb :assoc rc)
      (send lb :rotate pi :x :world)
      (send lb :locate (send (get b0 :lleg) :worldpos) :world)
      (send b0 :assoc lb)
      (send rb :rotate pi :x :world)
      (send rb :locate (send (get b0 :rleg) :worldpos) :world)
      (send b0 :assoc rb)
      (setq blist (append blist (send lb :bodies) (send rb :bodies))))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (setq l (kxr-link-create blist))
    (setf (get l :back-panel) (get b0 :back-panel))
    (setf (get l :neck) (get b0 :neck))
    (setf (get l :larm) (get b0 :larm))
    (setf (get l :rarm) (get b0 :rarm))
    (if leg-arms
	(setf (get l :lleg) lc (get l :rleg) rc)
	(setf (get l :lleg) (get b0 :lleg) (get l :rleg) (get b0 :rleg)))
    (setf (get l :mbase) (make-cascoords :pos (midpoint 0.5
						       (send (get l :lleg) :worldpos)
						       (send (get l :rleg) :worldpos))))
    (dolist (m (list :neck :larm :rarm :lleg :rleg :back-panel :mbase))
      (when (get l m)
	(send l :assoc (get l m))))
    l))

(defun kxr-l2w2-body-link (&key center-front shoulder-front side-front front-cut crotch-front shoulder-center)
  (let ((bs (kxr-l2w2-body-bodyset
	     :shoulder-front shoulder-front :crotch-front crotch-front :shoulder-center shoulder-center
	     :side-front side-front :center-front center-front :front-cut front-cut))
	l)
    (setq l (kxr-link-create bs))
    (dolist (k (list :torso :neck :lleg :rleg :larm :rarm :joint-coord :bottom :lwheel :rwheel :back-pack))
      (setf (get l k) (get bs k)))
    l))

(defun kxr-l2l6-body-link (&key	(backpack (kxr-back-pack)) mag-plate no-upper-body
				wide-crotch rotate-crotch
				shoulder-front neck-front shoulder-center
				(shoulder-servo t))
  (let* ((b0 (kxr-l2-body-bodyset :backpack backpack
				  :no-upper-body no-upper-body
				  :shoulder-front shoulder-front :neck-front neck-front
				  :mag-plate mag-plate :shoulder-center shoulder-center
				  :shoulder-servo shoulder-servo))
	 (blist (send b0 :bodies))
	 (bl (kxr-servo-bottom-supporter-bodyset :align (not wide-crotch) :bottom-spacer (not mag-plate)))
	 (br (kxr-servo-bottom-supporter-bodyset :align (not wide-crotch) :bottom-spacer (not mag-plate)))
	 l)
    (when wide-crotch
      (send bl :rotate pi/2 :z :world)
      (send br :rotate pi/2 :-z :world))
    (when rotate-crotch
      (send bl :rotate pi/2 :-z :world)
      (send br :rotate pi/2 :z :world))
    (send bl :locate (send (get b0 :lleg) :worldpos) :world)
    (send br :locate (send (get b0 :rleg) :worldpos) :world)
    (dolist (b (send bl :bodies)) (send (car blist) :assoc b))
    (dolist (b (send br :bodies)) (send (car blist) :assoc b))

    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (setq blist (append blist (send bl :bodies) (send br :bodies)))
    (send (car blist) :translate (v- (send (get b0 :joint-coord) :worldpos)) :world)
    (setq l (kxr-link-create blist))
    (setf (get l :neck) (get b0 :neck))
    (setf (get l :larm) (get b0 :larm))
    (setf (get l :rarm) (get b0 :rarm))
    (setf (get l :lleg) (get bl :joint-coord))
    (setf (get l :rleg) (get br :joint-coord))
    (setf (get l :back-panel) (get b0 :back-panel))
    (dolist (m (list :neck :larm :rarm :lleg :rleg :back-panel))
      (when (get l m) (send l :assoc (get l m))))
    l))

(defun kxr-l2l6-chest-link (&key (len 38) front-cut)
  (kxr-link-create (kxr-l2-chest-bodyset :front-cut front-cut)))

(defun kxr-l2l6-chest-r-link (&key (len 38))
  (kxr-link-create (kxr-l2-chest-bodyset :roll t)))

(defun kxr-l2l6-chest-upperback-link (&key (len 38))
  (kxr-link-create (kxr-l2-chest-bodyset :noback t)))

(defun kxr-l2l6-waist-link ()
  (kxr-link-create (kxr-l2-waist-bodyset)))

(defun kxr-l2l6-cut-waist-link (&key center-front side-front
				     (front-cut t) torso-origin
				     (offset (float-vector 0 0 3)))
  (let (bs)
    (setq bs (kxr-l2-cut-waist-bodyset :side-front side-front
				      :center-front center-front :front-cut front-cut))
    (cond
     ((and torso-origin (get bs :torso))
      (send bs :translate (v- (v- offset) (send (get bs :torso) :worldpos)) :world)
      (setq l (kxr-link-create bs)))
     (t (setq l (kxr-link-create bs))))
    l))

(defun kxr-l4d-ankle-link (&key (l/r :larm) frontal)
  (let ((bs (kxr-servo-joint-base-b-bodyset)))
    (when frontal
      (send bs :rotate -pi/2 :y :world))
    (kxr-link-create bs)))

(defun kxr-l4d-neck-link (&key (l/r :head) long sensor)
  (let* ((b0 (kxr-servo-frame-base-a-bodyset :sensor sensor))
	 (g (kxr-gripper-servo-bodyset :l/r l/r)) ;; :sensor sensor))
	 b s blist
	 (c (get g :joint-coord)))
    (send g :rotate pi/2 :z :world)
    (send g :locate (send (get b0 :joint-coord) :worldpos) :world)
    (send b0 :assoc g)
    (setq blist (append (send b0 :bodies) (send g :bodies)))
    (setq s (car (last blist)))
    (send s :assoc c)
    (send s :rotate pi :y :world)
    (send s :translate #f(21 0 0) :world)
    (send b0 :rotate pi :z :world)
    (cond
     (long
      (setq b (kxr-double-arm-base-link :up 38 :low 38 :angle pi))
      ;;(send b0 :rotate pi :y :world)
      (send b0 :locate #f(0 0 76) :world)
      (send b0 :rotate (deg2rad -135) :y :world)
      (setq blist (append (send b :bodies) blist)))
     (t 
      (send b0 :rotate (deg2rad -135) :y :world)))
    (kxr-link-create blist :joint-coord c)))

(defun kxr-mamoru-body-link (&key head torso base-b)
  (let* ((b0 (kxr-mamoru-torso-bodyset))
	 (blist (send b0 :bodies))
	 l)
    (setq l (kxr-link-create blist))
    (setf (get l :neck) (get b0 :neck))
    (setf (get l :larm) (get b0 :larm))
    (setf (get l :rarm) (get b0 :rarm))
    (setf (get l :lmarm) (get b0 :lmarm))
    (setf (get l :rmarm) (get b0 :rmarm))
    (setf (get l :lleg) (get b0 :lleg))
    (setf (get l :rleg) (get b0 :rleg))
    (dolist (p (list :neck :torso :larm :rarm :lmarm :rmarm :lleg :rleg))
      (if (get l p) (send l :assoc (get l p)))
      )
    l))

(defun kxr-mamoru-body-link-new (&key head torso base-b)
  (let* ((b0 (kxr-mamoru-torso-bodyset-new))
	 (blist (send b0 :bodies))
	 (s (stl2eus "stls/mamoru_down.stl" :scale 1000.0))
	 (nf (stl2eus "stls/mamoru_neck_front.stl" :scale 1000.0))
	 (nb (stl2eus "stls/mamoru_neck_backlong.stl" :scale 1000.0))
	 l)
    (send nf :rotate pi/2 :z)
    (send nb :rotate pi/2 :z)
    (send nf :locate #f(0 0 25) :world)    
    (send nb :locate #f(0 0 25) :world)    
    (send s :rotate pi/2 :z)
    (send s :locate #f(-1 0 -112) :world)
    (setq blist (append blist (list s nf nb)))
    (setq l (kxr-link-create blist))
    (setf (get l :neck) (get b0 :neck))
    (setf (get l :larm) (get b0 :larm))
    (setf (get l :rarm) (get b0 :rarm))
    (setf (get l :lmarm) (get b0 :lmarm))
    (setf (get l :rmarm) (get b0 :rmarm))
    (setf (get l :lleg) (get b0 :lleg))
    (setf (get l :rleg) (get b0 :rleg))
    (dolist (p (list :neck :torso :larm :rarm :lmarm :rmarm :lleg :rleg))
      (if (get l p) (send l :assoc (get l p)))
      )
    l))

(defun kxr-mamoru-body-link-new-2022 (&key head torso base-b)
  (let* ((b0 (kxr-mamoru-torso-bodyset-new-2022 :m5stack nil))
	 (display (make-cube 20 76 52))
     (blist (send b0 :bodies))
     (s (stl2eus "stls/kxrmamoru2_down_for_eusmodel_low_meshlab2.stl" :scale 1.0))
     (nf (stl2eus "stls/mamoru_neck_front.stl" :scale 1000.0))
     (nb (stl2eus "stls/mamoru_neck_backlong.stl" :scale 1000.0))
     l)
    (send nf :rotate pi/2 :z)
    (send nb :rotate pi/2 :z)
    (send nf :locate #f(0 0 25) :world)
    (send nb :locate #f(0 0 25) :world)
    ;;(send s :rotate pi/2 :z)
    ;;(send s :locate #f(-1 0 -112) :world)
    (send s :rotate pi/2 :x)
    (send s :locate #f(-148 161 -222.5) :world)
    (send display :locate #f(96 0 5) :world)
    (setq blist (append blist (list s nf nb display)))
    (setq l (kxr-link-create blist))
    (setf (get l :neck) (get b0 :neck))
    (setf (get l :larm) (get b0 :larm))
    (setf (get l :rarm) (get b0 :rarm))
    (setf (get l :lmarm) (get b0 :lmarm))
    (setf (get l :rmarm) (get b0 :rmarm))
    (setf (get l :lleg) (get b0 :lleg))
    (setf (get l :rleg) (get b0 :rleg))
    (dolist (p (list :neck :torso :larm :rarm :lmarm :rmarm :lleg :rleg))
      (if (get l p) (send l :assoc (get l p)))
      )
    l))

(defun kxr-mamoru-leg-link (&key (l/r :larm) (angle pi/2))
  (let* ((b0 (kxr-double-servo-flat-frames-short-bodyset))
	 (c (get b0 :joint-coord)))
    (case
     l/r
     (:larm (send b0 :rotate angle :y :world))
     (:rarm (send b0 :rotate pi :x :world)
	    (send b0 :rotate angle :y :world))
     (:lleg (send b0 :rotate angle :y :world))
     (:rleg (send b0 :rotate pi :x :world)
	    (send b0 :rotate angle :y :world))
     )
    (kxr-link-create (send b0 :bodies) :joint-coord c)
    ))

(defun kxr-l4bd-body-horizontal-link (&key head torso base-b flat-shoulder tail)
  (let* ((b0 (kxr-l4d-bodyset :flat-shoulder flat-shoulder :tail tail))
	 h h2 blist l (c (make-cascoords)))
    (cond
      ((eq head :d)
       (setq h2 (kxr-l2-neck-base-link :base-b base-b)) ;; pitch-axis
       (send h2 :locate (send (get b0 :neck) :worldpos) :world)
       (send b0 :assoc h2)
       ;;(send h :puton h2 (float-vector 21 0 0) (float-vector 0.0 0 10000))
       ;;(send h :assoc h2)
       (setq blist (append (send b0 :bodies) (send h2 :bodies)))    
       )
      (flat-shoulder
       ;;(setq h2 (kxr-l2-neck-base-link :base-b base-b)) ;; pitch-axis
       (setq h2 (kxr-servo-half-arm-supporter-a-bodyset))
       (send h2 :locate (float-vector -42 0 0) :world)
       (send h2 :rotate pi :z)
       (send h2 :rotate pi/2 :y)
       (send b0 :assoc h2)
       (send b0 :rotate pi :z :world)
       (setq blist (append (send b0 :bodies) (send h2 :bodies)))    
       ;;(dolist (p '(:neck :torso :larm :rarm :lmarm :rmarm :lleg :rleg))
       ;;(if (get l p) (send (car blist) :assoc (get l p))))
       )
      (t
       (setq h (kxr-servo-bottom-supporter-bodyset :align nil)) ;; yaw-axis
       (send h :rotate pi :x :world)
       (send h :worldpos)
       (send b0 :puton h (float-vector 43.5 0 0) (float-vector 0.0 0 10000))
       (setq blist (append (send b0 :bodies) (send h :bodies)))
       ))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (setq l (kxr-link-create blist :joint-coord c))
    (when h
      (setf (get l :neck) (get h :joint-coord))
      (setf (get l :torso) (get h :joint-coord)))
    (when h2 (setf (get l :neck) (get h2 :joint-coord))
	  (send l :assoc (get l :neck)))
    (dolist (p '(:larm :rarm :lmarm :rmarm :lleg :rleg))
      (setf (get l p) (get b0 p))
      (if (get l p) (send l :assoc (get l p))))
    l))

(defun kxr-l4b-body-horizontal-link (&key head torso base-b tail)
  (kxr-l4bd-body-horizontal-link :head head :torso torso :base-b base-b :flat-shoulder t
				 :tail tail))

(defun kxr-l4d-body-horizontal-link (&key head torso base-b)
  (kxr-l4bd-body-horizontal-link :head head :torso torso :base-b base-b))

(defun kxr-l4bd-body-stand-link (&key head base-b flat-shoulder tail shoulder-front neck-front
				   shoulder-low stand
				   crotch-front flat-crotch crotch-p crotch-low)
  (let* ((b0 (kxr-l4d-bodyset :flat-shoulder flat-shoulder :tail tail :shoulder-front shoulder-front
			      :stand stand
			      :shoulder-low shoulder-low
			      :crotch-front crotch-front :flat-crotch flat-crotch
			      :crotch-p crotch-p :crotch-low crotch-low))
	 (h (kxr-servo-half-arm-supporter-a-bodyset :neck-front neck-front))
	 h2 blist l (c (make-cascoords)))
    (send b0 :rotate pi/2 :-y :world)
    (send h :locate (float-vector 0 0 42) :world)
    (when stand (send b0 :rotate pi :z))
    (setq blist (append (send b0 :bodies) (send h :bodies)))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (setq l (kxr-link-create blist :joint-coord c))
    (setf (get l :neck) (get h :joint-coord))
    (setf (get l :larm) (get b0 :larm))
    (setf (get l :rarm) (get b0 :rarm))
    (setf (get l :lleg) (get b0  :lleg))
    (setf (get l :rleg) (get b0  :rleg))
    (when tail (setf (get l :tail) (get b0 :tail)))
    (dolist (p '(:neck :larm :rarm :lleg :rleg :tail))
      (if (get l p) (send l :assoc (get l p))))
    l))

(defun kxr-l4b-body-stand-link (&key head base-b shoulder-front neck-front tail
				  flat-shoulder shoulder-low
				  crotch-front flat-crotch crotch-p crotch-low)
  (kxr-l4bd-body-stand-link :head head :base-b base-b :flat-shoulder flat-shoulder :tail tail
			    :stand t :shoulder-low shoulder-low
			    :crotch-front crotch-front :flat-crotch flat-crotch
			    :shoulder-front shoulder-front :neck-front neck-front
			    :crotch-p crotch-p :crotch-low crotch-low))

(defun kxr-l4d-body-stand-link (&key head base-b)
  (kxr-l4bd-body-stand-link :head head :stand t :base-b base-b))

(defun kxr-l4r-crotch-link (&key (l/r :larm) (len 20))
  (let* ((b0 (kxr-arm-base-bodyset len))
	 (b1 (kxr-servo-bottom-supporter-bodyset :align nil))
	 blist (c (get b1 :joint-coord)))
    (send b0 :rotate pi/2 :z :world)
    (send b0 :rotate pi/2 :x :world)
    (send b1 :rotate pi/2 :x :world)
    (send b1 :rotate pi/2 :y :world)
    (send b0 :assoc b1)
    (cond
      ((kxr-right-limb? l/r)
       (send b0 :rotate pi :z :world)
       (send b0 :locate (float-vector 0 (- len) 0) :world))
      (t
       (send b0 :locate (float-vector 0 len 0) :world))
      )
    (setq blist (append (send b0 :bodies) (send b1 :bodies)))
    (kxr-link-create blist :joint-coord c)))

(defun kxr-l4t-crotch-link (&key (l/r :larm) (len0 20) (len1 26) l6)
  (let* ((b0 (kxr-arm-chain-base-bodyset len0 len1))
	 l (c (get b0 :joint-coord)))
    (cond
      (l6 
       (case
	   l/r
	 ((:larm :rarm) (send b0 :rotate pi/2 :-z :world))
	 ((:lleg :rleg) (send b0 :rotate pi/2 :z :world))
	 (:rmarm (send b0 :rotate pi :z :world))
	 ))
      (t
       (if (kxr-right-limb? l/r)
	   (send b0 :rotate pi :z :world))))
    (kxr-link-create (send b0 :bodies) :joint-coord c)))

(defun kxr-l6-knee-link (&key (l/r :larm) (axis :y))
  (let* ((b0 (kxr-double-servo-flat-frames-bodyset))
	 (blist (send b0 :bodies))
	 (c (get b0 :joint-coord)))
    (send b0 :assoc c)
    (case
	axis
      (:y
       (if (kxr-leg-limb? l/r) (send b0 :rotate pi :z :world)))
      (:x
       (if (kxr-left-limb? l/r)
	   (send b0 :rotate pi/2 :z :world)
	   (send b0 :rotate pi/2 :-z :world))))
    (kxr-link-create blist :joint-coord c)))

(defun kxr-l6-foot-link (&key (l/r :larm) (axis :y) sensor)
  (let* ((b0 (kxr-l6-foot-bodyset :sensor sensor))
	 (blist (send b0 :bodies))
	 (c (get b0 :joint-coord)))
    (send b0 :assoc c)
    (case
	axis
      (:y (if (kxr-leg-limb? l/r) (send b0 :rotate pi :z :world)))
      (:x (if (kxr-left-limb? l/r) (send b0 :rotate pi/2 :z :world)
	      (send b0 :rotate pi/2 :-z :world))))
    (kxr-link-create blist :joint-coord c)))

(defun kxr-servo-frame-base-a-link (&key (l/r :larm) (axis :y))
  (let ((b0 (kxr-servo-frame-base-a-bodyset)))
    (when (eq axis :x)
      (send b0 :rotate pi/2 :-z :world)
      (if (kxr-right-limb? l/r) (send b0 :rotate -pi/2 :x :world)
	  (send b0 :rotate pi/2 :x :world)))
    (kxr-link-create (send b0 :bodies) :joint-coord (get b0 :joint-coord))))

(defun kxr-l4tr-body-link (&key (neck t) neck-align torso (backpack t) magmodule neck-origin
				battery-box)
  (let* ((b0 (kxr-l4tr-bodyset :neck torso :backpack backpack :magmodule magmodule))
	 h (blist (send b0 :bodies)) l)
    (when neck
      (if neck-align
	  (setq h (kxr-servo-bottom-supporter-bodyset :align t :rotate-z pi))
	(setq h (kxr-servo-bottom-supporter-bodyset :align nil)))
      (send h :rotate pi :x :world)
      (send h :worldpos)
      (send b0 :puton h (float-vector 43.5 0 0) (float-vector 0.0 0 10000))
      (setq blist (append blist (send h :bodies))))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (when neck
      (send (car blist) :assoc (get h :joint-coord))
      )
    (dolist (b (list :rarm :rleg :larm :lleg))
      (send (car blist) :assoc (get b0 b)))
    (when (and neck neck-origin)
      (send (car blist) :translate (v- (send (get h :joint-coord) :worldpos)) :world))
    (setq l (kxr-link-create blist))
    (when neck
      (setf (get l :neck) (get h :joint-coord))
      (setf (get l :torso) (get h :joint-coord))
      )
    (setf (get l :joint-coord) (get b0 :joint-coord))
    (setf (get l :lmarm) (get b0 :larm)) (setf (get l :rmarm) (get b0 :rarm))
    (setf (get l :larm) (get b0 :larm)) (setf (get l :rarm) (get b0 :rarm))
    (setf (get l :lleg0) (get b0 :larm)) (setf (get l :rleg0) (get b0 :rarm))
    (setf (get l :lleg) (get b0 :lleg)) (setf (get l :rleg) (get b0 :rleg))
    (setf (get l :lleg1) (get b0 :lleg)) (setf (get l :rleg1) (get b0 :rleg))
    (dolist (p '(:neck :torso :lmarm :rmarm :larm :rarm :lleg :rleg
		       :lleg0 :rleg0 :lleg1 :rleg1 :joint-coord))
      (if (get l p) (send l :assoc (get l p))))
    l))

(defun kxr-l4mw-body-link (&key no-upper-body mag-joint
				base-a (servo-stand base-a)
				battery-stand base-wide base-middle (lidar t)
				torso-origin (offset (float-vector 0 0 0))
				(backpack (kxr-back-pack))
				shoulder-front neck-front shoulder-center
				(shoulder-servo t) magmodule)
  (let* ((b0 (if no-upper-body nil
	       (kxr-l2-body-bodyset :backpack backpack
				    :shoulder-front shoulder-front :neck-front neck-front
				    :shoulder-center shoulder-center
				    :shoulder-servo shoulder-servo)))
	 (b1 (kxr-l4w-bodyset :base-a base-a :servo-stand servo-stand :lidar lidar
			      :battery-stand battery-stand :mag-joint mag-joint
			      :base-wide base-wide :neck torso-origin :neck-front neck-front
			      :base-middle base-middle :magmodule magmodule))
	 to blist l bb)
    (cond
      (b0
       (send b0 :locate #f(0 0 24) :world)
       (send b0 :translate offset :world)
       (send b0 :worldcoords)
       (setq blist (append (send b0 :bodies) (send b1 :bodies))))
      (t 
       (setq b0 b1)
       (send b0 :translate offset :world)
       (send b0 :worldcoords)
       (setq blist (send b0 :bodies))
       (setq bb (make-bounding-box (flatten (send-all blist :vertices)) 0.0))
       (send b0 :translate (float-vector 0 0 (- (elt (send bb :maxpoint) 2))) :world)
       ))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (when torso-origin
      (send b0 :translate (v- (v- offset) (send (get b1 :torso) :worldpos)) :world))
    (setq l (kxr-link-create blist))
    (setf (get l :neck) (get b0 :neck))
    (setf (get l :larm) (get b0 :larm)) (setf (get l :rarm) (get b0 :rarm))
    (setf (get l :lleg0) (get b0 :larm)) (setf (get l :rleg0) (get b0 :rarm))
    (setf (get l :torso) (get b1 :torso))
    (setf (get l :joint-coord) (get b0 :joint-coord))
    (setf (get l :lleg) (get b1 :lleg)) (setf (get l :rleg) (get b1 :rleg))
    (setf (get l :lmarm) (get b1 :lmarm)) (setf (get l :rmarm) (get b1 :rmarm))
    (setf (get l :lleg2) (get b1 :lleg)) (setf (get l :rleg2) (get b1 :rleg))
    (setf (get l :lleg1) (get b1 :lmarm)) (setf (get l :rleg1) (get b1 :rmarm))
    (dolist (p '(:neck :torso :lmarm :rmarm :larm :rarm :lleg :rleg :joint-coord
		       :lleg0 :rleg0 :lleg1 :rleg1 :lleg2 :rleg2))
      (if (get l p) (send l :assoc (get l p))))
    l))

(defun kxr-l4dw-body-link (&key no-upper-body mag-joint
			     base-a battery-stand (backpack (kxr-back-pack)) lidar magmodule
			     torso-origin (offset (float-vector 0 0 0))
			     shoulder-front neck-front shoulder-center (shoulder-servo t))
  (let* ((b0 (if no-upper-body nil
		 (kxr-l2-body-bodyset :backpack backpack
				      :shoulder-front shoulder-front :neck-front neck-front
				      :shoulder-center shoulder-center
				      :shoulder-servo shoulder-servo)))
	 (b1 (kxr-l4dw-bodyset :base-a base-a :servo-stand t :mag-joint mag-joint
			       :neck torso-origin :neck-front neck-front
			       :battery-stand battery-stand :lidar lidar :magmodule magmodule))
	 blist l)
    (cond
      (b0
       (send b0 :locate #f(0 0 24) :world)
       (setq blist (append (send b0 :bodies) (send b1 :bodies))))
      (t 
       (setq b0 b1 blist (send b0 :bodies))
       (setq bb (make-bounding-box (flatten (send-all blist :vertices)) 0.0))
       (send b0 :translate (float-vector 0 0 (- (elt (send bb :maxpoint) 2))) :world)
       ))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (when torso-origin
      (send b0 :translate (v- (v- offset) (send (get b1 :torso) :worldpos)) :world)
      )
    (setq l (kxr-link-create blist))
    (setf (get l :neck) (get b0 :neck))
    (setf (get l :torso) (get b1 :torso))
    (setf (get l :larm) (get b0 :larm)) (setf (get l :rarm) (get b0 :rarm))
    (setf (get l :lleg) (get b1 :lleg)) (setf (get l :rleg) (get b1 :rleg))
    (setf (get l :lmarm) (get b1 :lmarm)) (setf (get l :rmarm) (get b1 :rmarm))
    (setf (get l :lleg0) (get b0 :larm)) (setf (get l :rleg0) (get b0 :rarm))
    (setf (get l :lleg2) (get b1 :lleg)) (setf (get l :rleg2) (get b1 :rleg))
    (setf (get l :lleg1) (get b1 :lmarm)) (setf (get l :rleg1) (get b1 :rmarm))
    (dolist (p '(:neck :torso :lmarm :rmarm :larm :rarm :lleg :rleg
		       :lleg0 :rleg0 :lleg1 :rleg1 :lleg2 :rleg2))
      (if (get l p) (send l :assoc (get l p))))
    l))

(defun kxr-l4ow-body-link (&key no-upper-body mag-joint
				battery-stand (backpack (kxr-back-pack)) (lidar t) magmodule
				torso-origin (offset (float-vector 0 0 0))
				shoulder-front neck-front shoulder-center (shoulder-servo t))
  (let* ((b0 (if no-upper-body nil
	       (kxr-l2-body-bodyset :backpack backpack :shoulder-front shoulder-front
				    :neck-front neck-front :shoulder-center shoulder-center
				    :shoulder-servo shoulder-servo)))
	 (b1 (kxr-l4ow-bodyset :battery-stand battery-stand :lidar lidar
			       :neck torso-origin :neck-front neck-front
			       :mag-joint mag-joint :magmodule magmodule))
	 blist l)
    (cond
     (b0
      (send b0 :locate #f(0 0 24) :world)
      (setq blist (append (send b0 :bodies) (send b1 :bodies))))
     (t 
      (setq b0 b1 blist (send b0 :bodies))
      (setq bb (make-bounding-box (flatten (send-all blist :vertices)) 0.0))
      (send b0 :translate (float-vector 0 0 (- (elt (send bb :maxpoint) 2))) :world)
      ))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (when torso-origin
      (send b0 :translate (v- (v- offset) (send (get b1 :torso) :worldpos)) :world)
      )
    (setq l (kxr-link-create blist))
    (setf (get l :neck) (get b0 :neck))
    (setf (get l :torso) (get b1 :torso))
    (setf (get l :larm) (get b0 :larm)) (setf (get l :rarm) (get b0 :rarm))
    (setf (get l :lleg) (get b1 :lleg)) (setf (get l :rleg) (get b1 :rleg))
    (setf (get l :lmarm) (get b1 :lmarm)) (setf (get l :rmarm) (get b1 :rmarm))
    (setf (get l :lleg0) (get b0 :larm)) (setf (get l :rleg0) (get b0 :rarm))
    (setf (get l :lleg2) (get b1 :lleg)) (setf (get l :rleg2) (get b1 :rleg))
    (setf (get l :lleg1) (get b1 :lmarm)) (setf (get l :rleg1) (get b1 :rmarm))
    (dolist (p '(:neck :torso :lmarm :rmarm :larm :rarm :lleg :rleg
		       :lleg0 :rleg0 :lleg1 :rleg1 :lleg2 :rleg2))
      (if (get l p) (send l :assoc (get l p))))
    l))

(defun kxr-twinmagbase-link (&key narrow joint)
  (let* ((h 11)
	 (b0 (kxr-twinmagbase (if narrow "magbase-narrow" "magbase") h))
	 jb l blist (y (if narrow (- 34 10.5) 34)))
    (send b0 :rotate pi/2 :z :world)
    (when joint
      (setq jb (kxr-joint-base))
      (send jb :locate (float-vector 0 0 6) :world)
      (setq blist (list jb))
      (send b0 :locate (float-vector 0 0 (+ h 6)) :world))
    ;;(send b0 :translate (float-vector 0 0 (- (/ h 2))) :world)
    (setq l (kxr-link-create (cons b0 blist)))
    (setf (get l :joint-coord) (make-cascoords :pos (send b0 :worldpos)))
    (setf (get l :mbase) (make-cascoords :pos (send b0 :worldpos)))
    (setf (get l :lleg) (make-cascoords :pos (float-vector 0 y (- h))))
    (setf (get l :rleg) (make-cascoords :pos (float-vector 0 (- y) (- h))))
    (dolist (n (list :lleg :rleg :joint-coord :mbase)) (send l :assoc (get l n)))
    l))

(defun kxr-l6-body-link (&key neck backpack magmodule torso-origin
			      (offset (float-vector 0 0 3)))
  (let (bs)
    (setq bs (kxr-l6-bodyset :neck neck :backpack backpack :magmodule magmodule))
    (cond
     ((and torso-origin (get bs :torso))
      (send bs :translate (v- (v- offset) (send (get bs :torso) :worldpos)) :world)
      (setq l (kxr-link-create bs)))
     (t (setq l (kxr-link-create bs))))
    (when (get bs :torso)
      (setf (get l :torso) (get bs :torso))
      (send l :assoc (get l :torso)))
    l))

(defun kxr-l2-neck-base-link (&key base-b (servo t) rotate dummy pitch apply-list horn)
  (kxr-l2-neck-base-link-aux
   :base-b base-b :servo servo :dummy dummy :horn horn
   :rotate rotate :pitch pitch :apply-list apply-list))

(defun kxr-l2-neck-base-r-link (&key base-b (servo t) dummy apply-list horn)
  (kxr-l2-neck-base-link-aux
   :base-b base-b :servo servo :roll t :dummy dummy :apply-list apply-list :horn horn))

(defun kxr-l2-neck-base-link-aux (&key base-b (servo t) dummy rotate roll pitch apply-list sensor horn)
  (let ((bod (cond
	       ((eq-memq base-b (list t :b :front :b-front))
		(kxr-joint-frame-base-b-bodyset :frame servo :sensor sensor))
	       ((eq-memq base-b (list t :-b :back :b-back))
		(kxr-joint-frame-base-b-bodyset :frame servo :sensor sensor :z-rotation pi))
	       (t (kxr-joint-frame-base-a-bodyset :frame servo :sensor sensor))))
	h bs
	s (c (make-cascoords))
	l blist)
    (cond
      (servo
       (setq s (kxr-servo-s3301))
       (send s :rotate pi/2 :y)
       (send s :assoc c)
       (if base-b
	   (send s :locate (float-vector 0 -10.5 (+ 9 21)) :world)
	   (send s :locate (float-vector 0 0 (+ 9 21)) :world))
       (cond
	 ((numberp rotate)
	  (send s :rotate (deg2rad rotate) :x :world)
	  (send s :translate #f(0 10.5 -10.5) :world))
	 (rotate (send s :rotate pi/2 :x :world)
		 (send s :translate #f(0 -10.5 -10.5) :world)))
       (send bod :assoc s)
       (push s blist))
      (t (send c :locate #f(0 0 6))))
    (send bod :rotate pi/2 :z)
    (if (eq-memq base-b (list :b-back :back)) (send bod :rotate pi :z))
    (send bod :locate #f(0 0 3) :world)
    (setq blist (append (send bod :bodies) blist))
    (when horn
      (setq h (kxr-horn))
      (send h :rotate pi :x :world)
      (push h blist)
      (send h :assoc bod)
      (send h :translate #f(0 0 3) :world))
    (setq blist (kxr-bodyset-create blist))
    (dolist (al apply-list) (send* blist al))
    (setq l (kxr-link-create blist :joint-coord c))
    (if roll (send l :rotate pi/2 :z :world))
    (if pitch (send l :rotate pi/2 :y :world))
    l))

(defun kxr-l2-dyp-chest-base-link (&key base-b (servo t))
  (let ((bod (kxr-dyp-base))
	(a1  (kxr-flat-arm42))
	(a2  (kxr-flat-arm42))
	s (c (make-cascoords))
	l blist)
    (send a1 :rotate pi/2 :z)
    (send a2 :rotate pi/2 :-z)
    (send a1 :locate #f(0 15 4) :world)
    (send a2 :locate #f(0 -15 4) :world)
    (send c :locate #f(0 0 42) :world)
    (setq blist (list bod a1 a2))
    (kxr-link-create blist :joint-coord c)))

(defun kxr-l2-lyp-chest-base-link (&key base-b (servo t) (len 26))
  (let ((bod (kxr-arm-base-bodyset len)))
    (send bod :rotate pi/2 :z)
    (kxr-link-create (send bod :bodies) :joint-coord (get bod :joint-coord))))

(defun kxr-l2-lyp-chest-link (&key front side-up wheel-arms bottom-arm)
  (let* ((b0 (kxr-servo-s3301))
	 (b1 (kxr-servo-s3301))
	 (bsl1 (kxr-bottom-spacer))
	 (bsr1 (kxr-bottom-spacer))
	 bsl bsr
	 (jbl (kxr-arm-base-bodyset 28))
	 (jbr (kxr-arm-base-bodyset 28))
	 (bp (kxr-joint-base-back-pack))
	 wal war wlj wrj la ra ne blist l len)
    (if side-up
	(send bp :locate (float-vector -39 0 56) :world)
	(send bp :locate (float-vector -39 0 (- 56 10.5)) :world))
    (send b0 :rotate pi/2 :x)
    (send b0 :rotate pi/2 :-y :world)
    (send b1 :rotate pi/2 :-x)
    (send b1 :rotate pi/2 :y :world)
    (send b1 :locate #f(0 0 63) :world)

    (send jbl :rotate pi/2 :-x)
    (send jbl :rotate pi/2 :y :world)
    (when wheel-arms
      (setq wal (kxr-joint-base-arms-bodyset))
      (send wal :locate (float-vector 0 20 -19) :world)
      (send jbl :assoc wal)
      )
    (send jbl :locate (float-vector 0 6 21) :world)
    (when
	side-up
      (setq bsl (kxr-bottom-spacer))
      (send bsl :rotate pi/2 :z)
      (send bsl :assoc jbl))
    (cond
      (front
       (send bsl1 :rotate pi/2 :z)
       (send bsl1 :rotate pi/2 :y :world)
       (send bsl1 :locate (float-vector -21 0 0) :world)
       (cond
	 (side-up
	  (send bsl :locate (float-vector 0 6 -10.5) :world)
	  (send bsl1 :assoc bsl))
	 (t
	  (send jbl :locate (float-vector 0 6 0) :world)
	  (send bsl1 :assoc jbl)
	  (send bsl1 :locate (float-vector -10.5 13 (+ 10.5 21)) :world))))
      (t
       (send bsl1 :rotate pi/2 :z)
       (send bsl1 :rotate pi/2 :-y :world)
       (cond
	 (side-up
	  (send bsl :locate (float-vector -21 6 -10.5) :world)
	  (send bsl1 :assoc bsl)
	  (send bsl1 :locate (float-vector 10.5 13 (+ 10.5 21)) :world))
	 (t
	  (send bsl1 :locate (float-vector 21 0 21) :world)
	  (send bsl1 :assoc jbl)
	  (send bsl1 :locate (float-vector 10.5 13 (+ 10.5 21)) :world)))))
    (send jbr :rotate pi/2 :x)
    (send jbr :rotate pi/2 :y :world)
    (when wheel-arms
      (setq war (kxr-joint-base-arms-bodyset))
      (send war :locate (float-vector 0 -20 -19) :world)
      (send jbr :assoc war)
      )
    (send jbr :locate (float-vector 0 -6 21) :world)
    (when side-up
      (setq bsr (kxr-bottom-spacer))
      (send bsr :rotate pi/2 :-z)
      (send bsr :assoc jbr))
    (cond
      (front
       (send bsr1 :rotate pi/2 :-z)
       (send bsr1 :rotate pi/2 :y :world)
       (send bsr1 :locate (float-vector -21 0 0) :world)
       (cond
	 (side-up
	  (send bsr :locate (float-vector 0 -6 -10.5) :world)
	  (send bsr1 :assoc bsr))
	 (t
	  (send jbr :locate (float-vector 0 -6 0) :world)
	  (send bsr1 :assoc jbr)
	  (send bsr1 :locate (float-vector -10.5 -13 (+ 10.5 21)) :world))))
      (t
       (send bsr1 :rotate pi/2 :-z)
       (send bsr1 :rotate pi/2 :-y :world)
       (cond
	 (side-up
	  (send bsr :locate (float-vector -21 -6 -10.5) :world)
	  (send bsr1 :assoc bsr)
	  (send bsr1 :locate (float-vector 10.5 -13 (+ 10.5 21)) :world))
	 (t
	  (send bsr1 :locate (float-vector 21 0 21) :world)
	  (send bsr1 :assoc jbr)
	  (send bsr1 :locate (float-vector 10.5 -13 (+ 10.5 21)) :world))
	 )))
    (when
	side-up (setq blist (list bsl bsr)))
    (when wheel-arms
      (setq blist (append (send wal :bodies) (send war :bodies) blist))
      (setq wlj (get wal :joint-coord))
      (setq wrj (get war :joint-coord)))
    (setq la (get jbl :joint-coord))
    (setq ra (get jbr :joint-coord))
    (setq ne (get b1 :joint-coord))
    (cond
      (bottom-arm
       (setq l (kxr-joint-base-arms-bodyset :arm-len len))
       (send l :locate #f(0 0 -3) :world)
       (setq b0 (make-cube 27 27 6))
       (send b0 :assoc l)
       (send b0 :locate #f(0 0 21) :world)
       (setq len (if (numberp bottom-arm) bottom-arm 20))
       (setq blist (append blist (send l :bodies)))
       (setq blist (append (list b0 b1 bp) (send jbl :bodies) (send jbr :bodies)
			   (list bsl1 bsr1) blist))
       (dolist (b (cdr blist)) (send b0 :assoc b))
       (send b0 :translate (float-vector 0 0 (- len 12)) :world)
       )
      (t 
       (setq blist (append (list b0 b1 bp) (send jbl :bodies) (send jbr :bodies)
			   (list bsl1 bsr1) blist))))
    (if wheel-arms
	(dolist (l (list la ra ne wlj wrj)) (send (car blist) :assoc l))
	(dolist (l (list la ra ne)) (send (car blist) :assoc l)))
    (setq l (kxr-link-create blist :joint-coord (get b1 :joint-coord)))
    (send l :put :larm la)
    (send l :put :rarm ra)
    (send l :put :neck ne)
    (when wheel-arms
      (send l :put :lwheel wlj)
      (send l :put :rwheel wrj)
      )
    (dolist (nm '(:larm :rarm :neck :lwheel :rwheel))
      (if (get l nm) (send l :assoc (get l nm))))
    l)
  )

(defun kxr-l2-lypy-chest-link (&key front rotate)
  (let* ((b0 (kxr-servo-s3301))
	 (b1 (kxr-servo-bottom-supporter-bodyset))
	 (bsl (kxr-bottom-spacer))
	 (bsr (kxr-bottom-spacer))
	 (bsl1 (kxr-bottom-spacer))
	 (bsr1 (kxr-bottom-spacer))
	 (jbl (kxr-arm-base-bodyset 28))
	 (jbr (kxr-arm-base-bodyset 28))
	 la ra ne
	 blist l)
    (send b0 :rotate pi/2 :x)
    (send b0 :rotate pi/2 :-y :world)
    (when rotate (send b0 :rotate pi/2 :y :world))
    (send b1 :rotate pi :x :world)
    (send b1 :rotate pi :z :world)
    (send b1 :locate #f(0 0 38) :world)
    (when rotate
      (send b1 :translate #f(10.5 0 -10.5) :world))
    ;;(send b1 :rotate pi/2 :-x)
    ;;(send b1 :rotate pi/2 :y :world)
    ;;(send b1 :locate #f(0 0 63) :world)

    (send jbl :rotate pi/2 :-x)
    (send jbl :rotate pi/2 :y :world)
    (send jbl :locate (float-vector 0 6 21) :world)
    (send bsl :rotate pi/2 :z)
    (send bsl :assoc jbl)
    (cond
      (front
       (send bsl :locate (float-vector 0 6 -10.5) :world)
       (send bsl1 :rotate pi/2 :z)
       (send bsl1 :rotate pi/2 :y :world)
       (send bsl1 :locate (float-vector -21 0 0) :world)
       (send bsl1 :assoc bsl)
       (if rotate
	   (send bsl1 :locate (float-vector 0 13 21) :world)
	   (send bsl1 :locate (float-vector -10.5 13 (+ 10.5 21)) :world))
       )
      (t
       (send bsl :locate (float-vector -21 6 -10.5) :world)
       (send bsl1 :rotate pi/2 :z)
       (send bsl1 :rotate pi/2 :-y :world)
       (send bsl1 :assoc bsl)
       (if rotate
	   (send bsl1 :locate (float-vector 0 13 21) :world)
	   (send bsl1 :locate (float-vector 10.5 13 (+ 10.5 21)) :world))
       ))
    (send jbr :rotate pi/2 :x)
    (send jbr :rotate pi/2 :y :world)
    (send jbr :locate (float-vector 0 -6 21) :world)
    (send bsr :rotate pi/2 :-z)
    (send bsr :assoc jbr)
    (cond
      (front
       (send bsr :locate (float-vector 0 -6 -10.5) :world)
       (send bsr1 :rotate pi/2 :-z)
       (send bsr1 :rotate pi/2 :y :world)
       (send bsr1 :locate (float-vector -21 0 0) :world)
       (send bsr1 :assoc bsr)
       (if rotate
	   (send bsr1 :locate (float-vector 0 -13 21) :world)
	   (send bsr1 :locate (float-vector -10.5 -13 (+ 10.5 21)) :world)
	   ))
      (t
       (send bsr :locate (float-vector -21 -6 -10.5) :world)
       (send bsr1 :rotate pi/2 :-z)
       (send bsr1 :rotate pi/2 :-y :world)
       (send bsr1 :assoc bsr)
       (if rotate
	   (send bsr1 :locate (float-vector 21 -13 21) :world)
	   (send bsr1 :locate (float-vector 10.5 -13 (+ 10.5 21)) :world))
       ))
    (setq la (get jbl :joint-coord))
    (setq ra (get jbr :joint-coord))
    (setq ne (get b1 :joint-coord))
    (setq blist (append (list b0) (send b1 :bodies) (send jbl :bodies) (send jbr :bodies)
			(list bsl bsr bsl1 bsr1)))
    (dolist (l (list la ra ne)) (send (car blist) :assoc l))
    (setq l (kxr-link-create blist :joint-coord (get b1 :joint-coord)))
    (send l :put :larm la)
    (send l :put :rarm ra)
    (send l :put :neck ne)
    (dolist (nm '(:larm :rarm :neck)) (send l :assoc (get l nm)))
    l)
  )

(defun kxr-l2-dyp-chest-link-aux (&key (frame (kxr-dyp-chest-frame-bodyset)) (neck-axis :p) no-dyp sensor)
  (let* ((bod (kxr-dual-servo-bodyset 2))
	 (b0 (if (eq neck-axis :p) (kxr-joint-base-a-servo-bodyset :sensor sensor)
		 (kxr-servo-bottom-supporter-bodyset :align t :flip-axis :y)))
	 (s0 (kxr-servo-joint-base-b-side-bodyset))
	 (s1 (kxr-servo-joint-base-b-side-bodyset :larm))
	 la ra (ne (make-cascoords)) l blist)
    (send b0 :locate #f(0 0 9) :world)
    (send frame :assoc b0)
    (cond
      (no-dyp
       (setq bod (kxr-arm-base-bodyset 26))
       (send bod :rotate pi :x)
       (send bod :rotate pi/2 :z)
       (send bod :assoc frame)
       (send bod :locate #f(0 0 26) :world))
      (t 
       (send frame :locate #f(0 0 38) :world)
       (send bod :assoc frame)
       (send bod :locate #f(0 0 -9))))
    (setq ra (copy-object (get s0 :upper-coord)))
    (setq la (copy-object (get s1 :upper-coord)))
    (send s0 :assoc ra)
    (send s1 :assoc la)
    (send s0 :locate #f(0 -33 0) :world)
    (send s1 :locate #f(0  33 0) :world)
    (send ra :translate (float-vector 0 0 23) :world)
    (send la :translate (float-vector 0 0 23) :world)
    (setq ne (copy-object (get b0 :joint-coord)))
    (setq blist (append (send bod :bodies) (send frame :bodies)
			(send b0 :bodies) (send s0 :bodies) (send s1 :bodies)))
    (dolist (l (list la ra ne)) (send (car blist) :assoc l))
    (setq l (kxr-link-create blist :joint-coord ne))
    (send l :put :larm la)
    (send l :put :rarm ra)
    (send l :put :neck ne)
    (dolist (nm '(:larm :rarm :neck)) (send l :assoc (get l nm)))
    l))

(defun kxr-l2-dyp-chest-link (&key (frame (kxr-dyp-chest-frame-bodyset)) (neck-axis :p) no-dyp sensor)
  (kxr-l2-dyp-chest-link-aux :frame frame :neck-axis neck-axis :no-dyp no-dyp :sensor sensor))

;; for kxrl2makabeorig (diff: without gyro sensor)
(defun kxr-l2-dyp-chest-link-orig (&key (frame (kxr-dyp-chest-frame-bodyset-orig)) (neck-axis :p) no-dyp)
  (kxr-l2-dyp-chest-link-aux :frame frame :neck-axis neck-axis :no-dyp no-dyp))

;; for kxrl2makaberaspi (diff: backpack size)
(defun kxr-l2-dyp-chest-link2 (&key (frame (kxr-dyp-chest-frame-bodyset2)) (neck-axis :p))
  (kxr-l2-dyp-chest-link-aux :frame frame :neck-axis neck-axis))
			     
(defun kxr-l2-lyp-waist-link (&key low-axis)
  (let* (blist
	 (b0 (kxr-joint-base))
	 (bl (kxr-servo-double-arm-supporter-a-bodyset))
	 (br (kxr-servo-double-arm-supporter-a-bodyset))
	 (cy (kxr-servo-bottom-supporter-bodyset :align t))
	 l)
    (cond
      (low-axis
       (send bl :rotate pi/2 :-y :world)
       (send br :rotate pi/2 :-y :world))
      (t
       (send bl :rotate pi/2 :y :world)
       (send br :rotate pi/2 :y :world))
      )
    (send bl :locate (float-vector 0 21 0))
    (send br :locate (float-vector 0 -21 0))
    (send br :rotate pi :z :world)
    (send cy :rotate pi :x)
    (send cy :locate #f(0 0 22.5) :world)
    (setq blist (append (send bl :bodies) (send br :bodies) (send cy :bodies)))
    (send b0 :locate #f(0 0 -25.5))
    (setq blist (cons b0 blist))
    (setq l (kxr-link-create blist :joint-coord (get cy :joint-coord)))
    (setf (get l :lleg) (get bl :joint-coord))
    (setf (get l :rleg) (get br :joint-coord))
    (setf (get l :torso) (get cy :joint-coord))
    (dolist (nm (list :lleg :rleg :torso)) (send l :assoc (get l nm)))
    (send l :locate #f(0 0 28.5))
    l))

(defun kxr-l2-dyp-waist-link (&key base-b (servo t))
  (kxr-link-create (kxr-dual-servo-bodyset 5)))

(defun kxr-l2-dyp-z-waist-link (&optional front)
  (let* ((bod (kxr-dual-servo-bodyset 5))
	 (cy (kxr-servo-bottom-supporter-bodyset :align t))
	 l blist)
    (send cy :rotate pi :x)
    (send cy :locate #f(0 0 38) :world)
    (if front (send cy :rotate pi :z))
    (setq blist (append (send bod :bodies) (send cy :bodies)))
    (setq l (kxr-link-create blist :joint-coord (get cy :joint-coord)))
    (setf (get l :torso) (get cy :joint-coord))
    (dolist (na '(:lleg :rleg)) (send l :put na (get bod na)))
    (dolist (p '(:lleg :rleg :torso)) (send l :assoc (get l p)))
    l))

(defun kxr-servo-luy-p-link (&key base-b (servo t) wheel up (l/r :rarm))
  (let ((bod (kxr-cross-servo-bodyset-aux
	      :frame-b t
	      :supporter (if wheel :a)
	      :canti (if (eq l/r :larm)
			 (if up nil :-y)
			 (if up :-y nil))))
	b1 b2 blist l (c (make-cascoords)))
    (send bod :rotate pi :x)
    (send bod :rotate pi/2 :y)
    (setq blist (send bod :bodies))
    (when wheel
      (setq b1 (kxr-arm-passive-wheel-bodyset))
      (send b1 :assoc c)
      (send b1 :rotate pi/2 :z)
      (send b1 :rotate pi :x)
      (if (eq l/r :larm)
	  (if up (send b1 :locate #f(0 -8 -26) :world)
	      (send b1 :locate #f(0 0 -56) :world))
	  (if up (send b1 :locate #f(0 8 -26) :world)
	      (send b1 :locate #f(0 0 -56) :world)))
      #|
      (setq b1 (kxr-wheel-servo-spacer-bodyset))
      (send c :locate (float-vector (+ -6.5 -9 -10.5) 0 0) :world)
      (send b1 :assoc c)
      (send b1 :rotate pi/2 :-y :world)
      (send b1 :locate #f(0 0 -48) :world)
      (setq blist (append (send bod :bodies) (send b1 :bodies)))
      |#
      )
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (send (car blist) :assoc (get bod :upper-coord))
    (when up (send (car blist) :rotate pi :x :world))
    (when wheel
      (setq blist (append blist (send b1 :bodies))))
    (kxr-link-create blist :joint-coord (get bod :upper-coord))))

(defun kxr-servo-y-p-link (&key base-b (servo t) (l/r :rarm))
  (let ((bod (kxr-servo-y-p-bodyset l/r)))
    (kxr-link-create (send bod :bodies) :joint-coord (get bod :upper-coord))))

(defun kxr-l2-head-link (&key (len 20) (head (kxr-euclid-head)) axis roll apply-list sensor)
  (if (null len) (setq len 20))
  (let ((bod (kxr-arm-base-bodyset len :sensor sensor :horn nil))
	(c (make-cascoords)) pos-up pos-bottom blist l h)
    (send bod :rotate pi/2 :z)
    (send bod :rotate pi :y)
    (if (eq axis :x) (send bod :rotate pi/2 :z :world))
    (send bod :assoc c)
    (if head (send bod :assoc head))
    (cond
      ((derivedp head bodyset)
       (setq h (car (send head :bodies)))
       (send h :put :name "head")
       ;;(send h :move-named-coords "uph3" (car (send bod :bodies)) "sideh2" pi :z)
       ;;(setq blist (append (send bod :bodies) (cons h (cdr (send head :bodies)))))
       (setq blist (append (send bod :bodies) (send head :bodies)))
       (setq bod (car blist))
       (dolist (b (cdr blist)) (send bod :assoc b))
       (dolist (c (get head :cameras)) (send bod :assoc c))
       ;;(pprint blist)
       )
      (head
       (if (derivedp head bodyset)
	   (setq h (car (send head :bodies)))
	   (setq h head))
       (send h :put :name "head")
       (setq pos-up (bodies-vector-limit (list h) #f(0 0 -10000) #f(0 0 1)))
       (setq pos-bottom (bodies-vector-limit (list h) #f(0 0 10000) #f(0 0 -1)))
       (setq c (make-cascoords))
       (when pos-up
	 (send h :locate (float-vector 0 0 (- pos-up)) :world))
       (send h :assoc c)
       (when pos-bottom
	 (send h :locate (float-vector 0 0 (- pos-bottom)) :world))
       (send h :worldcoords)
       (cond
	 ((derivedp head bodyset)
	  (setq blist (append (send bod :bodies) (cons h (cdr (send head :bodies)))))
	  )
	 (t (setq blist (append (send bod :bodies) (list h))))))
      (t (setq blist (send bod :bodies))))
    ;;
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (send (car blist) :assoc c)
    (send (car blist) :locate (float-vector 0 0 (- len 3)) :world)
    (when roll
      (setq blist (kxr-bodyset-create blist))
      (send blist :rotate pi/2 :y :world))
    (setq blist (kxr-bodyset-create blist))
    (dolist (al apply-list) (send* blist al))
    (setq l (kxr-link-create blist :joint-coord c))
    (dolist (c (get head :cameras)) (send l :assoc c))
    (send l :put :cameras (get head :cameras))
    l))

(defun kxr-yaw-double-servo-link (&key (len 20) rotate roll (arms t) (base t))
  (let* (;;(u (kxr-upper-arm len))
	 ;;(l (kxr-bottom-arm len))
	 u l
	 (s1 (kxr-servo-s3301))
	 (s2 (kxr-servo-s3301))
	 (j0 (kxr-joint-base))
	 (j1 (kxr-joint-base))
	 (c (make-cascoords)) blist)
    (send j1 :assoc c)
    (send s1 :move-named-coords "uph3" j0 "downh3" pi/2 :z)
    (send s2 :move-named-coords "uph4" j0 "downh4" pi/2 :-z)
    (when (and arms base)
      (setq u (kxr-upper-arm len))
      (setq l (kxr-bottom-arm len))      
      (cond
	(rotate
	 (send u :move-named-coords "downh1" j0 "sideh1" pi :z)
	 (send l :move-named-coords "downh1" j0 "sideh3"))
	(t (send u :move-named-coords "downh1" j0 "sideh4" pi/2 :-z)
	   (send l :move-named-coords "downh1" j0 "sideh2" pi/2 :z)))
      (setq blist (list u l)))
    (send j1 :move-named-coords "uph3" s2 "downh4" pi :x)
    (send j0 :rotate pi/2 :z)
    (send j0 :rotate pi :y)
    (send j0 :rotate pi/2 :z :world)
    (setq blist (append (list j0 j1 s1 s2) blist))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (if base (setq len 6) (setq len 0))
    (cond
      (roll
       (send (car blist) :rotate pi/2 :y :world)
       (send (car blist) :locate (float-vector (- len 3) 0 0) :world))
      (t (send (car blist) :locate (float-vector 0 0 (- len 3)) :world)))
    (unless base (pop blist))
    (send c :translate #f(0 0 3) :world)
    (setq l (kxr-link-create blist :joint-coord c))
    ;;(setf (get l :joint-coord) (send j1 :find-named-coords "downh0"))
    (setf (get l :reye) (get s1 :joint-coord))
    (setf (get l :leye) (get s2 :joint-coord))
    l))

(defun kxr-yaw-double-servo-flat-link (&key rotate (len 20) (arms t) (base t))
  (let* ((fb (kxr-flat-frame))
	 (ft (kxr-flat-frame))
	 (ls (kxr-servo-s3301))
	 (rs (kxr-servo-s3301))
	 (j0 (kxr-joint-base))
	 (c (make-cascoords))
	 ua la blist holes)
    (send fb :rotate -pi/2 :y :world)
    (send fb :rotate -pi/2 :z :world)
    (send fb :rotate pi :x :world)
    (send fb :locate #f(0 0 5) :world)
    (send ls :move-named-coords "downh4" fb "ruup0")
    (send rs :move-named-coords "downh3" fb "rdup0" pi :z)
    (send ft :move-named-coords "rdup0" ls "uph4")
    ;;
    (when (and arms base)
      (setq ua (kxr-upper-arm len))
      (setq la (kxr-bottom-arm len))
      (cond
	(rotate
	 (send ua :move-named-coords "downh1" j0 "sideh1" pi :z)
	 (send la :move-named-coords "downh1" j0 "sideh3"))
	(t (send ua :move-named-coords "downh1" j0 "sideh4" pi/2 :-z)
	   (send la :move-named-coords "downh1" j0 "sideh2" pi/2 :z)))
      (setq blist (list ua la))
      )
    (send j0 :rotate pi/2 :z)
    (send j0 :rotate pi :y)
    (send j0 :rotate pi/2 :z :world)
    (send j0 :translate (float-vector 0 0 -3) :world)
    (send j0 :assoc c)
    (send j0 :assoc fb)
    (setq blist (append (list j0 fb ft ls rs) blist))
    (if base
	(if (null arms) (setq len 6))
	(setq len 0))
    (send j0 :locate (float-vector 0 0 (- len 3)) :world)
    (unless base (pop blist))
    (setq l (kxr-link-create blist :joint-coord c))
    ;;
    (setf (get l :reye) (get rs :joint-coord))
    (setf (get l :leye) (get ls :joint-coord))
    l))

(defun kxr-double-servo-joint-base-link (&key (l/r :lleg))
  (let ((b0 (kxr-double-servo-joint-base-bodyset l/r))
	l blist (c (make-cascoords)))
    (setq blist (send b0 :bodies))
    (setq l (kxr-link-create blist :joint-coord c))
    (cond
      ((kxr-left-limb? l/r)     
       (setf (get l :lmarm) (get b0 :front))
       (setf (get l :lleg) (get b0 :back)))
      (t
       (setf (get l :rmarm) (get b0 :front))
       (setf (get l :rleg) (get b0 :back)))
      )
    l))

(defun kxr-m5stickv-eye-link (&key (len 26) (l/r :leye) outer front frame vertical roll) ;; frame= :low or :high
  (let* ((h (kxr-m5stickv-frame-link :outer outer :front front
				     :vertical vertical
				     :b (if (or front vertical)
					    (case frame
					      ((:out :low) (if (eq l/r :reye) :a :b))
					      ((:in :high) (if (eq l/r :reye) :b :a)))
					    (case frame
					      ((:out :low) (if (eq l/r :reye) :b :a))
					      ((:in :high) (if (eq l/r :reye) :a :b)))
					    )))
	 jb f l0 l1 blist)
    (setq l0 (kxr-l2-head-link :head nil :len len))
    (setq jb (send l0 :find-named-coords "joint-base"))
    (setq f (send h :find-named-coords "frame"))
    (send h :dissoc f)
    (send f :assoc h)
    (case l/r
      (:leye 
       (cond (front
	      (send f :move-named-coords "uph3" jb "sideh4")
	      (send l0 :rotate pi/2 :-x :world)
	      (send l0 :rotate pi/2 :-z :world)
	      )
	     (vertical
	      (send f :move-named-coords "uph3" jb "sideh1" -pi/2 :z)
	      (send l0 :rotate pi/2 :-x :world)
	      (send l0 :rotate pi/2 :-z :world))
	     (t
	      (send f :move-named-coords "downh1" jb "uph4")
	      (send l0 :rotate pi/2 :-x :world))))
      (:reye 
       (cond
	(front
	  (send f :move-named-coords "uph3" jb "sideh2" pi :z)
	  (send l0 :rotate pi/2 :-x :world)
	  (send l0 :rotate -pi/2 :z :world)
	  )
	 (vertical
	  (send f :move-named-coords "uph3" jb "sideh1" -pi/2 :z)
	  (send l0 :rotate pi/2 :-x :world)
	  (send l0 :rotate -pi/2 :z :world)
	  )
	 (t
	  (send f :move-named-coords "downh1" jb "uph2" pi :z)
	  (send l0 :rotate pi/2 :-x :world)
	  (send l0 :rotate pi :z :world)))
       ))
    (setq blist (append (send l0 :bodies) (send h :bodies)))
    (if vertical
	(setq blist (remove (send l0 :find-named-object "bottom" :method :all-descendants) blist)))
    ;;(setq l1 (kxr-link-create blist :joint-coord (get l0 :joint-coord)))
    (when roll
      (setq blist (kxr-bodyset-create blist))
      (send blist :rotate pi/2 :y :world))
    (setq l1 (kxr-link-create blist :joint-coord (get h :joint-coord)))
    (setf (get l1 :cameras) (get h :cameras))
    (dolist (c (get l1 :cameras)) (send l1 :assoc c))
    l1))

(defun kxr-m5stickv-frame-link (&key outer front b vertical)
  (let* ((jf (case b (:a (kxr-joint-frame-b-a))
		   (:b (kxr-joint-frame-b-b)) 
		   ((nil t) (kxr-joint-frame-a))))
	 (mbs (m5stickv-bodyset))
	 base
	 (c (make-cascoords)) blist l)
    (cond
      ((or front vertical) (send jf :move-named-coords "downh4" mbs "baseh0" -pi/2 :z))
      (t (send jf :move-named-coords "downh3" mbs "baseh0" pi/2 :z)))
    (setq blist (cons jf (send mbs :bodies)))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (send (car blist) :assoc c)
    (dolist (b (get mbs :cameras)) (send (car blist) :assoc b))
    (cond
      (front
       (setq base (send jf :find-named-coords "uph3"))
       (send jf :rotate -pi/2 :y :world)
       (send jf :translate (v- (float-vector 13 0 -2) (send base :worldpos)) :world))
      (vertical
       (setq base (send jf :find-named-coords "uph3"))
       (send jf :rotate -pi/2 :y :world)
       (send jf :rotate pi/2 :z :world)
       (send jf :translate (v- (float-vector 0 13 -2) (send base :worldpos)) :world))
      (t (setq base (send jf :find-named-coords "downh4"))
	 (send jf :translate (v- (float-vector 10.5 0 (if outer 0 -8)) (send base :worldpos)) :world)))
    (setq l (kxr-link-create blist :joint-coord c))
    (dolist (cam (get mbs :cameras))
      (send cam :rotate pi :y)
      (send cam :rotate pi/2 :x)
      (send l :assoc cam))
    (send l :put :cameras (get mbs :cameras))
    (send l :put :base-coords base)
    l))

(defun kxr-mamoru-head-link (&key (len 20))
  (let* ((u (kxr-upper-arm len))
	 (l (kxr-bottom-arm len))
	 (s1 (kxr-servo-s3301))
	 (s2 (kxr-servo-s3301))
	 (j0 (kxr-joint-base))
	 (j1 (kxr-joint-base))
	 (j2 (kxr-joint-base))
	 (c (make-cascoords)) blist)
    (send s1 :move-named-coords "uph4" j1 "downh3" pi :z)
    (send s2 :move-named-coords "uph4" j2 "downh3" pi :z)
    (send u :move-named-coords "downh1" j0 "sideh3")
    (send l :move-named-coords "downh1" j0 "sideh1" pi :z)
    (send j1 :move-named-coords "uph3" j0 "downh4")
    (send j2 :move-named-coords "uph4" j0 "downh3")
    (send j0 :rotate pi/2 :z)
    (send j0 :rotate pi :y)
    (send j0 :rotate pi/2 :z :world)
    (send j0 :assoc c)
    (setq blist (list j0 j1 j2 u l s1 s2))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (send (car blist) :assoc c)
    (send (car blist) :locate (float-vector 0 0 (- len 3)) :world)
    (setq l (kxr-link-create blist :joint-coord c))
    (setf (get l :leye) (get s1 :upper-coord))
    (setf (get l :reye) (get s2 :upper-coord))
    l))

(defun kxr-mamoru-head-link-new (&key (len 28))
  (let* ((u (kxr-upper-arm len))
	 (l (kxr-bottom-arm len))                                ;
         (s1 (kxr-servo-s3301))
	 (s2 (kxr-servo-s3301))
	 (j0 (kxr-joint-base))
         (j1 (kxr-joint-base))
         (j2 (kxr-joint-base))
         (j3 (kxr-joint-base))
         (j4 (kxr-joint-base))
         (j5 (kxr-joint-base))
         (j6 (kxr-joint-base))
         (cs1 (kxr-cross-servo-frame-a))
         (cs2 (kxr-cross-servo-frame-a))
         (ff1 (kxr-flat-frame))
         (ff2 (kxr-flat-frame))
         (f1 (kxr-joint-frame-a))
	 (f2 (kxr-joint-frame-a))
	 (ff (stl2eus "stls/mamoru_face_front.stl" :scale 1000.0))
	 (fb (stl2eus "stls/mamoru_face_back.stl" :scale 1000.0))
	 (c (make-cascoords)) pos-bottom blist)

    (send ff :rotate -pi/2 :z :world)
    (send fb :rotate -pi/2 :z :world)
    (send ff :rotate -pi/2 :y :world)
    (send fb :rotate -pi/2 :y :world)
    (send ff :locate #f(9.5 0 30) :world)
    (send fb :locate #f(9.5 0 41) :world)

    (send u :move-named-coords "downh1" j0 "sideh3")
    (send l :move-named-coords "downh1" j0 "sideh1" pi :z)

    ;left
    (send f1 :move-named-coords "uph1" j0 "downh4" pi :y)
    (send j1 :move-named-coords "sideh3" f1 "uph3" pi :x)
    (send j1 :rotate pi/2 :x)
    (send ff1 :move-named-coords "ruup2" j1 "uph1" pi/2 :z)
    (send ff1 :translate #f(-8 0 0))
    (send j3 :move-named-coords "downh4" ff1 "rdup2")
    (send j3 :translate #f(0 0 2))
    (send j5 :move-named-coords "downh4" j3 "downh1")
    (send j5 :translate #f(0 0 -6))
    (send cs1 :move-named-coords "outh5" j5 "downh1")
    (send cs1 :translate #f(0 10.5 0))
    (send s1 :move-named-coords "downh1" cs1 "inh1" pi/2 :z)

    ;right
    (send f2 :move-named-coords "uph2" j0 "downh3" pi :x)
    (send j2 :move-named-coords "sideh3" f2 "uph3" pi :x)
    (send j2 :rotate pi/2 :x)
    (send ff2 :move-named-coords "rdup2" j2 "uph2" pi/2 :z)
    (send ff2 :translate #f(-8 0 0))
    (send j4 :move-named-coords "downh1" ff2 "ruup2")
    (send j4 :translate #f(0 0 2))
    (send j6 :move-named-coords "downh2" j4 "downh3")
    (send j6 :translate #f(0 0 -6))
    (send cs2 :move-named-coords "outh5" j6 "downh3" pi :z)
    (send cs2 :translate #f(0 10.5 0))
    (send s2 :move-named-coords "uph2" cs2 "inh1" pi/2 :-z)

    (send j0 :rotate pi/2 :z)
    (send j0 :rotate pi :y)
    (send j0 :rotate pi/2 :z :world)
    (send j0 :assoc c)
    (setq blist (list j0 j1 j2 j3 j4 j5 j6 u l ff1 ff2 f1 f2 cs1 cs2 s1 s2 ff fb))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (send (car blist) :assoc c)
    (send (car blist) :locate (float-vector 0 0 (- len 3)) :world)
    (setq l (kxr-link-create blist :joint-coord c))
    (setf (get l :leye) (get s1 :upper-coord))
    (setf (get l :reye) (get s2 :upper-coord))
    l))

(defun kxr-mamoru-reye-link ()
  (let* ((u (kxr-upper-arm28))
	 (j1 (kxr-joint-base))
	 (j2 (kxr-joint-base))
	 (jf (kxr-joint-frame-a))
	 (jb (kxr-joint-base))
	 (jfb (kxr-joint-frame-b-a))
	 (b (m5stickv-bodyset))
	 (c (make-cascoords)) pos-bottom blist l)
    (send j1 :move-named-coords "sideh3" u "downh1")
    (send jfb :move-named-coords "uph3" j1 "sideh2" pi :z)
    (send j2 :move-named-coords "downh1" jfb "uph1")
    (send jf :move-named-coords "uph3" j2 "sideh2")
    (send b :move-named-coords "baseh0" jf "uph4" pi :y)
    (send b :rotate pi/2 :z)
    (send b :translate #f(-6 7 2) :world)
    (send u :rotate pi/2 :-y :world)
    (send u :rotate pi/2 :-z :world)
    (setq blist (append (list u j1 jfb j2 jf) (send b :bodies)))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (send (car blist) :assoc c)
    (send (car blist) :locate (float-vector 0 (- 3 28) -2) :world)
    (setq l (kxr-link-create blist :joint-coord c))
    (dolist (cam (get b :cameras))
      (send cam :rotate pi :y)
      (send cam :rotate pi/2 :x)
      (send l :assoc cam))
    (send l :put :cameras (get b :cameras))
    l))

(defun kxr-mamoru-reye-link-new (&key (jetson t))
  (let* ((u (kxr-upper-arm38))
         (ub (kxr-bottom-arm38))
	 (j1 (kxr-joint-base))
	 (j2 (kxr-joint-base))
         (j3 (kxr-joint-base))
         (j4 (kxr-joint-base))
         (j5 (kxr-joint-base))
	 (jf (kxr-joint-frame-a))
	 (jb (kxr-joint-base))
	 (b (if jetson (jetson-camera-bodyset) (m5stickv-bodyset)))
	 (s (stl2eus "stls/mamoru_eye_right.stl" :scale 1000.0))
	 (c (make-cascoords)) pos-bottom blist l)
    (send s :rotate -pi/2 :y :world)
    (send s :rotate pi/2 :x :world)
    (send s :locate #f(0 -13.5 -28.5) :world)
    #|
    (send s :rotate -pi/2 :y :world)
    (send s :rotate -pi/2 :x :world)
    (send s :locate #f(0 -14 -27) :world)
    ;;
    (send s :rotate -pi/2 :y :world)
    (send s :locate #f(0 -2 -39) :world)
    ;;
    (send s :rotate -pi/2 :y :world)
    (send s :rotate pi :x :world)
    (send s :locate #f(0 0 -50) :world)
    |#

    (send j1 :move-named-coords "sideh1" u "downh1" pi :z)
    (send ub :move-named-coords "downh1" j1 "sideh3")
    (send j2 :move-named-coords "downh3" j1 "downh1" pi :x)
    (send j3 :move-named-coords "downh3" j2 "downh1" pi :x)
    (send j4 :move-named-coords "downh3" j3 "uph4")
    (send j5 :move-named-coords "downh4" j4 "uph4")
    (send jf :move-named-coords "uph3" j5 "sideh4" pi :z)
    (cond
      (jetson
       ;;(send b :locate (send jf :worldpos))
       (send b :locate (v+ #f(60 14 0) (send s :worldpos)) :world)
       (send s :assoc b) 
       )
      (t
       (send b :move-named-coords "baseh0" jf "uph4")
       (send b :rotate pi/2 :z)
       (send b :rotate pi :x)
       (send b :translate #f(6 -5 5) :world)))
    (send u :rotate pi/2 :y :world)
    (setq blist (append (list u ub j1 j2 j3 j4 j5 jf s) (send b :bodies)))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (send (car blist) :assoc c)
    (send (car blist) :locate (float-vector -35 0 5) :world)
    (setq l (kxr-link-create blist :joint-coord c))
    (dolist (cam (get b :cameras))
      (send cam :rotate pi :y)
      (send cam :rotate pi/2 :x)
      (send l :assoc cam))
    (send l :put :cameras (get b :cameras))
    l))

(defun kxr-mamoru-leye-link ()
  (let* ((u (kxr-upper-arm28))
	 (j1 (kxr-joint-base))
	 (j2 (kxr-joint-base))
	 (jf (kxr-joint-frame-a))
	 (jb (kxr-joint-base))
	 (jfb (kxr-joint-frame-b-b))
	 (b (m5stickv-bodyset))
	 (c (make-cascoords)) blist l)
    (send j1 :move-named-coords "sideh3" u "downh1")
    (send jfb :move-named-coords "uph3" j1 "sideh4")
    (send j2 :move-named-coords "downh1" jfb "uph1")
    (send j2 :translate #f(0 0 2))
    (send jf :move-named-coords "uph3" j2 "sideh2")
    (send b :move-named-coords "baseh0" jf "uph4")
    (send b :rotate pi/2 :z)
    (send b :rotate pi :x)
    (send b :translate #f(-6 -7 2) :world)
    (send u :rotate pi/2 :-y :world)
    (send u :rotate pi/2 :z :world)
    (setq blist (append (list u j1 jfb j2 jf) (send b :bodies)))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (send (car blist) :assoc c)
    (send (car blist) :locate (float-vector 0 (- 28 3) -2) :world)
    (setq l (kxr-link-create blist :joint-coord c))
    (dolist (cam (get b :cameras))
      (send cam :rotate pi :y)
      (send cam :rotate pi/2 :x)
      (send l :assoc cam))
    (send l :put :cameras (get b :cameras))
    l))

(defun kxr-mamoru-leye-link-new (&key (jetson t))
  (let* ((u (kxr-upper-arm38))
         (ub (kxr-bottom-arm38))
	 (j1 (kxr-joint-base))
	 (j2 (kxr-joint-base))
         (j3 (kxr-joint-base))
         (j4 (kxr-joint-base))
         (j5 (kxr-joint-base))
	 (jf (kxr-joint-frame-a))
	 (jb (kxr-joint-base))
	 (b (if jetson (jetson-camera-bodyset) (m5stickv-bodyset)))
	 (s (stl2eus "stls/mamoru_eye_left.stl" :scale 1000.0))
	 (c (make-cascoords)) pos-bottom blist l)

    (send s :rotate -pi/2 :y :world)
    (send s :rotate pi/2 :x :world)
    (send s :locate #f(0 13.5 -28.5) :world)
    #|
    (send s :rotate -pi/2 :y :world)
    (send s :rotate -pi/2 :x :world)
    (send s :locate #f(0 14 -27) :world)

    (send s :rotate -pi/2 :y :world)
    (send s :rotate pi :x :world)
    (send s :locate #f(0 2 -39) :world)
    |#
    (send j1 :move-named-coords "sideh1" u "downh1" pi :z)
    (send ub :move-named-coords "downh1" j1 "sideh3")
    (send j2 :move-named-coords "downh3" j1 "downh1" pi :x)
    (send j3 :move-named-coords "downh3" j2 "downh1" pi :x)
    (send j4 :move-named-coords "downh4" j3 "uph3")
    (send j5 :move-named-coords "downh4" j4 "uph4")
    (send jf :move-named-coords "uph3" j5 "sideh2")
    (cond
      (jetson
       (send b :locate (v+ #f(60 -14 0) (send s :worldpos)) :world)
       (send s :assoc b) 
       )
      (t
       (send b :move-named-coords "baseh0" jf "uph4" pi :y)
       (send b :rotate pi/2 :z)
       (send b :translate #f(6 5 5) :world)))
    (send u :rotate pi/2 :y :world)
    (setq blist (append (list u ub j1 j2 j3 j4 j5 jf s) (send b :bodies)))
    (dolist (b (cdr blist)) (send (car blist) :assoc b))
    (send (car blist) :assoc c)
    (send (car blist) :locate (float-vector -35 0 5) :world)
    (setq l (kxr-link-create blist :joint-coord c))
    (dolist (cam (get b :cameras))
      (send cam :rotate pi :y)
      (send cam :rotate pi/2 :x)
      (send l :assoc cam))
    (send l :put :cameras (get b :cameras))
    l))

(defun kxr-mamoru-marm-shell-link (&key (l/r :lmarm))
  (let* ((s (stl2eus "stls/mamoru_arm.stl" :scale 1000.0))
	 blist l)
    (cond
      ((kxr-left-limb? l/r)
       (send s :rotate -pi/2 :z :world)
       (send s :locate #f(2 30 0) :world))
      (t
       (send s :rotate pi/2 :z :world)
       (send s :locate #f(2 -30 0) :world)))
    (setq blist (list s))
    (setq l (kxr-link-create blist))
    l))

(defun kxr-mamoru-marm-shell-link-2022 (&key (l/r :lmarm))
  (let* ((s (stl2eus "stls/mamoru_arm.stl" :scale 1000.0))
	 blist l)
    (cond
      ((kxr-left-limb? l/r)
       (send s :rotate -pi/2 :z :world)
       (send s :rotate -pi/2 :y :world)
       (send s :locate #f(2 30 0) :world))
      (t
       (send s :rotate pi/2 :z :world)
       (send s :rotate pi/2 :y :world)
       (send s :locate #f(2 -30 0) :world)))
    (setq blist (list s))
    (setq l (kxr-link-create blist))
    l))

(defun kxr-mamoru-marm-link (&key (l/r :larm) base-b sensor)
  (let* ((b1 (if base-b (kxr-joint-base-b-servo-bodyset (eq l/r :larm) :sensor sensor)
		 (kxr-joint-base-a-servo-bodyset)))
	 l blist
	 (c (get b1 :joint-coord)))
    (if (kxr-right-limb? l/r) (send b1 :rotate pi :z :world))
    (send b1 :rotate pi/2 :z :world)
    (send b1 :rotate pi :y :world)
    ;;(send b1 :locate #f(0 0 3))
    (if (kxr-right-limb? l/r) (send b1 :rotate pi/2 :-x :world)
      (send b1 :rotate pi/2 :x :world))
    (if (kxr-right-limb? l/r) (send b1 :locate #f(0 -3 0) :world)
      (send b1 :locate #f(0 3 0) :world))
    (setq blist (send b1 :bodies))
    (kxr-link-create blist :joint-coord c :upper-coord (get b1 :upper-coord))))

(defun kxr-mamoru-marm-link-2022 (&key (l/r :larm) base-b sensor)
  (let* ((b1 (if base-b (kxr-joint-base-b-servo-bodyset (eq l/r :larm) :sensor sensor)
		 (kxr-joint-base-a-servo-bodyset)))
	 l blist
	 (c (get b1 :joint-coord)))
    (if (kxr-right-limb? l/r) (send b1 :rotate pi :z :world))
    ;(send b1 :rotate pi/2 :z :world)
    (send b1 :rotate pi :y :world)
    (if (kxr-right-limb? l/r) (send b1 :rotate pi/2 :-x :world)
      (send b1 :rotate pi/2 :x :world))
    (if (kxr-right-limb? l/r) (send b1 :locate #f(0 -3 0) :world)
      (send b1 :locate #f(0 3 0) :world))
    (setq blist (send b1 :bodies))
    (kxr-link-create blist :joint-coord c :upper-coord (get b1 :upper-coord))))


(defun kxr-tsm-body-link-old (&key head torso base-b
				   (x 200) (y 250) (z 200) (r 80) (segments 10)
				   shoulder-front shoulder-center
				   servo-stand wheel-base-a wheel-base-wide
				   )
  (let* ((b0
	  (kxr-l4mw-body-link
	   :shoulder-servo t
	   :shoulder-front shoulder-front :shoulder-center shoulder-center
	   :backpack nil :offset #f(7.25 0 0)
	   :servo-stand servo-stand :lidar nil
	   :battery-stand nil :base-a wheel-base-a :base-wide wheel-base-wide))
	 (display (kxr-d405-aux)) ;; (make-cube 20 76 52))
	 (blist (send b0 :bodies))
	 ;;(s (stl2eus "stls/kxrmamoru2_down_for_eusmodel_low_meshlab2.stl" :scale 1.0))
	 (s (make-fillet-cube x y z r :segments segments))
	 (nf (stl2eus "stls/mamoru_neck_front.stl" :scale 1000.0))
	 (nb (stl2eus "stls/mamoru_neck_backlong.stl" :scale 1000.0))
	 l)
    (send nf :rotate pi/2 :z)
    (send nb :rotate pi/2 :z)
    (send nf :locate #f(0 0 25) :world)
    (send nb :locate #f(0 0 25) :world)
    (send s :set-color :white)
    (gl::transparent s 0.7)
    (send s :translate #f(0 0 30) :world)
    ;;(send s :rotate pi/2 :z)
    ;;(send s :locate #f(-1 0 -112) :world)
    ;;    (send s :rotate pi/2 :x)
    ;;    (send s :locate #f(-148 161 -222.5) :world)
    (send display :locate (float-vector (- (/ x 2) 12) 0 (- (/ z 2) 20)) :world)
    (setq blist (append blist (list s nf nb) (send display :bodies)))
    (setq l (kxr-link-create blist))
    (setf (get l :neck) (get b0 :neck))
    (setf (get l :larm) (get b0 :larm))
    (setf (get l :rarm) (get b0 :rarm))
    (setf (get l :lmarm) (get b0 :lmarm))
    (setf (get l :rmarm) (get b0 :rmarm))
    (setf (get l :lleg) (get b0 :lleg))
    (setf (get l :rleg) (get b0 :rleg))
    (dolist (p (list :neck :torso :larm :rarm :lmarm :rmarm :lleg :rleg))
      (if (get l p) (send l :assoc (get l p)))
      )
    l))

(defun kashiwagi-head-link ()
  (let ((s (stl2eus "stls/kashiwagi_head.STL" :scale 1.0))
	l (c (make-cascoords)))
    (send s :rotate pi/2 :x :world)
    (send s :rotate pi/2 :z :world)
    (send s :worldcoords)
    (send s :translate (v- #f(0 0 7) (send s :centroid)) :world)
    (gl::transparent s 0.7)    
    (setq l (kxr-link-create (list s) :joint-coord c ))
    l)
  )

(defun kashiwagi-hand-link (&key (l/r :larm))
  (let (hl l (c (make-cascoords)))
    (cond
     ((eq l/r :larm)
      (setq hl (stl2eus "stls/kashiwagi_left_hand.STL" :scale 1.0))
      (send hl :rotate pi/2 :y :world)
      (send hl :rotate (deg2rad 30) :x :world)
      (send hl :worldcoords)
      (send hl :translate (v- #f(0 30 -30) (send hl :centroid)) :world)
      )
     (t
      (setq hl (stl2eus "stls/kashiwagi_right_hand.STL" :scale 1.0))
      (send hl :rotate pi :x :world)
      (send hl :rotate pi/2 :y :world)
      (send hl :rotate (deg2rad -30) :x :world)
      (send hl :worldcoords)
      (send hl :translate (v- #f(0 -30 -30) (send hl :centroid)) :world)
      ))
    ;;(send hl :set-color #f(0.800000 0.956863 0.721569))
    ;;(send hl :set-color (scale 1.5 #f( 0.400000 0.478431 0.360784)))
    (send hl :set-color
	  (vector-mean '(#f(0.800000 0.956863 0.721569) #f(0.400000 0.478431 0.360784))))
    (setq l (kxr-link-create (list hl) :joint-coord c))
    l)
  )

(defun kxr-tsm-body-link (&key head torso base-b
			       (x 200) (y 250) (z 200) (r 80) (segments 10)
			       shoulder-front shoulder-center
			       servo-stand wheel-base-a wheel-base-wide
			       )
  (let* ((b0
	  (kxr-l4mw-body-link
	   :shoulder-servo t
	   :shoulder-front shoulder-front :shoulder-center shoulder-center
	   :backpack nil :offset #f(7.25 0 0)
	   :servo-stand servo-stand :lidar nil
	   :battery-stand nil :base-a wheel-base-a :base-wide wheel-base-wide))
	 (display (kxr-d405-aux)) ;; (make-cube 20 76 52))
	 blist
	 ;;(s (stl2eus "stls/kxrmamoru2_down_for_eusmodel_low_meshlab2.stl" :scale 1.0))
	 ;;(s (make-fillet-cube x y z r :segments segments))
	 (s (stl2eus "stls/kashiwagi_body.STL" :scale 1.0))
	 l)
    (setq blist (send b0 :bodies))
    (send s :rotate pi/2 :x :world)
    (send s :rotate pi/2 :z :world)
    (send s :worldcoords)
    (send s :translate (v- #f(0 0 40) (send s :centroid)) :world)
    (send s :set-color :white)
    (gl::transparent s 0.7)
    ;;
    (send display :locate (float-vector (- (/ x 2) 12) 0 (- (/ z 2) 20)) :world)
    (setq blist (append blist (list s ) (send display :bodies)))
    (setq l (kxr-link-create blist))
    (setf (get l :neck) (get b0 :neck))
    (setf (get l :larm) (get b0 :larm))
    (setf (get l :rarm) (get b0 :rarm))
    (setf (get l :lmarm) (get b0 :lmarm))
    (setf (get l :rmarm) (get b0 :rmarm))
    (setf (get l :lleg) (get b0 :lleg))
    (setf (get l :rleg) (get b0 :rleg))
    (dolist (p (list :neck :torso :larm :rarm :lmarm :rmarm :lleg :rleg))
      (if (get l p) (send l :assoc (get l p)))
      )
    l))

(defun kxr-arm-base-link (&key (from :-z) (to :x) (len 28) (l/r :lleg) pos apply-list sensor (horn t) sensor-flip)
  (let ((b0 (kxr-arm-base-bodyset len :sensor sensor :horn horn :flip sensor-flip))
	blist c)
    (case
	from
      (:-z (send b0 :rotate pi :x :world))
      (:y (send b0 :rotate pi/2 :-x :world)))
    (case
	to
      (:z (send b0 :rotate pi/2 :-y :world))
      (:y (send b0 :rotate pi/2 :z :world))
      (:-y (send b0 :rotate pi/2 :-z :world)))
    
    (setq c (get b0 :joint-coord))
    (send b0 :assoc c)
    (cond
     ((kxr-right-limb? l/r)
      (unless (memq from '(:z :-z))
	(send b0 :rotate pi :x :world))
      (if pos
	  (send b0 :locate (v- pos) :world)))
     (pos (send b0 :locate pos :world)))
    (dolist (al apply-list) (send* b0 al))
    (setq blist (send b0 :bodies))
    (kxr-link-create blist :joint-coord c)))

(defun kxr-shoulder-cross-r-link (&key (l/r :larm) double (high 38) (len 26))
  (let ((b0 (kxr-arm-base-bodyset high))
	(b1 (kxr-arm-base-bodyset len))
	blist (c (make-cascoords)))
    (send b1 :rotate pi/2 :z :world)
    (send c :locate (float-vector 0 0 len) :world)
    (send b1 :assoc c)
    (send b1 :rotate pi :y :world)
    (send b0 :assoc b1)
    (send b0 :locate (float-vector 0 0 (- high)) :world)
    (cond
      (double (setq blist (append (send b0 :bodies) (send b1 :bodies))))
      (t (send b1 :translate #f(0 0 6) :world)
	 (setq blist (append (cdr (send b0 :bodies)) (send b1 :bodies)))))
    (kxr-link-create blist :joint-coord c)))

(defun kxr-wrist-cross-r-link (&key (len 28) (l/r :larm))
  (let ((b0 (kxr-arm-base-bodyset len))
	(b1 (kxr-servo-bottom-supporter-bodyset :align t))
	blist c)
    (send b0 :assoc b1)
    (send b0 :locate (float-vector 0 0 (- len)) :world)
    (setq c (get b1 :joint-coord))
    (setq blist (append (send b0 :bodies) (send b1 :bodies)))
    (kxr-link-create blist :joint-coord c)))

(defun kxr-wrist-p-y-link (&key (len 20) (l/r :larm))
  (let ((b0 (kxr-arm-base-bodyset len))
	(b1 (kxr-servo-bottom-supporter-bodyset :align t))
	blist c)
    (send b0 :rotate pi/2 :z)
    (send b0 :assoc b1)
    (send b0 :locate (float-vector 0 0 (- len)) :world)
    (setq c (get b1 :joint-coord))
    (setq blist (append (send b0 :bodies) (send b1 :bodies)))
    (kxr-link-create blist :joint-coord c)))

(defun kxr-neck-y-link (&key (l/r :larm))
  (let ((g (kxr-servo-bottom-supporter-bodyset :align t :flip-axis :y)))
    (kxr-link-create (send g :bodies) :joint-coord (get g :joint-coord))))

(defun kxr-wrist-y-link (&key (l/r :larm))
  (let ((g (kxr-servo-bottom-supporter-bodyset :align t)))
    (kxr-link-create (send g :bodies) :joint-coord (get g :joint-coord))))

(defun kxr-wrist-gripper-links (&key (l/r :larm) base-b gripper-axis wrist-sensor ((:base-link l)) horn
				     attachment
				     magjoint gripper-straight gripper-inner passive-wheel gripper-sensor flip)
  " gripper-sensor : ((:finger1 . :rev-a) (:finger2 . :rev-b))| t | :rev-a | :rev-b|
    (:finger1 :rev-a :flip) (:finger2 :rev-c :flip)"
  (let ((g (kxr-gripper-servo-bodyset :l/r l/r :straight gripper-straight
				      :inner gripper-inner :base-b base-b :magjoint magjoint
				      :sensor wrist-sensor :horn horn))
	l0 l01 l1 l2 ls blist)
    (setq gripper-sensor (gripper-sensor-pattern gripper-sensor l/r))
    (cond
      ((kxr-left-limb? l/r) ;; finger1 : outside, finger2 : inside
       ;;(eq-memq gripper-sensor (list t l/r :finger2))))
       ;;(and (not (assoc :finger2 gripper-sensor)) gripper-sensor)
       (setq l1 (kxr-finger-bodyset :sensor (assocdr :finger2 gripper-sensor)
				    :attachment (when attachment (if (eq attachment :up) :larm :rarm))
				    :sensor-z-rotation -pi/2)) ;; inside
       (setq l0 (kxr-finger-bodyset :sensor (assocdr :finger1 gripper-sensor)
				    :attachment (when attachment (if (eq attachment :up) :rarm :larm))
				    :with-wheel (eq-memq :gripper passive-wheel)
				    :sensor-z-rotation -pi/2  ;; outside
				    ))
       (when (eq-memq :gripper passive-wheel)
	 (setq l2 (kxr-passive-wheel-link :l/r :larm))
	 (send l0 :assoc l2)))
      (t
       (setq l1 (kxr-finger-bodyset :sensor (assocdr :finger1 gripper-sensor)
				    :attachment (when attachment (if (eq attachment :up) :larm :rarm))
				    :sensor-z-rotation -pi/2 ;; outside
				    :with-wheel (eq-memq :gripper passive-wheel)))
       (when (eq-memq :gripper passive-wheel)
	 (setq l2 (kxr-passive-wheel-link :l/r :larm))
	 (send l1 :assoc l2))
       (setq l0 (kxr-finger-bodyset :sensor (assocdr :finger2 gripper-sensor)
				    :attachment (when attachment (if (eq attachment :up) :rarm :larm))
				    :sensor-z-rotation -pi/2
				    ))))
    (send l1 :rotate pi :z :world)
    ;; l0 : right, l1 : left
    (cond
      (gripper-straight
       (cond
	 ((kxr-right-limb? l/r)
	  (setq l01 l1)
	  (setq l1 l0)
	  (setq l0 l01)
	  (send l1 :translate
		(float-vector 0 (+ (sqrt (+ (* 21 21) (* 10.5 10.5)))) 0) :world)
	  (send l0 :assoc l1)	  
	  ;;(send l0 :rotate (atan2 10.5 21.0) :x)
	  )
	 (t (send l1 :translate
		  (float-vector 0 (- (sqrt (+ (* 21 21) (* 10.5 10.5)))) 0) :world)
	    (send l0 :assoc l1)
	    ;;(send l0 :rotate (atan2 10.5 21.0) :x)
	    )))
      (gripper-inner
       (cond
	 ((kxr-left-limb? l/r)
	  (setq l01 l1)
	  (setq l1 l0)
	  (setq l0 l01)
	  (send l1 :translate
		(float-vector 0 (+ (sqrt (+ (* 21 21) (* 10.5 10.5)))) 0) :world)
	  (send l0 :assoc l1)	  
	  (send l0 :rotate (atan2 10.5 21.0) :x)
	  )
	 (t (send l1 :translate
		  (float-vector 0 (- (sqrt (+ (* 21 21) (* 10.5 10.5)))) 0) :world)
	    (send l0 :assoc l1)
	    (send l0 :rotate (atan2 10.5 21.0) :x)
	    )))
      (t
       (cond
	 ((kxr-right-limb? l/r)
	  (setq l01 l1)
	  (setq l1 l0)
	  (setq l0 l01)
	  (send l1 :translate
		(float-vector 0 (+ (sqrt (+ (* 21 21) (* 10.5 10.5)))) 0) :world)
	  (send l0 :assoc l1)	  
	  (send l0 :rotate (atan2 10.5 21.0) :x)
	  )
	 (t (send l1 :translate
		  (float-vector 0 (- (sqrt (+ (* 21 21) (* 10.5 10.5)))) 0) :world)
	    (send l0 :assoc l1)
	    (send l0 :rotate (atan2 10.5 21.0) :x)
	    ))))
    (send l0 :locate (send (get g :joint-coord) :worldpos) :world)
    (send g :assoc l0)
;;    (if (eq-memq gripper-inner (list t :larm)) (send g :rotate pi :z :world))
;;    (if (kxr-right-limb? l/r)  (send g :rotate pi :z :world))
    (when
	(eq-memq :p gripper-axis)
      (if (kxr-right-limb? l/r)
	  (send g :rotate pi/2 :z :world)
	(send g :rotate pi/2 :-z :world)))
    (when (eq-memq :y gripper-axis)
      (send g :rotate -pi/2 :y :world))
    (setq blist (send g :bodies))
    (when l
      (send l :locate #f(0 0 0) :world)
      (send g :locate (send (get l :joint-coord) :worldpos) :world)
      (send l :assoc g)
      (setq blist (append (send l :bodies) blist)))
    ;;
    (setq l (kxr-link-create blist :joint-coord (or (get g :joint-coord) (make-cascoords))))
    (setq l0 (kxr-link-create l0 :coords (make-cascoords :coords (send l0 :worldcoords))))
    (setq l1 (kxr-link-create l1 :coords (make-cascoords :coords (send l1 :worldcoords))))
    (setf (get l :end-coords)
	  (make-cascoords
	   :rot (rotate-matrix
		 (rotation-matrix (if (eq gripper-axis :y) 0 pi/2) :y)
		 (if gripper-straight 0
		     (if gripper-inner
			 (atan2 (if (kxr-left-limb? l/r) -10.5 10.5) 21.0)
			 (atan2 (if (kxr-left-limb? l/r) 10.5 -10.5) 21.0)))
		 :z)
	   :pos (vector-mean (list (send (get l0 :joint-coord) :worldpos)
				   (send (get l1 :joint-coord) :worldpos)))
	   :name (format nil "~A-end-coords" l/r)))
    (send l :assoc (get l :end-coords))
    (send l :assoc l0)
    (send l :assoc l1)
    (if l2
	(list l l0 l1 l2)
	(list l l0 l1))))

(defun kxr-joint-base-link (&key (l/r :larm) sensor apply-list horn)
  (let* ((b (kxr-sensor-joint-base sensor))
	 h (c (get b :joint-coord)) bs blist)
    (send b :assoc c)
    (send b :bottom-to-z)
    (push b blist)
    (when horn
      (setq h (kxr-horn))
      (send h :rotate pi :x :world)
      (send h :assoc b)
      (send h :translate #f(0 0 3) :world)
      (push h blist))
    (setq bs (kxr-bodyset-create blist c))
    (dolist (al apply-list) (send* bs al))
    (kxr-link-create bs :joint-coord c)))

(defun kxr-wrist-link (&key (l/r :larm) (len 20) (axis :x) sensor add-joint-base)
  (let* ((b0 (kxr-arm-base-bodyset len :sensor sensor :add-joint-base add-joint-base))
	 (j0 (get b0 :joint-coord))
	 (blist (send b0 :bodies))
	 l (c (make-cascoords)))
    (case axis
      (:p 
       (if (eq l/r :larm)  (send b0 :rotate pi/2 :-z :world) (send b0 :rotate pi/2 :z :world)))
      (:-p
       (if (eq l/r :larm)  (send b0 :rotate pi/2 :z :world) (send b0 :rotate pi/2 :-z :world))))
    (send b0 :assoc c)
    (send b0 :locate (float-vector 0 0 (- (elt (send j0 :pos) 2))))
    (kxr-link-create blist :joint-coord c)))

(defun kxr-wrist-r-gripper-link (&key (l/r :larm) (len 20) (axis :x) inner sensor)
  (let ((g (kxr-gripper-servo-bodyset :l/r l/r :inner inner :sensor sensor))
	(b0 (kxr-arm-base-bodyset len))
	blist l c)
    (send b0 :assoc g)
    (case axis
      ((:p :z)
       (if (kxr-left-limb? l/r)  (send b0 :rotate pi/2 :-z :world) (send b0 :rotate pi/2 :z :world)))
      ((:-p :-z)
       (if (kxr-left-limb? l/r)  (send b0 :rotate pi/2 :z :world) (send b0 :rotate pi/2 :-z :world)))
      ((:r :x)
       (if (kxr-left-limb? l/r)  (send b0 :rotate pi/2 :x :world) (send b0 :rotate pi/2 :-x :world)))
      ((:-r :-x)
       (if (kxr-left-limb? l/r)  (send b0 :rotate pi/2 :-x :world) (send b0 :rotate pi/2 :x :world)))
      )
    (send b0 :locate (float-vector 0 0 (- len)))
    (setq c (get g :joint-coord))
    (setq blist (append (send b0 :bodies) (send g :bodies)))
    (kxr-link-create blist :joint-coord c)))

(defun kxr-wheel-knee-lp-link (&key (l/r :larm) (len-u 38) (len-d 38) (wheel-offset 8) sensor)
  (let ((b0 (kxr-arm-base-bodyset len-u))
	(b00 (kxr-joint-frame-base-a-bodyset :sensor sensor))
	(b1 (kxr-angle-bracket-arms-bodyset))
	(s (kxr-servo-s3301))
	blist l)
    (send b1 :rotate pi/2 :-z :world)
    (send b1 :locate (float-vector (- len-d 26 2.5) 0 15) :world)
    (if (eq l/r :rleg) (send s :rotate pi/2 :x :world) (send s :rotate pi/2 :-x :world))
    (send s :assoc b1)
    (send s :rotate pi :y :world)
    (send s :locate (float-vector 10.5 0 (+ -9 -15)) :world)
    (send b00 :rotate pi :x)
    (send b00 :locate (float-vector 0 0 -3.1) :world)
    (send b0 :assoc b00)
    (send b0 :rotate pi/2 :z :world)
    (send b0 :assoc s)
    (send b0 :locate (float-vector 0 0 (- len-u)))
    (setq blist (append (send b0 :bodies) (send s :bodies) (send b1 :bodies) (send b00 :bodies)))
    (setq l (kxr-link-create blist :joint-coord (get b1 :joint-coord) :upper-coord (get s :upper-coord)))
    (send l :assoc (car blist))
    (send l :rotate (/ pi 4) :-y :world)
    (send (get l :upper-coord) :locate (float-vector 0 0 wheel-offset))
    l))

(defun kxr-wheel-knee-p-link (&key (l/r :larm) (len-u 38) (len-d 38) (wheel-offset 8))
  (let ((b0 (kxr-arm-base-bodyset len-u))
	(b1 (kxr-arm-base-bodyset len-d))
	(s (kxr-servo-s3301))
	blist l (c (make-cascoords)))
    (send b1 :rotate pi/2 :z :world)
    (send b1 :rotate pi/2 :y :world)
    (send b1 :locate (float-vector (- len-d) 0 0) :world)
    (send b1 :assoc c)
    (send b1 :locate (float-vector 26 0 0) :world)
    (if (kxr-right-limb? l/r) (send s :rotate pi/2 :x :world) (send s :rotate pi/2 :-x :world))
    (send s :assoc b1)
    (send s :rotate pi :y :world)
    (send s :locate #f(10.5 0 -15) :world)
    (send b0 :rotate pi/2 :z :world)
    (send b0 :assoc s)
    (send b0 :locate (float-vector 0 0 (- len-u)))
    (setq blist (append (send b0 :bodies) (send s :bodies) (send b1 :bodies)))
    (setq l (kxr-link-create blist :joint-coord c :upper-coord (get s :upper-coord)))
    (send l :assoc (car blist))
    (send l :rotate (/ pi 4) :-y :world)
    (send (get l :upper-coord) :locate (float-vector 0 0 wheel-offset))
    l))

(defun kxr-knee-wheel-link (&key (l/r :larm) (wheel-offset 6) base-b sensor)
  (let* ((b0 ;;(kxr-servo-frame-base-a-bodyset))
	  (if base-b (kxr-joint-base-b-servo-bodyset nil :sensor sensor)
	      (kxr-joint-base-a-servo-bodyset :sensor sensor)))
	 (b00 (kxr-joint-frame-base-a-bodyset))
	 ;;(b1 (kxr-arm-base-bodyset 38))
	 (b1 (kxr-angle-bracket-arms-bodyset))
	 (s (kxr-servo-s3301))
	 blist l (c (get b1 :joint-coord)))
    (send b1 :rotate pi/2 :-z :world)
    (send b1 :locate (float-vector 10.5 0 15) :world)
    (if (eq l/r :rleg) (send s :rotate pi/2 :x :world) (send s :rotate pi/2 :-x :world))
    (send s :assoc b1)
    (send s :rotate pi :y :world)
    (send s :locate #f(10.5 0 -18) :world)
    (send b00 :rotate pi :x)
    (send b00 :rotate pi/2 :z :world)
    (send b00 :locate #f(0 0 -6.1) :world)
    (send b0 :assoc b00)
    (send s :translate #f(0 0 -6) :world)
    (send b00 :assoc s)
    (if base-b
	(send b0 :translate (float-vector 0 0 (- (+ 10.5 9))) :world)
	(send b0 :translate (float-vector 0 0 (- (+ 21 9))) :world))
    (setq blist (append (send b0 :bodies) (send b00 :bodies) (send s :bodies) (send b1 :bodies)))
    (setq l (kxr-link-create blist :joint-coord c :upper-coord (get s :upper-coord)))
    (send l :assoc (car blist))
    (send l :rotate (/ pi 4) :-y :world)
    (send (get l :upper-coord) :locate (float-vector 0 0 wheel-offset))
    l))

(defun kxr-wrist-p-gripper-link (&key (l/r :larm) (len 20)) ;; sensor)
  (let ((g (kxr-gripper-servo-bodyset :l/r l/r))
	(b0 (kxr-arm-base-bodyset len))
	blist c)
    (send b0 :rotate pi/2 :z :world)
    (send b0 :assoc g)
    (send b0 :locate (float-vector 0 0 (- len)))
    (setq c (get g :joint-coord))
    (setq blist (append (send b0 :bodies) (send g :bodies)))
    (kxr-link-create blist :joint-coord c)))

(defun kxr-shoulder-r-link (&key (l/r :larm) (len 26) frontal)
  (let ((b0 (kxr-servo-s3301))
	(b1f (kxr-joint-frame-a))
	(b1b (kxr-joint-frame-a))
	(b2 (kxr-arm-base-bodyset len))
	blist l (c (make-cascoords)))
    (send b0 :rotate pi/2 :y)
    (send b1f :rotate pi/2 :x)
    (send b1f :locate #f(13 0 -30) :world)
    (send b1b :rotate pi/2 :x)
    (send b1b :rotate pi :z :world)
    (send b1b :locate #f(-13 0 -30) :world)
    (send b2 :rotate pi/2 :z)
    (send b2 :rotate pi :y :world)
    (send b2 :locate #f(0 0 -27) :world)
    (send c :locate (float-vector 0 0 (- (+ 21 9 (- len 3)))))
    (send b0 :assoc c)
    (setq blist (append (list b0 b1f b1b) (send b2 :bodies)))
    (when frontal
      (dolist (b (cdr blist)) (send b0 :assoc b))
      (send b0 :rotate -pi/2 :y :world)
      (send b0 :worldcoords))
    (kxr-link-create blist :joint-coord c)))

(defun kxr-servo-wrist-y-link (&key (axis :y) (l/r :larm) y-rotate)
  (let ((b0 (kxr-servo-frame-base-a-bodyset))
	(b1 (kxr-servo-bottom-supporter-bodyset :align t))
	blist)
    (if (memq axis '(:x :-x)) (send b0 :rotate pi/2 :z :world))
    (cond
     (y-rotate
      (if (kxr-left-limb? l/r) (send b1 :rotate -pi/2 :z)
	(send b1 :rotate pi/2 :z))
      (send b1 :locate (send (get b0 :joint-coord) :worldpos) :world))
     (t 
      (send b1 :locate (send (get b0 :joint-coord) :worldpos) :world)))
    (send b0 :assoc b1)
    (setq blist (append (send b0 :bodies) (send b1 :bodies)))
    (kxr-link-create blist :joint-coord (get b1 :joint-coord))))

(defun kxr-wrist-y-servo-link (&key (axis :y) (l/r :larm) y-rotate)
  (let ((b1 (kxr-servo-bottom-supporter-bodyset :align t)))
    (when
	y-rotate
      (if (kxr-left-limb? l/r) (send b1 :rotate -pi/2 :z)
	  (send b1 :rotate pi/2 :z)))
    (kxr-link-create (send b1 :bodies) :joint-coord (get b1 :joint-coord))))

(defun kxr-elbow-p-link (&key (l/r :larm) sensor)
  (kxr-link-create (kxr-servo-frame-base-a-bodyset :sensor sensor :sensor-z-rotation -pi/2)))
		   
(defun kxr-wrist-r-servo-link (&key (axis :x) (l/r :larm) sensor flip horn)
  (let ((b1 (kxr-joint-base-a-servo-bodyset :sensor sensor))
	blist)
    (case axis
      (:p (send b1 :rotate pi/2 :z :world))
      (:-p (send b1 :rotate pi/2 :-z :world)))
    (send b1 :rotate (if flip -pi/2 pi/2) :z :world)
    (send b1 :rotate pi :y :world)
    (send b1 :locate #f(0 0 3))
    (setq blist (send b1 :bodies))
    (kxr-link-create blist :joint-coord (get b1 :joint-coord))))

(defun kxr-y-wrist-r-link (&key (l/r :larm) base-b sensor)
  (let* ((b1 (if base-b (kxr-joint-base-b-servo-bodyset (eq l/r :larm) :sensor sensor)
		 (kxr-joint-base-a-servo-bodyset :sensor sensor)))
	 l blist
	 (c (get b1 :joint-coord)))
    (if (kxr-right-limb? l/r) (send b1 :rotate pi :z :world))
    (send b1 :rotate pi/2 :z :world)
    (send b1 :rotate pi :y :world)
    (send b1 :locate #f(0 0 3))
    (setq blist (send b1 :bodies))
    (kxr-link-create blist :joint-coord c :upper-coord (get b1 :upper-coord))))

(defun kxr-y-wrist-p-link (&key apply-list (l/r :larm) base-b sensor)
  (let* ((b1 (if base-b (kxr-joint-base-b-servo-bodyset nil :sensor sensor)
		 (kxr-joint-base-a-servo-bodyset :sensor sensor)))
	 blist)
    (send b1 :rotate pi/2 :z :world)
    (send b1 :rotate pi :y :world)
    (send b1 :rotate pi/2 :z :world)
    (send b1 :locate #f(0 0 3))
    (dolist (al apply-list) (send* b1 al))
    (setq blist (append (send b1 :bodies)))
    (kxr-link-create blist :joint-coord (get b1 :joint-coord) :upper-coord (get b1 :upper-coord))))

(defun kxr-elbow-p-gripper-link (&key (l/r :larm)) ;; sensor)
  (let ((b0 (kxr-servo-frame-base-a-bodyset))
	(g (kxr-gripper-servo-bodyset :l/r l/r)) ;;  :sensor sensor))
	blist)
    (send g :locate (send (get b0 :joint-coord) :worldpos) :world)
    (send b0 :assoc g)
    (setq blist (append (send b0 :bodies) (send g :bodies)))
    (kxr-link-create blist :joint-coord (get g :joint-coord))))

(defun kxr-finger1-link (&key (l/r :larm) sensor with-wheel gripper-axis attachment)
  (let* ((f1 (kxr-finger-bodyset :attachment attachment :sensor sensor
				 :gripper-axis gripper-axis :with-wheel with-wheel))
	 w blist l (c (get f1 :joint-coord)))
    (cond
      ((kxr-right-limb? l/r) (send f1 :rotate pi :z :world))
      ((kxr-left-limb? l/r))
      (t  ;; :head 
       (send f1 :rotate pi/2 :-z :world)
       (send f1 :rotate (deg2rad -90) :y :world)
       (send f1 :rotate pi :x :world)
       ))
    (kxr-link-create (append (send f1 :bodies) blist) :joint-coord c)))

(defun kxr-finger2-link (&key (l/r :larm) sensor gripper-axis attachment)
  (let* ((f2 (kxr-finger-bodyset :attachment attachment
				 :sensor sensor :gripper-axis gripper-axis))
	 blist l (c (get f2 :joint-coord)))
    (send f2 :rotate pi :y)
    (cond
      ((kxr-right-limb? l/r) (send f2 :rotate pi :z :world))
      ((kxr-left-limb? l/r))
      (t 
       (send f2 :rotate pi/2 :-z :world)
       (send f2 :rotate (deg2rad -90) :y :world)
       (send f2 :rotate pi :x :world)))
    (kxr-link-create (send f2 :bodies) :joint-coord c)))

(defun kxr-fingers-links (&key (l/r :larm) gripper-inner sensor gripper-axis
			       attachment with-wheel)
  (let ((f1 (kxr-finger1-link
	     :l/r l/r :with-wheel with-wheel :gripper-axis gripper-axis
	     :attachment (when attachment (if (eq attachment :up) :rarm :larm))
	     :sensor
	     (or (member sensor (list t l/r :finger1 '(:finger1)) :test #'equal)
		 (and (memq :finger1 sensor) (memq l/r sensor)))))
	(f2 (kxr-finger2-link 
	     :l/r l/r :gripper-axis gripper-axis
	     :attachment (when attachment (if (eq attachment :up) :larm :rarm))
	     :sensor (or (member sensor (list t l/r :finger2 '(:finger2)) :test #'equal)
			 (and (memq :finger2 sensor) (memq l/r sensor))))))
    (if (or (eq gripper-inner t) (eq-memq l/r gripper-inner))
	(list f2 f1)
      (list f1 f2))))

(defun kxr-pgrippers-links (&key (l/r :larm) gripper-inner sensor gripper-axis
				 with-wheel)
  (let ((f1 (kxr-pgripper-bodyset))
	(f2 (kxr-pgripper-bodyset))
	)
    (send f1 :rotate -pi/2 :x :world)
    (send f1 :locate (float-vector 0 23 -20) :world)
    (send f2 :rotate -pi/2 :x :world)
    (send f2 :rotate pi :z :world)
    (send f2 :locate (float-vector 0 -23 -20) :world)
    (list f1 f2)))

(defun kxr-pgripper-base-link (&key (l/r :larm) sensor)
  (let* ((b0 (kxr-pgripper-base))
	(base (kxr-servo-bottom-spacer-bodyset :align t :rotate-z pi/2))
	l (c (get b0 :upper-coord)))
    (send b0 :locate (send (get base :upper-coord) :worldpos) :world)
    (send base :assoc b0)
    (setq l (kxr-link-create (append (send base :bodies) (list b0)) :joint-coord c))
    l))

(defun kxr-shoulder-cross-y-link (&key (l/r :larm))
  (let ((b0 (kxr-cross-servo-bodyset)) blist (c (make-cascoords)))
    (send b0 :rotate pi/2 :y :world)
    (if (eq l/r :larm) (send b0 :rotate pi/2 :-z :world)	
      (send b0 :rotate pi/2 :z :world))
    (setq blist (send b0 :bodies))
    (kxr-link-create blist :joint-coord c)))

(defun kxr-shoulder-cross-p-link (&key (l/r :larm))
  (let ((b0 (kxr-cross-servo-bodyset)) blist (c (make-cascoords)))
    (if (eq l/r :larm) (send b0 :rotate pi/2 :x :world)	
	(send b0 :rotate -pi/2 :x :world))
    (setq blist (send b0 :bodies))
    (kxr-link-create blist :joint-coord c)))

(defun kxr-cross-servo-link (&key (l/r :larm) apply-list sensor servo-flip
			       (frame-b t) supporter canti back joint-coord)
  (let* ((b0 (kxr-cross-servo-bodyset-aux :frame-b frame-b :supporter supporter :sensor sensor
					  :servo-flip servo-flip
					  :backpack back :canti canti :apply-list apply-list))
	 (u (get b0 :upper-coord))
	 l (c (if (coordinates-p joint-coord) joint-coord (get b0 :joint-coord))))
    ;;(dolist (al apply-list) (send* b0 al))
    (kxr-link-create (send b0 :bodies) :joint-coord c :upper-coord u)))

(defun kxr-wcross-servo-link (&key (l/r :larm) apply-list sensor servo-flip
				   (frame-b t) supporter canti back joint-coord)
  (let* ((b0 (kxr-wcross-servo-bodyset :l/r l/r))
	 (u (get b0 :upper-coord))
	 l (c (if (coordinates-p joint-coord) joint-coord (get b0 :joint-coord))))
    (cond
     ((kxr-left-limb? l/r)
      (send b0 :rotate -pi/2 :z :world)
      (send b0 :rotate -pi/2 :y :world))
     (t
      (send b0 :rotate pi/2 :z :world)
      (send b0 :rotate -pi/2 :y :world))
     )
    (kxr-link-create (send b0 :bodies) :joint-coord c :upper-coord u)))

(defun kxr-torso-cross-servo-link (&key apply-list no-backpack joint-coord)
  (let ((b0 (kxr-cross-servo-for-torso-bodyset))
	(c (make-cascoords))
	l)
    (dolist (al apply-list) (send* b0 al))
    (kxr-link-create (send b0 :bodies)
		     :joint-coord (if (coordinates-p joint-coord) joint-coord (get b0 :joint-coord)))))

(defun kxr-crotch-cross-wheel-link (&key (l/r :lleg) sensor)
  (let* ((b0 (kxr-cross-servo-bodyset-aux :frame-b t :sensor sensor))
	 (mag (substringp "MAG" (string sensor)))
	 (b1 (kxr-wheel-servo-spacer-bodyset :base-a t :servo-flip (kxr-left-limb? l/r) :mag mag))
	 (bb0 (send b0 :bounding-box))
	 blist)
    (send b1 :locate (float-vector (elt (send bb0 :minpoint) 0) 0 (if mag -10.5 0)) :world)
    (setq blist (append (send b0 :bodies) (send b1 :bodies)))
    (kxr-link-create blist :joint-coord (get b1 :joint-coord))))

(defun kxr-ankle-cross-wheel-link (&key (l/r :lleg) sensor)
  (let* ((b0 (kxr-cross-servo-bodyset-aux :frame-b t :sensor sensor))
	 (mag (substringp "MAG" (string sensor)))
	 (b1 (kxr-wheel-servo-spacer-bodyset :servo-flip (kxr-left-limb? l/r) :mag mag))
	 (bb0 (send b0 :bounding-box))
	 blist)
    (send b0 :rotate pi :x)
    (send b1 :locate (float-vector (elt (send bb0 :minpoint) 0) 0 (if mag 10.5 0)) :world)
    (setq blist (append (send b0 :bodies) (send b1 :bodies)))
    (kxr-link-create blist :joint-coord (get b1 :joint-coord))
    ))

(defun kxr-passive-wheel-link (&key (l/r :larm) (axis :y) (offset 6.5) horn (horn-height 5))
  (kxr-wheel-link :l/r l/r :offset offset :axis axis :horn horn :horn-height horn-height))

(defun kxr-wheel-link (&key (l/r :lleg) (axis :y) (offset (+ 3.5 10.5)) double (horn t)
			 (radius 48)
			 (horn-height 3) apply-list)
  (let* ((b0 (if double (if (= radius 48) (kxr-wheel48) (kxr-wheel60)) (kxr-wheel)))
	 h (blist (list b0)) l (c (make-cascoords)))
    (when horn
      (setq h (kxr-horn horn-height))
      (send h :rotate pi :x :world)
      (if double
	  (send h :translate #f(0 0 -5) :world)
	  (send h :translate #f(0 0 -6.5) :world))
      (send h :assoc b0)
      (send h :bottom-to-z)
      (push h blist))
    (setq b0 (kxr-bodyset-create blist))
    (send b0 :rotate pi/2 :-x :world) ;; same orientation in :lleg, :rleg
    (if double
	(send c :locate #f(0 0 -24) :world)
	(send c :locate #f(0 0 -30.5) :world))
    (send b0 :assoc c)
    (case
	axis
      (:z (send b0 :rotate pi/2 :x)
	  (send b0 :locate (float-vector 0 0 (- offset)) :world))
      (:y (cond
	    ((kxr-left-limb? l/r)
	     (send b0 :locate (float-vector 0 offset 0) :world))
	    (t (send b0 :rotate pi :z :world)
	       (send b0 :locate (float-vector 0 (- offset) 0) :world))))
      (:x
       (send b0 :rotate pi/2 :z :world)
       (send b0 :locate (float-vector offset 0 0) :world)
       ))
    (dolist (al apply-list) (send* b0 al))
    (kxr-link-create (send b0 :bodies) :joint-coord c)))

(defun kxr-double-arm-base-link (&key (l/r :lleg) (up 38) (low 20) (angle 0))
  (let ((b0 (kxr-arm-base-bodyset up))
	(b1 (kxr-arm-base-bodyset low))
	blist l (c (make-cascoords)))
    (send b0 :rotate pi/2 :z :world)
    (send b1 :rotate pi/2 :z :world)
    (send c :locate (float-vector 0 0 low) :world)
    (send b1 :assoc c)
    (send b1 :rotate pi :y :world)
    (send b0 :assoc b1)
    (send b0 :locate (float-vector 0 0 (- up)) :world)

    (setq blist (append (send b0 :bodies) (send b1 :bodies)))

    (setq l (kxr-link-create blist :joint-coord c))
    (send l :rotate angle :y :world)
    l))

(defun kxr-angle-arm-link (&key (l/r :lleg) frontal (rotate t) (arm-len 38) sensor)
  (let ((b0 (kxr-angle-arm-bodyset :rotate rotate :arm-len arm-len :sensor sensor)))
    (if (kxr-arm-limb? l/r) (send b0 :rotate pi :z :world))
    (when frontal (send b0 :rotate -pi/2 :y :world)
	  (send-all (send b0 :bodies) :worldcoords))
    (kxr-link-create (send b0 :bodies) :joint-coord (get b0 :joint-coord))))

(defun kxr-mag-link (mag-type &key apply-list horn)
  (let ((b0 (kxr-joint-mag mag-type))
	(org (make-cascoords))
	blist h (c (make-cascoords)) l)
    (when (substringp "HORN" (string mag-type))
      (setq horn t))
    (send b0 :assoc c)
    (send b0 :top-to-z)
    (push b0 blist)
    (send org :assoc b0)
    (when horn
      (setq h (kxr-horn))
      (push h blist)
      (send h :assoc b0)
      (send h :translate #f(0 0 -3) :world)
      (send org :assoc h))
    (dolist (a apply-list) (send* org a))
    (setq l (kxr-link-create blist :joint-coord c))
    (send l :name mag-type)
    l))

(defun kxr-foot-link (&key (len 28) (l/r :lleg) (sole t) ankle-sensor sole-sensor (arm t) (flip t)
			foot-flip)
  (let* (b0 b1 pos-up pos-bottom sole-body
	    s blist l (c (make-cascoords)))
    (cond
      ((or arm ankle-sensor)
       (setq b0 (kxr-arm-base-bodyset len))
       (send b0 :bottom-to-z)
       (when ankle-sensor
	 (setq s (kxr-sensor-joint-base ankle-sensor :flip flip))
	 (send s :top-to-z)
	 (send s :assoc b0)
	 (send s :bottom-to-z)
	 (setq b0 (kxr-bodyset-create (cons s (send b0 :bodies)) (get b0 :joint-coord)))
	 (send b0 :bottom-to-z)
	 ))
      (t (setq b0 (kxr-joint-base))
	 (send b0 :top-to-z-pos)
	 (setq b0 (kxr-bodyset-create (list b0)))))
    (setq blist (send b0 :bodies))
    ;;
    (cond
      ((eq-memq sole-sensor (list t l/r))
       (setq sole-body (kxr-sensor-sole)))
      ((eq-memq sole (list t l/r))
       (setq sole-body (kxr-sole))))
    (setq b1 (copy-object sole-body))
    (cond
      (b1
       (unless (send b1 :name) (send b1 :put :name "sole"))
       (send b1 :rotate pi/2 :-y :world)
       (if (kxr-left-limb? l/r)
	   (send b1 :rotate pi/2 :-z :world)
	   (send b1 :rotate pi/2 :z :world))
       (send b0 :bottom-to-z)
       (send b1 :top-to-z-pos)
       (send b1 :assoc b0)
       (send b1 :bottom-to-z-pos)
       (push b1 blist)
       )
      (t (send (car blist) :bottom-to-z)))
    (send (car blist) :assoc c)
    (send (car blist) :translate (v- (send (get b0 :joint-coord) :worldpos)) :world)
    (kxr-link-create blist :joint-coord c)
    ))

(defun kxr-auv-head-link nil
  (let* ((h (kxr-auv-head))
	 (blist (send h :bodies))
	 (c (make-cascoords)))
    (kxr-link-create blist :joint-coord c)
    ))

(defun kxr-driver-servo-link ()
  (let* ((b0 (kxr-bottom-spacer2))
	 (s0 (kxr-servo-s3301))
	 l dv (c (get s0 :upper-coord)))
    (send b0 :rotate pi/2 :y)
    (send s0 :rotate pi :z)
    (send s0 :translate (float-vector 0 0 13) :world)
    (send b0 :assoc s0)
    (send b0 :rotate pi :z :world)
    (send b0 :rotate pi/2 :y :world)
    (send b0 :translate (float-vector 6.5 0 0) :world)
    (setq l (kxr-link-create (list b0 s0) :joint-coord c))
    l))

(defun kxr-driver-link ()
  (let ((b0 (make-solid-of-revolution (list (float-vector 6 0 18) (float-vector 8 0 6.5) (float-vector 8 0 0))))
	(s0 (make-solid-of-revolution (list (float-vector 0.5 0 70) (float-vector 2 0 64)
					    (float-vector 2 0 30) (float-vector 3.5 0 25)
					    (float-vector 3.5 0 0))))
	l dv (c (make-cascoords)))
    (send b0 :set-color :white)
    (send b0 :assoc s0)
    (send b0 :rotate pi/2 :y :world)
    (setq l (kxr-bodyset-create (list b0 s0) c))
    (setq l (kxr-link-create l :joint-coord c))
    l))

(defun kxr-worm-rotation-link (&rest args &key apply-list)
  (let ((b0 (make-fillet-cube 50 27 27 13.5 :segments 10 :corners '(0 1)))
	(b0- (make-fillet-cube 50 23 23 11.5 :segments 10 :corners '(0 1)))
	(cyl12 (make-cylinder 6 29))
	(cyl7 (make-cylinder 3.5 10))
	(cyl6 (make-cylinder 3 10))
	(c0- (make-cube 50 40 21))
	(c1- (make-cube 8 16 40))
	(worm0 (make-cylinder 12 15))
	(w- (make-cylinder 8 20))
	(worm1 (make-cylinder 11 13))
	(sv (kxr-servo-s3304))
	(bd (make-cube 15 27 27))
	(jb (kxr-joint-base))
	blist l (c (make-cascoords :pos #f(11.5 0 0))))
    ;;(send cyl12 :translate #f(
    (send cyl12 :translate #f(11.5 0 -14.5) :world)
    (setq b0 (body+ b0 cyl12))
    (send cyl7 :translate #f(11.5 0 6) :world)
    (setq b0 (body+ b0 cyl7))
    (send cyl6 :translate #f(11.5 0 -18) :world)
    (setq b0 (body+ b0 cyl6))
    (send b0- :translate #f(-2 0 0) :world)
    (setq b0 (body- b0 b0-))
    (send c0- :translate #f(-15 0 0) :world)
    (setq b0 (body- b0 c0-))
    (send c1- :translate #f(-25 0 0) :world)
    (setq b0 (body- b0 c1-))
    (send b0 :assoc c)
    (send w- :translate #f(0 0 3) :world)
    (setq worm0 (body- worm0 w-))
    (send worm0 :rotate -pi/2 :x :world)
    (send worm0 :translate #f(-9 -8 0) :world)
    (send worm1 :translate #f(11.5 0 -6.5) :world)
    (send sv :rotate pi :z :world)
    (send sv :rotate -pi/2 :x :world)
    (send sv :locate #f(-9 -29 0) :world)
    (send bd :translate #f(-32 0 0) :world)
    (send jb :rotate -pi/2 :y :world)
    (send jb :translate #f(-42.5 0 0) :world)
    (setq b0 (kxr-make-kxr-body "worm-rotation-joint" b0 b0 nil))
    (setq worm0 (kxr-make-kxr-body "worm0" worm0 worm0 nil))
    (setq worm1 (kxr-make-kxr-body "worm1" worm1 worm1 nil))
    (setq bd (kxr-make-kxr-body "worm-rotation-joint-base" bd bd nil))
    (setq blist (list jb b0 worm0 worm1 sv bd))
    (send jb :assoc cyl6)
    (dolist (a (cdr blist)) (send jb :assoc a))
    (send jb :rotate -pi/2 :y :world)
    (send jb :rotate -pi/2 :z :world)
    (send jb :locate #f(0 0 3) :world)
    (dolist (al apply-list) (send* jb al))
    (setq l (kxr-link-create blist :joint-coord c))
    (setf (get l :upper-coord) (send (send cyl6 :worldcoords) :rotate pi :x :world))
    l))

(reset-new-defun) ;; reset defun definition


